<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d75/namespacetesting" kind="namespace">
    <compoundname>testing</compoundname>
    <innerclass refid="d9/d39/classtesting_1_1DefaultValue" prot="public">testing::DefaultValue</innerclass>
    <innerclass refid="d9/d46/classtesting_1_1DefaultValue_3_01T_01_6_01_4" prot="public">testing::DefaultValue&lt; T &amp; &gt;</innerclass>
    <innerclass refid="d1/dc5/classtesting_1_1DefaultValue_3_01void_01_4" prot="public">testing::DefaultValue&lt; void &gt;</innerclass>
    <innerclass refid="d0/d43/classtesting_1_1ActionInterface" prot="public">testing::ActionInterface</innerclass>
    <innerclass refid="dd/db3/classtesting_1_1Action" prot="public">testing::Action</innerclass>
    <innerclass refid="dd/d73/classtesting_1_1PolymorphicAction" prot="public">testing::PolymorphicAction</innerclass>
    <innerclass refid="d3/d86/classtesting_1_1CardinalityInterface" prot="public">testing::CardinalityInterface</innerclass>
    <innerclass refid="d0/dfe/classtesting_1_1Cardinality" prot="public">testing::Cardinality</innerclass>
    <innerclass refid="d4/d9c/classtesting_1_1MockFunction_3_01R_07_08_4" prot="public">testing::MockFunction&lt; R()&gt;</innerclass>
    <innerclass refid="d3/dff/classtesting_1_1MockFunction_3_01R_07A0_08_4" prot="public">testing::MockFunction&lt; R(A0)&gt;</innerclass>
    <innerclass refid="d7/d22/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_08_4" prot="public">testing::MockFunction&lt; R(A0, A1)&gt;</innerclass>
    <innerclass refid="d9/d90/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2)&gt;</innerclass>
    <innerclass refid="d2/dc4/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3)&gt;</innerclass>
    <innerclass refid="d5/d89/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4)&gt;</innerclass>
    <innerclass refid="d8/d77/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_00_01A5_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5)&gt;</innerclass>
    <innerclass refid="d5/dfe/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_00_01A5_00_01A6_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6)&gt;</innerclass>
    <innerclass refid="da/db6/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_00_01A5_00_01A6_00_01A7_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7)&gt;</innerclass>
    <innerclass refid="dc/df1/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_00_01A5_00_01A6_00_01A7_00_01A8_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7, A8)&gt;</innerclass>
    <innerclass refid="d4/d4f/classtesting_1_1MockFunction_3_01R_07A0_00_01A1_00_01A2_00_01A3_00_01A4_00_01A5_00_01A6_00_01A7_00_01A8_00_01A9_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)&gt;</innerclass>
    <innerclass refid="dd/d61/classtesting_1_1NiceMock" prot="public">testing::NiceMock</innerclass>
    <innerclass refid="db/db7/classtesting_1_1NaggyMock" prot="public">testing::NaggyMock</innerclass>
    <innerclass refid="d1/d12/classtesting_1_1StrictMock" prot="public">testing::StrictMock</innerclass>
    <innerclass refid="db/d3e/classtesting_1_1MatchResultListener" prot="public">testing::MatchResultListener</innerclass>
    <innerclass refid="d0/d35/classtesting_1_1MatcherDescriberInterface" prot="public">testing::MatcherDescriberInterface</innerclass>
    <innerclass refid="d2/d3c/classtesting_1_1MatcherInterface" prot="public">testing::MatcherInterface</innerclass>
    <innerclass refid="d8/d10/classtesting_1_1StringMatchResultListener" prot="public">testing::StringMatchResultListener</innerclass>
    <innerclass refid="d9/d0a/classtesting_1_1Matcher" prot="public">testing::Matcher</innerclass>
    <innerclass refid="d4/d62/classtesting_1_1Matcher_3_01const_01internal_1_1string_01_6_01_4" prot="public">testing::Matcher&lt; const internal::string &amp; &gt;</innerclass>
    <innerclass refid="d2/d16/classtesting_1_1Matcher_3_01internal_1_1string_01_4" prot="public">testing::Matcher&lt; internal::string &gt;</innerclass>
    <innerclass refid="d5/db9/classtesting_1_1PolymorphicMatcher" prot="public">testing::PolymorphicMatcher</innerclass>
    <innerclass refid="d9/d14/classtesting_1_1SafeMatcherCastImpl" prot="public">testing::SafeMatcherCastImpl</innerclass>
    <innerclass refid="d0/d62/classtesting_1_1Mock" prot="public">testing::Mock</innerclass>
    <innerclass refid="d5/dc0/classtesting_1_1Expectation" prot="public">testing::Expectation</innerclass>
    <innerclass refid="db/dc4/classtesting_1_1ExpectationSet" prot="public">testing::ExpectationSet</innerclass>
    <innerclass refid="dc/ded/classtesting_1_1Sequence" prot="public">testing::Sequence</innerclass>
    <innerclass refid="d4/d08/classtesting_1_1InSequence" prot="public">testing::InSequence</innerclass>
    <innerclass refid="d3/d98/classtesting_1_1Message" prot="public">testing::Message</innerclass>
    <innerclass refid="df/d0c/classtesting_1_1ScopedFakeTestPartResultReporter" prot="public">testing::ScopedFakeTestPartResultReporter</innerclass>
    <innerclass refid="d9/d98/classtesting_1_1TestPartResult" prot="public">testing::TestPartResult</innerclass>
    <innerclass refid="dc/dce/classtesting_1_1TestPartResultArray" prot="public">testing::TestPartResultArray</innerclass>
    <innerclass refid="df/d70/classtesting_1_1TestPartResultReporterInterface" prot="public">testing::TestPartResultReporterInterface</innerclass>
    <innerclass refid="dd/d5f/classtesting_1_1AssertionResult" prot="public">testing::AssertionResult</innerclass>
    <innerclass refid="db/d9f/classtesting_1_1Test" prot="public">testing::Test</innerclass>
    <innerclass refid="dd/dde/classtesting_1_1TestProperty" prot="public">testing::TestProperty</innerclass>
    <innerclass refid="d6/d6e/classtesting_1_1TestResult" prot="public">testing::TestResult</innerclass>
    <innerclass refid="df/d65/classtesting_1_1TestInfo" prot="public">testing::TestInfo</innerclass>
    <innerclass refid="d0/d9a/classtesting_1_1TestCase" prot="public">testing::TestCase</innerclass>
    <innerclass refid="dc/d71/classtesting_1_1Environment" prot="public">testing::Environment</innerclass>
    <innerclass refid="d0/d51/classtesting_1_1TestEventListener" prot="public">testing::TestEventListener</innerclass>
    <innerclass refid="d6/d86/classtesting_1_1EmptyTestEventListener" prot="public">testing::EmptyTestEventListener</innerclass>
    <innerclass refid="db/d70/classtesting_1_1TestEventListeners" prot="public">testing::TestEventListeners</innerclass>
    <innerclass refid="d5/d21/classtesting_1_1UnitTest" prot="public">testing::UnitTest</innerclass>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="da/df7/namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d0/d75/namespacetesting_1a603e329ec0263ebfcf16f712810bd511" prot="public" static="no">
        <type><ref refid="d7/de8/classtesting_1_1internal_1_1IgnoredValue" kindref="compound">internal::IgnoredValue</ref></type>
        <definition>typedef internal::IgnoredValue testing::Unused</definition>
        <argsstring></argsstring>
        <name>Unused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1046" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d75/namespacetesting_1a992de1d091ce660f451d1e8b3ce30fd6" prot="public" static="no">
        <type>internal::TimeInMillis</type>
        <definition>typedef internal::TimeInMillis testing::TimeInMillis</definition>
        <argsstring></argsstring>
        <name>TimeInMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="480" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a4ba77a3f5b67166ff1b59d96a32346a2" prot="public" static="no" mutable="no">
        <type>const <ref refid="d2/dc5/classtesting_1_1internal_1_1AnythingMatcher" kindref="compound">internal::AnythingMatcher</ref></type>
        <definition>const internal::AnythingMatcher testing::_</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer> {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3729" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae028f80705ba0f84ce7d036bf3793448" prot="public" static="no" mutable="no">
        <type>class GTEST_API_ <ref refid="d4/d08/classtesting_1_1InSequence" kindref="compound">testing::InSequence</ref></type>
        <definition>class GTEST_API_ testing::InSequence  testing::GTEST_ATTRIBUTE_UNUSED_</definition>
        <argsstring></argsstring>
        <name>GTEST_ATTRIBUTE_UNUSED_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-spec-builders.h" line="668"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae605f2ccac04616bb7812ca72e517082" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::kMaxStackTraceDepth</definition>
        <argsstring></argsstring>
        <name>kMaxStackTraceDepth</name>
        <initializer> 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultDeathTestStyle[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultDeathTestStyle</name>
        <initializer> &quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-death-test.cxx" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-death-test.cxx" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a0a2a3239fb038e7ce83195d89941872d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDisableTestFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDisableTestFilter</name>
        <initializer> &quot;DISABLED_*:*/DISABLED_*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="160" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a23c33f4bfcc3c2e5e620eff31a98892d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDeathTestCaseFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestCaseFilter</name>
        <initializer> &quot;*DeathTest:*DeathTest/*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="165" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a236f8612e4b148d8d989a311a30a4557" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kUniversalFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kUniversalFilter</name>
        <initializer> &quot;*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="168" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1aa5a002b5bb3784c830b1c99aa2688f27" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultOutputFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultOutputFile</name>
        <initializer> &quot;test_detail.xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a5f76dfdb8cb2664da54e320ecaba3643" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardIndex[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardIndex</name>
        <initializer> &quot;GTEST_SHARD_INDEX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="174" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a7542311baba200ebabd4065717606f6e" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestTotalShards[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestTotalShards</name>
        <initializer> &quot;GTEST_TOTAL_SHARDS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="176" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a57d3eeb1e968b4f1efc4787b2d39fbfa" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardStatusFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardStatusFile</name>
        <initializer> &quot;GTEST_SHARD_STATUS_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1afa194c15a2ac0e03029019b0f4029968" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuitesAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuitesAttributes</name>
        <initializer> {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;random_seed&quot;,
  &quot;tests&quot;,
  &quot;time&quot;,
  &quot;timestamp&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2084" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1af44b2969928d37e9081145760f21e79a" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuiteAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuiteAttributes</name>
        <initializer> {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;tests&quot;,
  &quot;time&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2095" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae9689f28cd859736f734623b26c93d88" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestCaseAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestCaseAttributes</name>
        <initializer> {
  &quot;classname&quot;,
  &quot;name&quot;,
  &quot;status&quot;,
  &quot;time&quot;,
  &quot;type_param&quot;,
  &quot;value_param&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2105" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2098" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3261ae1e1f83fca7d102d54206ad5b97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db3/classtesting_1_1Action" kindref="compound">Action</ref>&lt; F &gt;</type>
        <definition>Action&lt;F&gt; testing::MakeAction</definition>
        <argsstring>(ActionInterface&lt; F &gt; *impl)</argsstring>
        <name>MakeAction</name>
        <param>
          <type><ref refid="d0/d43/classtesting_1_1ActionInterface" kindref="compound">ActionInterface</ref>&lt; F &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="463" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acc59b38b7d1bc4de0acdea945dee2da4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; Impl &gt;</type>
        <definition>PolymorphicAction&lt;Impl&gt; testing::MakePolymorphicAction</definition>
        <argsstring>(const Impl &amp;impl)</argsstring>
        <name>MakePolymorphicAction</name>
        <param>
          <type>const Impl &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="475" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5cdf330108efd24297fa795818a49cb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="da/de2/classtesting_1_1internal_1_1ReturnAction" kindref="compound">internal::ReturnAction</ref>&lt; <ref refid="d8/df7/structR" kindref="compound">R</ref> &gt;</type>
        <definition>internal::ReturnAction&lt;R&gt; testing::Return</definition>
        <argsstring>(R value)</argsstring>
        <name>Return</name>
        <param>
          <type><ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1061" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1061" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa0331596e269114da101f810d3a1b88b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d3/d11/classtesting_1_1internal_1_1ReturnNullAction" kindref="compound">internal::ReturnNullAction</ref> &gt;</type>
        <definition>PolymorphicAction&lt;internal::ReturnNullAction&gt; testing::ReturnNull</definition>
        <argsstring>()</argsstring>
        <name>ReturnNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1066" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1066" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8da8e53d2e7bc4e3c531f7435ad04823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d5/db6/classtesting_1_1internal_1_1ReturnVoidAction" kindref="compound">internal::ReturnVoidAction</ref> &gt;</type>
        <definition>PolymorphicAction&lt;internal::ReturnVoidAction&gt; testing::Return</definition>
        <argsstring>()</argsstring>
        <name>Return</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1071" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1071" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1abb3679abdf6e6e6e2542655751eec97c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d36/classtesting_1_1internal_1_1ReturnRefAction" kindref="compound">internal::ReturnRefAction</ref>&lt; <ref refid="d8/df7/structR" kindref="compound">R</ref> &gt;</type>
        <definition>internal::ReturnRefAction&lt;R&gt; testing::ReturnRef</definition>
        <argsstring>(R &amp;x)</argsstring>
        <name>ReturnRef</name>
        <param>
          <type><ref refid="d8/df7/structR" kindref="compound">R</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1077" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1077" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a43715d34a1c4b3ac2b1bf86d3911ff97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d8/d40/classtesting_1_1internal_1_1ReturnRefOfCopyAction" kindref="compound">internal::ReturnRefOfCopyAction</ref>&lt; <ref refid="d8/df7/structR" kindref="compound">R</ref> &gt;</type>
        <definition>internal::ReturnRefOfCopyAction&lt;R&gt; testing::ReturnRefOfCopy</definition>
        <argsstring>(const R &amp;x)</argsstring>
        <name>ReturnRefOfCopy</name>
        <param>
          <type>const <ref refid="d8/df7/structR" kindref="compound">R</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1085" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1085" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0bc5abba48041e2be35a6618002f6418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d36/structtesting_1_1internal_1_1ByMoveWrapper" kindref="compound">internal::ByMoveWrapper</ref>&lt; <ref refid="d8/df7/structR" kindref="compound">R</ref> &gt;</type>
        <definition>internal::ByMoveWrapper&lt;R&gt; testing::ByMove</definition>
        <argsstring>(R x)</argsstring>
        <name>ByMove</name>
        <param>
          <type><ref refid="d8/df7/structR" kindref="compound">R</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1094" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1094" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae041df61ff61ccb9753ba15b4309e1a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d0/d0f/classtesting_1_1internal_1_1DoDefaultAction" kindref="compound">internal::DoDefaultAction</ref></type>
        <definition>internal::DoDefaultAction testing::DoDefault</definition>
        <argsstring>()</argsstring>
        <name>DoDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1099" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1099" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a419b041a0a499584d7f6a0e2c6c8fcea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d7/d2e/classtesting_1_1internal_1_1SetArgumentPointeeAction" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>, <ref refid="d1/def/classT" kindref="compound">T</ref>, <ref refid="d9/d92/structtesting_1_1internal_1_1IsAProtocolMessage" kindref="compound">internal::IsAProtocolMessage</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::value &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt; N, T, internal::IsAProtocolMessage&lt;T&gt;::value&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1109" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2792ccd44f30da8b9a661d030291f455" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d7/d2e/classtesting_1_1internal_1_1SetArgumentPointeeAction" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>, const char *, false &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt;N, const char*, false&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const char *p)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1121" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4d1cbb2ef59b5ac6d52e7bd5b7e9a30c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d7/d2e/classtesting_1_1internal_1_1SetArgumentPointeeAction" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>, const wchar_t *, false &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt;N, const wchar_t*, false&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const wchar_t *p)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const wchar_t *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1129" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a070a9f653c04e9682a9b950c91d894fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d7/d2e/classtesting_1_1internal_1_1SetArgumentPointeeAction" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>, <ref refid="d1/def/classT" kindref="compound">T</ref>, <ref refid="d9/d92/structtesting_1_1internal_1_1IsAProtocolMessage" kindref="compound">internal::IsAProtocolMessage</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::value &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt; N, T, internal::IsAProtocolMessage&lt;T&gt;::value&gt; &gt; testing::SetArgumentPointee</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>SetArgumentPointee</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1140" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a958993e3a5d0c97698b7206368afeb5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d6/d79/classtesting_1_1internal_1_1AssignAction" kindref="compound">internal::AssignAction</ref>&lt; T1, T2 &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::AssignAction&lt;T1, T2&gt; &gt; testing::Assign</definition>
        <argsstring>(T1 *ptr, T2 val)</argsstring>
        <name>Assign</name>
        <param>
          <type>T1 *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1147" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a00cdb86a4c9690cd6a93bb38bf2098cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d9/df7/classtesting_1_1internal_1_1SetErrnoAndReturnAction" kindref="compound">internal::SetErrnoAndReturnAction</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::SetErrnoAndReturnAction&lt;T&gt; &gt; testing::SetErrnoAndReturn</definition>
        <argsstring>(int errval, T result)</argsstring>
        <name>SetErrnoAndReturn</name>
        <param>
          <type>int</type>
          <declname>errval</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1156" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a41f3f089ae6a93307eb53194baba905c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionImpl</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="df/dfb/classtesting_1_1internal_1_1InvokeWithoutArgsAction" kindref="compound">internal::InvokeWithoutArgsAction</ref>&lt; FunctionImpl &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeWithoutArgsAction&lt;FunctionImpl&gt; &gt; testing::InvokeWithoutArgs</definition>
        <argsstring>(FunctionImpl function_impl)</argsstring>
        <name>InvokeWithoutArgs</name>
        <param>
          <type>FunctionImpl</type>
          <declname>function_impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1168" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1168" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1affffc6b6bcd4cff0581656ea2fe220f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Class</type>
          </param>
          <param>
            <type>typename MethodPtr</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d6/d56/classtesting_1_1internal_1_1InvokeMethodWithoutArgsAction" kindref="compound">internal::InvokeMethodWithoutArgsAction</ref>&lt; Class, MethodPtr &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeMethodWithoutArgsAction&lt;Class, MethodPtr&gt; &gt; testing::InvokeWithoutArgs</definition>
        <argsstring>(Class *obj_ptr, MethodPtr method_ptr)</argsstring>
        <name>InvokeWithoutArgs</name>
        <param>
          <type>Class *</type>
          <declname>obj_ptr</declname>
        </param>
        <param>
          <type>MethodPtr</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1177" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1177" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a39f11c0e869b859ae456513d50858617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d4/dc4/structA" kindref="compound">A</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="da/db1/classtesting_1_1internal_1_1IgnoreResultAction" kindref="compound">internal::IgnoreResultAction</ref>&lt; <ref refid="d4/dc4/structA" kindref="compound">A</ref> &gt;</type>
        <definition>internal::IgnoreResultAction&lt;A&gt; testing::IgnoreResult</definition>
        <argsstring>(const A &amp;an_action)</argsstring>
        <name>IgnoreResult</name>
        <param>
          <type>const <ref refid="d4/dc4/structA" kindref="compound">A</ref> &amp;</type>
          <declname>an_action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1187" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab19c2ce9c0457638ac73e6d78c9d8646" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d11/classtesting_1_1internal_1_1ReferenceWrapper" kindref="compound">internal::ReferenceWrapper</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::ReferenceWrapper&lt;T&gt; testing::ByRef</definition>
        <argsstring>(T &amp;l_value)</argsstring>
        <name>ByRef</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>l_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="1199" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" bodystart="1199" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a137297cb3c582843989fbd937cf0fed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AtLeast</definition>
        <argsstring>(int n)</argsstring>
        <name>AtLeast</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="126" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock-cardinalities.cxx" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5487cd1068c78821ced96fbf542a91bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AtMost</definition>
        <argsstring>(int n)</argsstring>
        <name>AtMost</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock-cardinalities.cxx" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa1f8a6371097e1e9b8d6866020f35252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AnyNumber</definition>
        <argsstring>()</argsstring>
        <name>AnyNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="132" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock-cardinalities.cxx" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3bb2d3cdd3fdf5b4be1480fce549918e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::Between</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>Between</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="135" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock-cardinalities.cxx" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa9b1b32ba9e8d3db8ac0af0fc8785c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::Exactly</definition>
        <argsstring>(int n)</argsstring>
        <name>Exactly</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="138" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock-cardinalities.cxx" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af567006969875ab70fc6aa3029576774" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d0/dfe/classtesting_1_1Cardinality" kindref="compound">Cardinality</ref></type>
        <definition>Cardinality testing::MakeCardinality</definition>
        <argsstring>(const CardinalityInterface *c)</argsstring>
        <name>MakeCardinality</name>
        <param>
          <type>const <ref refid="d3/d86/classtesting_1_1CardinalityInterface" kindref="compound">CardinalityInterface</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" line="141" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-cardinalities.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a931cffd65164e8b645eb8fc93a05eca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="625" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="625" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac148c4353fc367ab12ca1d88148c9c94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="631" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="631" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1d00a91c3858abb874a58e1d19f8807a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="637" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa2785535a112324c054a1730777bdbe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="643" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="643" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ace53a051152196ff959a45c1cd83abe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="649" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="649" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0449f4a299095c469c28e63de12c8b11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="655" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="655" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8c9a1a7003176f4df00cbd433d4b3733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="662" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab878d3c13f472a35db91141371f31867" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="670" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aea537e585faadf8794f5b0ae6ddc3374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="678" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3ad421106cde7b530673b7a21e8c22db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k10</declname>
            <defname>k10</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="687" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a653385eb65acd6fc73251754cc407739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, Action2 &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, Action2&gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="696" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="696" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7a826929b7e3dd7ccb91748ac02c900a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, Action3 &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, Action3&gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="703" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="703" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1abcce8f1036e485ad16b51889a16b817a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, Action4 &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, Action4&gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="711" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6d8df73c1d95dbdf99067644eb155522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, Action5 &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, Action5&gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="720" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af4b14469c9ddf959e5f897deaba1f216" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action5, Action6 &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, Action6&gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="729" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="729" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad0e4135845af5ca5d7e7329f230c6055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action6, Action7 &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, Action7&gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="740" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6234b8ac67f1f460227c2a37746f562a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action7, Action8 &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, Action8&gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="752" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a05b09fbe623d3d17b5979c016e14ad11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
          <param>
            <type>typename Action9</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action7, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action8, Action9 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, internal::DoBothAction&lt;Action8, Action9&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8, Action9 a9)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <param>
          <type>Action9</type>
          <declname>a9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="765" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="764" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0c6d9dea0b9fb76491297200cbdbd54d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
          <param>
            <type>typename Action9</type>
          </param>
          <param>
            <type>typename Action10</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action7, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action8, <ref refid="d0/d8d/classtesting_1_1internal_1_1DoBothAction" kindref="compound">internal::DoBothAction</ref>&lt; Action9, Action10 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, internal::DoBothAction&lt;Action8, internal::DoBothAction&lt;Action9, Action10&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8, Action9 a9, Action10 a10)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <param>
          <type>Action9</type>
          <declname>a9</declname>
        </param>
        <param>
          <type>Action10</type>
          <declname>a10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="778" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8a02397c7fdf8e84d559ab72dcc28eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2198" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2196" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afaa0d88f5442f9aee5d6147377d3e50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(p0))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(p0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2207" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2205" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a39bf6c49dc1323cc9539a12249e60aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(p0, p1))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(p0, p1)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2216" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2214" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac50647216fdf5197899a3d5034a9a670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_3_VALUE_PARAMS(p0, p1, p2))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_3_VALUE_PARAMS(p0, p1, p2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2225" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2223" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae98e43eecf8f44990b39b460f00b397b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_4_VALUE_PARAMS(p0, p1, p2, p3))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2234" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2232" bodyend="2239"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a505f6d82df233802c5f4235d77dca164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2243" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2241" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab85e5f54a209bf141fc04f8612fbe887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2252" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2250" bodyend="2257"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8d3590561f334d165c620f522219831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2261" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2259" bodyend="2266"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8725892aafb62cc8f6f76280d29595d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2270" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2268" bodyend="2275"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a910551adbfeb1854071ef55ae54a5c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2279" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2277" bodyend="2284"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab7bf885ff274cbdc09f19c39e43b7f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2288" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2286" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a468e601467d018ab7566f321d3f7e871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2302" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2300" bodyend="2304"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af07e911d69b8efb03bddbd0332f79ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_1_VALUE_PARAMS(p0))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(p0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2308" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2306" bodyend="2310"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad418620ed637e789f91d029f4fe85b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_2_VALUE_PARAMS(p0, p1))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(p0, p1)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2314" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2312" bodyend="2316"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac24511eb64ebe2c2927feaf285ac3785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_3_VALUE_PARAMS(p0, p1, p2))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_3_VALUE_PARAMS(p0, p1, p2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2320" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2318" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afc5a3710d11bdee2023d8402b84d86ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_4_VALUE_PARAMS(p0, p1, p2, p3))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2324" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0c03444379adfb849db243829946c1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2332" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2330" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2ef1b31693ee2be0bb93602b375fb9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2338" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2336" bodyend="2340"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7b4cfa09367e9938561eeca5a105d183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2344" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2342" bodyend="2346"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a76d58331453ee0a2eb75a5992e35197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2350" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2348" bodyend="2352"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adfb5791a941ec1f2a2f8067fd9ac7667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2356" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2354" bodyend="2358"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3934a47f6125504c939a3573b7fc55c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, <ref refid="d1/def/classT" kindref="compound">T</ref>)</type>
        </param>
        <param>
          <type>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" line="2362" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-actions.h" bodystart="2360" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad628ec4c9edd18b91d4d25ba4fd973ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="481" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="481" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9ae93cc6aea554878b3b8838dad2af9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="487" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="487" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad2a0d59a1e0c46840c02c197de2f4bb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="493" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1c74abd7a21dbd58f0af6bd785438a82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="499" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="499" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aeee0255c81b02324773e672da89346f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="505" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac99726246cf6aa2161465225bbced1b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="511" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="511" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a144b412bebce1c01ef92eaa15a1c2b66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="517" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="517" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a235fc4b48d1d6894652a6f1afd25b397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="524" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acd0c551c185eb5dff55ee605d050849e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="532" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8b3446ebeeb617edbd8c98b1d10d2916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="540" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acc443d59ec30e62fd91f12124c64c64e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k10</declname>
            <defname>k10</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d40/classtesting_1_1internal_1_1ArgsMatcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="549" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a79cf4ae694bf8231dcf283b325405f27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt;&gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt;&gt; &gt; testing::ElementsAre</definition>
        <argsstring>()</argsstring>
        <name>ElementsAre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="570" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2d95e353a059fbc817d866897386f0b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="579" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="579" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac55d182cdc36ae850473aef6b88cbde0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="590" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="590" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acbe80935fb49c141f6311ebee897f355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="603" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="603" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7714c8ce2902f14521e9ab069aa62f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="618" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="618" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa1d2221c74fcb686ccdf267816d5c5cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="636" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="635" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1f7f6eeeb917a7762a2d473d0acf4d99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="657" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="656" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad81c6dc166c725d9f9a4d20c89babc4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="680" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="679" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a40f8c12e2475da4de118f99a05ad88a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="705" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="704" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aafd56c6047715bdcff2f08a270c404e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="733" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="732" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a15b78e4f8d99b2b73114b5847cc5fb29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename T10</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d49/classtesting_1_1internal_1_1ElementsAreMatcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T10 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type, typename internal::DecayArray&lt;T10&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9, const T10 &amp;e10)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <param>
          <type>const T10 &amp;</type>
          <declname>e10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="764" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="762" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8622c12aadfa0e60f7d68683eeb21115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt;&gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt;&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>()</argsstring>
        <name>UnorderedElementsAre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="785" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="785" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0fcd61a57683ba13e4399203eccb2937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="794" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="794" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af04571c42ec1d9df3bc330bbb41b3823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="805" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="805" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad5c45bf51c6d779ef4bb76b3626d4fb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="818" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="818" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0aee8f121bb1f8fa4cf70c9ef917dae4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="833" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="833" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6a2ebc69391b8027e1dd598d31d02add" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="851" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="850" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aac1f3895129ef20c480bca2fe34eca44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="872" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="871" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6fb88ed215664762957db4ddf7fb44c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="896" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="895" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a032c70e1f85d8d977c37ffbd1127f90d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="922" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="921" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acfe7cba07eadcaf0b63c8ee2618d7afa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="950" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="949" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afe6d797903c6b3ccf5199fe875e737f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename T10</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df4/classtesting_1_1internal_1_1UnorderedElementsAreMatcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type, typename <ref refid="d3/d2d/structtesting_1_1internal_1_1DecayArray" kindref="compound">internal::DecayArray</ref>&lt; T10 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type, typename internal::DecayArray&lt;T10&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9, const T10 &amp;e10)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <param>
          <type>const T10 &amp;</type>
          <declname>e10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="981" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="979" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a69ce25dc48ebddb5bd5e100f2eb59939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d8b/structtesting_1_1internal_1_1AllOfResult2" kindref="compound">internal::AllOfResult2</ref>&lt; M1, M2 &gt;::type</type>
        <definition>internal::AllOfResult2&lt;M1, M2&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1002" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1002" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adaa9d26d0ce5abf20588b2eaa9fa3c75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dc8/structtesting_1_1internal_1_1AllOfResult3" kindref="compound">internal::AllOfResult3</ref>&lt; M1, M2, M3 &gt;::type</type>
        <definition>internal::AllOfResult3&lt;M1, M2, M3&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1010" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1010" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae28ff6645cf99e8542b762e6f6995470" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d26/structtesting_1_1internal_1_1AllOfResult4" kindref="compound">internal::AllOfResult4</ref>&lt; M1, M2, M3, M4 &gt;::type</type>
        <definition>internal::AllOfResult4&lt;M1, M2, M3, M4&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1018" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1018" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a45b983ba04016acc4f054c41a639d086" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d33/structtesting_1_1internal_1_1AllOfResult5" kindref="compound">internal::AllOfResult5</ref>&lt; M1, M2, M3, M4, M5 &gt;::type</type>
        <definition>internal::AllOfResult5&lt;M1, M2, M3, M4, M5&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1026" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1026" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aed8663dfb4a5bb4213dd198479639a9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d95/structtesting_1_1internal_1_1AllOfResult6" kindref="compound">internal::AllOfResult6</ref>&lt; M1, M2, M3, M4, M5, M6 &gt;::type</type>
        <definition>internal::AllOfResult6&lt;M1, M2, M3, M4, M5, M6&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1035" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1035" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a385ae40b99adb7ec51c5c12c7fdae746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d38/structtesting_1_1internal_1_1AllOfResult7" kindref="compound">internal::AllOfResult7</ref>&lt; M1, M2, M3, M4, M5, M6, M7 &gt;::type</type>
        <definition>internal::AllOfResult7&lt;M1, M2, M3, M4, M5, M6, M7&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1044" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1044" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a119021c0d37dcc05195f6459a394a1d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
        </templateparamlist>
        <type><ref refid="df/d8c/structtesting_1_1internal_1_1AllOfResult8" kindref="compound">internal::AllOfResult8</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8 &gt;::type</type>
        <definition>internal::AllOfResult8&lt;M1, M2, M3, M4, M5, M6, M7, M8&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1053" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1053" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3cb75e87ee42b867158bdfa82302c9d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d01/structtesting_1_1internal_1_1AllOfResult9" kindref="compound">internal::AllOfResult9</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9 &gt;::type</type>
        <definition>internal::AllOfResult9&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1062" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1062" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a948809053834b036f790b5bdf8824692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
          <param>
            <type>typename M10</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d3e/structtesting_1_1internal_1_1AllOfResult10" kindref="compound">internal::AllOfResult10</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 &gt;::type</type>
        <definition>internal::AllOfResult10&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9, M10&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <param>
          <type>M10</type>
          <declname>m10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1073" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1073" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5c19b9b11958a245ed69c98633385941" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
        </templateparamlist>
        <type><ref refid="d3/d11/structtesting_1_1internal_1_1AnyOfResult2" kindref="compound">internal::AnyOfResult2</ref>&lt; M1, M2 &gt;::type</type>
        <definition>internal::AnyOfResult2&lt;M1, M2&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1085" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1085" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a80f0cdf6f2ef3f47eeef2bfbb2067d00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
        </templateparamlist>
        <type><ref refid="df/d54/structtesting_1_1internal_1_1AnyOfResult3" kindref="compound">internal::AnyOfResult3</ref>&lt; M1, M2, M3 &gt;::type</type>
        <definition>internal::AnyOfResult3&lt;M1, M2, M3&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1093" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1093" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a26751fdb814e33f7cbf955901107c0e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d71/structtesting_1_1internal_1_1AnyOfResult4" kindref="compound">internal::AnyOfResult4</ref>&lt; M1, M2, M3, M4 &gt;::type</type>
        <definition>internal::AnyOfResult4&lt;M1, M2, M3, M4&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1101" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1f3bce83e4a8f3d25f082e1f52c5088a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d50/structtesting_1_1internal_1_1AnyOfResult5" kindref="compound">internal::AnyOfResult5</ref>&lt; M1, M2, M3, M4, M5 &gt;::type</type>
        <definition>internal::AnyOfResult5&lt;M1, M2, M3, M4, M5&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1109" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a26a3fbaa3efec949f7a7feebec676560" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/de9/structtesting_1_1internal_1_1AnyOfResult6" kindref="compound">internal::AnyOfResult6</ref>&lt; M1, M2, M3, M4, M5, M6 &gt;::type</type>
        <definition>internal::AnyOfResult6&lt;M1, M2, M3, M4, M5, M6&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1118" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1118" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7c765be2ce9a3a3dc7efaa440feef7fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dab/structtesting_1_1internal_1_1AnyOfResult7" kindref="compound">internal::AnyOfResult7</ref>&lt; M1, M2, M3, M4, M5, M6, M7 &gt;::type</type>
        <definition>internal::AnyOfResult7&lt;M1, M2, M3, M4, M5, M6, M7&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1127" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad6b9fdbd67ad34f5ab7e97c61a03ef9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d55/structtesting_1_1internal_1_1AnyOfResult8" kindref="compound">internal::AnyOfResult8</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8 &gt;::type</type>
        <definition>internal::AnyOfResult8&lt;M1, M2, M3, M4, M5, M6, M7, M8&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1136" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1136" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a90da0729aaedeb5611c1f90c989f34c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6a/structtesting_1_1internal_1_1AnyOfResult9" kindref="compound">internal::AnyOfResult9</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9 &gt;::type</type>
        <definition>internal::AnyOfResult9&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1145" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac2c27208e203f5118f653c43b6516797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
          <param>
            <type>typename M10</type>
          </param>
        </templateparamlist>
        <type><ref refid="df/d35/structtesting_1_1internal_1_1AnyOfResult10" kindref="compound">internal::AnyOfResult10</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 &gt;::type</type>
        <definition>internal::AnyOfResult10&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9, M10&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <param>
          <type>M10</type>
          <declname>m10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" line="1156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-generated-matchers.h" bodystart="1156" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab785013080cccfe4ca22eac2103184a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>Matcher&lt;T&gt; testing::MakeMatcher</definition>
        <argsstring>(const MatcherInterface&lt; T &gt; *impl)</argsstring>
        <name>MakeMatcher</name>
        <param>
          <type>const <ref refid="d2/d3c/classtesting_1_1MatcherInterface" kindref="compound">MatcherInterface</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="484" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="484" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a679db294ee1874b2d751cfe864b637c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; Impl &gt;</type>
        <definition>PolymorphicMatcher&lt;Impl&gt; testing::MakePolymorphicMatcher</definition>
        <argsstring>(const Impl &amp;impl)</argsstring>
        <name>MakePolymorphicMatcher</name>
        <param>
          <type>const Impl &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="496" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a99fbeee092ec7946ebbcbad60110898a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>Matcher&lt;T&gt; testing::MatcherCast</definition>
        <argsstring>(const M &amp;matcher)</argsstring>
        <name>MatcherCast</name>
        <param>
          <type>const <ref refid="d8/d55/structM" kindref="compound">M</ref> &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="610" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="610" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a752600e536408b81c49609e639efc466" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>Matcher&lt;T&gt; testing::SafeMatcherCast</definition>
        <argsstring>(const M &amp;polymorphic_matcher)</argsstring>
        <name>SafeMatcherCast</name>
        <param>
          <type>const <ref refid="d8/d55/structM" kindref="compound">M</ref> &amp;</type>
          <declname>polymorphic_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="665" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="665" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae54e881daf1b7623a34e968b50771a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>Matcher&lt; T &gt; testing::A</definition>
        <argsstring>()</argsstring>
        <name>A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="671" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3732" bodyend="3732"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa8b3a1b7afecdc0b19c4ff027b727004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d79/classtesting_1_1internal_1_1ElementsAreArrayMatcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; typename::std::iterator_traits&lt; Iter &gt;::value_type &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt; typename ::std::iterator_traits&lt;Iter&gt;::value_type&gt; testing::ElementsAreArray</definition>
        <argsstring>(Iter first, Iter last)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>Iter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3646" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3646" bodyend="3649"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3d82273155ed10d8f7496e149d6ea188" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d79/classtesting_1_1internal_1_1ElementsAreArrayMatcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;T&gt; testing::ElementsAreArray</definition>
        <argsstring>(const T *pointer, size_t count)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3653" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3652" bodyend="3655"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acd905a6c53f44eaaa2b76b7291147c2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d79/classtesting_1_1internal_1_1ElementsAreArrayMatcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;T&gt; testing::ElementsAreArray</definition>
        <argsstring>(const T(&amp;array)[N])</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref>(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3659" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3658" bodyend="3661"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7b8ced6b414cb3015a4917f0bc9b9029" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d79/classtesting_1_1internal_1_1ElementsAreArrayMatcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; typename Container::value_type &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;typename Container::value_type&gt; testing::ElementsAreArray</definition>
        <argsstring>(const Container &amp;container)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3665" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3665" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9338948b346e269d28405bdfa2eb022f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d32/classtesting_1_1internal_1_1UnorderedElementsAreArrayMatcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename::std::iterator_traits&lt; Iter &gt;::value_type &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename ::std::iterator_traits&lt;Iter&gt;::value_type&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(Iter first, Iter last)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>Iter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3688" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3688" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4956eac0d72ee9b315646d83c9faf47e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d32/classtesting_1_1internal_1_1UnorderedElementsAreArrayMatcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt;T&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const T *pointer, size_t count)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3695" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3695" bodyend="3697"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af9c61c1d70dab890f60df9f3f0fe4b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/d32/classtesting_1_1internal_1_1UnorderedElementsAreArrayMatcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt;T&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const T(&amp;array)[N])</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref>(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3701" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3701" bodyend="3703"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7971ce5a5a28aec567afaebea19c4718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d32/classtesting_1_1internal_1_1UnorderedElementsAreArrayMatcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename Container::value_type &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename Container::value_type&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const Container &amp;container)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3708" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3708" bodyend="3710"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae7cf5d1b9490631fa583738cd133ca8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>Matcher&lt;T&gt; testing::An</definition>
        <argsstring>()</argsstring>
        <name>An</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3736" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3736" bodyend="3736"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a81697e46cace04d08a9fa237f0744ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="da/dc4/classtesting_1_1internal_1_1EqMatcher" kindref="compound">internal::EqMatcher</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>internal::EqMatcher&lt;T&gt; testing::Eq</definition>
        <argsstring>(T x)</argsstring>
        <name>Eq</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3742" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3742" bodyend="3742"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9d0c941b73fbe5ed629ac429e84394e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lhs</type>
          </param>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; Lhs &gt;</type>
        <definition>Matcher&lt;Lhs&gt; testing::TypedEq</definition>
        <argsstring>(const Rhs &amp;rhs)</argsstring>
        <name>TypedEq</name>
        <param>
          <type>const Rhs &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3762" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3762" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aea7720490cea6d2e119043858f7e2ca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d8/da5/classtesting_1_1internal_1_1GeMatcher" kindref="compound">internal::GeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::GeMatcher&lt;Rhs&gt; testing::Ge</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Ge</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3766" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3766" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a99cd920ea8c62b58753005851f23727c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d91/classtesting_1_1internal_1_1GtMatcher" kindref="compound">internal::GtMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::GtMatcher&lt;Rhs&gt; testing::Gt</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Gt</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3772" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3772" bodyend="3774"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acb0e161730f5ead46ea41633699b2f4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d94/classtesting_1_1internal_1_1LeMatcher" kindref="compound">internal::LeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::LeMatcher&lt;Rhs&gt; testing::Le</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Le</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3778" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3778" bodyend="3780"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afc3001c924ed35fa7c4705a94970e14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d9c/classtesting_1_1internal_1_1LtMatcher" kindref="compound">internal::LtMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::LtMatcher&lt;Rhs&gt; testing::Lt</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Lt</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3784" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3784" bodyend="3786"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac80fd7d22999be5d519a662bd43bdaba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d7b/classtesting_1_1internal_1_1NeMatcher" kindref="compound">internal::NeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::NeMatcher&lt;Rhs&gt; testing::Ne</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Ne</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3790" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3790" bodyend="3792"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a56ffb1a169c14ce585fc5bed32add2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d7/dc8/classtesting_1_1internal_1_1IsNullMatcher" kindref="compound">internal::IsNullMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::IsNullMatcher &gt; testing::IsNull</definition>
        <argsstring>()</argsstring>
        <name>IsNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3795" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3795" bodyend="3797"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a39d1f92b53b8b2a0b6db6a22ac146416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d9/d02/classtesting_1_1internal_1_1NotNullMatcher" kindref="compound">internal::NotNullMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::NotNullMatcher &gt; testing::NotNull</definition>
        <argsstring>()</argsstring>
        <name>NotNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3802" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3802" bodyend="3804"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8f1888ab93b762ab883e2662baab70cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>internal::RefMatcher&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &amp; &gt;</type>
        <definition>internal::RefMatcher&lt;T&amp;&gt; testing::Ref</definition>
        <argsstring>(T &amp;x)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3809" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3809" bodyend="3811"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1f49f9d97f03bfa4db26888f03486a9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::DoubleEq</definition>
        <argsstring>(double rhs)</argsstring>
        <name>DoubleEq</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3815" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3815" bodyend="3817"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa83ee35256fd90033f615ef640245525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::NanSensitiveDoubleEq</definition>
        <argsstring>(double rhs)</argsstring>
        <name>NanSensitiveDoubleEq</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3821" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3821" bodyend="3823"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aaee08ecb6815ef8398bbcb4e56d56d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::DoubleNear</definition>
        <argsstring>(double rhs, double max_abs_error)</argsstring>
        <name>DoubleNear</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3829" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3828" bodyend="3831"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3caa8177ef48150d0dde3a54b0961f7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::NanSensitiveDoubleNear</definition>
        <argsstring>(double rhs, double max_abs_error)</argsstring>
        <name>NanSensitiveDoubleNear</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3837" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3836" bodyend="3839"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac75507edb7998957b48fb17a9b8a020b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::FloatEq</definition>
        <argsstring>(float rhs)</argsstring>
        <name>FloatEq</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3843" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3843" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab3653439a654b85bdccff46d1436670d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::NanSensitiveFloatEq</definition>
        <argsstring>(float rhs)</argsstring>
        <name>NanSensitiveFloatEq</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3849" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3849" bodyend="3851"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a933a78452dd1770669bed758f35ff250" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::FloatNear</definition>
        <argsstring>(float rhs, float max_abs_error)</argsstring>
        <name>FloatNear</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3857" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3856" bodyend="3859"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a347ebf0075ca9470e71e8ac468c9818f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dc7/classtesting_1_1internal_1_1FloatingEqMatcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::NanSensitiveFloatNear</definition>
        <argsstring>(float rhs, float max_abs_error)</argsstring>
        <name>NanSensitiveFloatNear</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3865" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3864" bodyend="3867"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0c0b54e8046936c78ca5e8dd9aba0d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/d84/classtesting_1_1internal_1_1PointeeMatcher" kindref="compound">internal::PointeeMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::PointeeMatcher&lt;InnerMatcher&gt; testing::Pointee</definition>
        <argsstring>(const InnerMatcher &amp;inner_matcher)</argsstring>
        <name>Pointee</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3873" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3872" bodyend="3875"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2b87ea543cdc4c904fcaf237e2a490dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d4/d6d/classtesting_1_1internal_1_1WhenDynamicCastToMatcher" kindref="compound">internal::WhenDynamicCastToMatcher</ref>&lt; To &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::WhenDynamicCastToMatcher&lt;To&gt; &gt; testing::WhenDynamicCastTo</definition>
        <argsstring>(const Matcher&lt; To &gt; &amp;inner_matcher)</argsstring>
        <name>WhenDynamicCastTo</name>
        <param>
          <type>const <ref refid="d9/d0a/classtesting_1_1Matcher" kindref="compound">Matcher</ref>&lt; To &gt; &amp;</type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3885" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3885" bodyend="3888"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a950eba8a22d7f99d8e0d93d1d99d2794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename FieldType</type>
          </param>
          <param>
            <type>typename FieldMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="dc/d00/classtesting_1_1internal_1_1FieldMatcher" kindref="compound">internal::FieldMatcher</ref>&lt; Class, FieldType &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt; internal::FieldMatcher&lt;Class, FieldType&gt; &gt; testing::Field</definition>
        <argsstring>(FieldType Class::*field, const FieldMatcher &amp;matcher)</argsstring>
        <name>Field</name>
        <param>
          <type>FieldType Class::*</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const FieldMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3897" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3896" bodyend="3905"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7d86ca4b99bf8ae3f3edcd0b53155be8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename PropertyType</type>
          </param>
          <param>
            <type>typename PropertyMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="de/dd3/classtesting_1_1internal_1_1PropertyMatcher" kindref="compound">internal::PropertyMatcher</ref>&lt; Class, PropertyType &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt; internal::PropertyMatcher&lt;Class, PropertyType&gt; &gt; testing::Property</definition>
        <argsstring>(PropertyType(Class::*property)() const, const PropertyMatcher &amp;matcher)</argsstring>
        <name>Property</name>
        <param>
          <type>PropertyType(Class::*)() const </type>
          <declname>property</declname>
        </param>
        <param>
          <type>const PropertyMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3914" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3913" bodyend="3923"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad1ddd2ed0be93c14d6625a38e831cc8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ResultOfMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dc2/classtesting_1_1internal_1_1ResultOfMatcher" kindref="compound">internal::ResultOfMatcher</ref>&lt; Callable &gt;</type>
        <definition>internal::ResultOfMatcher&lt;Callable&gt; testing::ResultOf</definition>
        <argsstring>(Callable callable, const ResultOfMatcher &amp;matcher)</argsstring>
        <name>ResultOf</name>
        <param>
          <type>Callable</type>
          <declname>callable</declname>
        </param>
        <param>
          <type>const ResultOfMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3940" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3939" bodyend="3949"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a154de81376ae7d584c6e5a619b45fb09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d23/classtesting_1_1internal_1_1StrEqualityMatcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrEq</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrEq</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3955" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3955" bodyend="3958"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6f6b8af3d19cb969df0eb995c47a14d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d23/classtesting_1_1internal_1_1StrEqualityMatcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrNe</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrNe</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3962" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3962" bodyend="3965"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1addbdb8c0902ab09cade24fa6db7c0073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d23/classtesting_1_1internal_1_1StrEqualityMatcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrCaseEq</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrCaseEq</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3969" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3969" bodyend="3972"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9596fd67bdd5df195bc54382f91a1906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d23/classtesting_1_1internal_1_1StrEqualityMatcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrCaseNe</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrCaseNe</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3976" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3976" bodyend="3979"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7d27682e38d57eea81ba145a2772e1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="dd/df1/classtesting_1_1internal_1_1HasSubstrMatcher" kindref="compound">internal::HasSubstrMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::HasSubstrMatcher&lt;internal::string&gt; &gt; testing::HasSubstr</definition>
        <argsstring>(const internal::string &amp;substring)</argsstring>
        <name>HasSubstr</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>substring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3984" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3984" bodyend="3987"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae0502232432b1fe8361d296c6de6beda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d6/d70/classtesting_1_1internal_1_1StartsWithMatcher" kindref="compound">internal::StartsWithMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StartsWithMatcher&lt;internal::string&gt; &gt; testing::StartsWith</definition>
        <argsstring>(const internal::string &amp;prefix)</argsstring>
        <name>StartsWith</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3991" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3991" bodyend="3994"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aec11c4e418a835ca2c0c3cbdb29b28ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d96/classtesting_1_1internal_1_1EndsWithMatcher" kindref="compound">internal::EndsWithMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::EndsWithMatcher&lt;internal::string&gt; &gt; testing::EndsWith</definition>
        <argsstring>(const internal::string &amp;suffix)</argsstring>
        <name>EndsWith</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="3998" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="3998" bodyend="4001"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4dac232f315edc259b62ce88e413b107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="db/de0/classtesting_1_1internal_1_1MatchesRegexMatcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::MatchesRegex</definition>
        <argsstring>(const internal::RE *regex)</argsstring>
        <name>MatchesRegex</name>
        <param>
          <type>const <ref refid="d0/d6d/classtesting_1_1internal_1_1RE" kindref="compound">internal::RE</ref> *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4006" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4005" bodyend="4008"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afea6e0eaf0ae69b409fc1c0285df6c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="db/de0/classtesting_1_1internal_1_1MatchesRegexMatcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::MatchesRegex</definition>
        <argsstring>(const internal::string &amp;regex)</argsstring>
        <name>MatchesRegex</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4010" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4009" bodyend="4012"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a899838630a71376aa071dfd7c500f2ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="db/de0/classtesting_1_1internal_1_1MatchesRegexMatcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::ContainsRegex</definition>
        <argsstring>(const internal::RE *regex)</argsstring>
        <name>ContainsRegex</name>
        <param>
          <type>const <ref refid="d0/d6d/classtesting_1_1internal_1_1RE" kindref="compound">internal::RE</ref> *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4017" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4016" bodyend="4019"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad8efafa15630a8274f41f5e22f8f0e49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="db/de0/classtesting_1_1internal_1_1MatchesRegexMatcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::ContainsRegex</definition>
        <argsstring>(const internal::string &amp;regex)</argsstring>
        <name>ContainsRegex</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4021" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4020" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa7771a34f092fd6f1dca2c82fb2a36a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d0/dd8/classtesting_1_1internal_1_1Eq2Matcher" kindref="compound">internal::Eq2Matcher</ref></type>
        <definition>internal::Eq2Matcher testing::Eq</definition>
        <argsstring>()</argsstring>
        <name>Eq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4082" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4082" bodyend="4082"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8cc0a6519e30bedf52c6e53c71e18265" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/dc6/classtesting_1_1internal_1_1Ge2Matcher" kindref="compound">internal::Ge2Matcher</ref></type>
        <definition>internal::Ge2Matcher testing::Ge</definition>
        <argsstring>()</argsstring>
        <name>Ge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4086" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4086" bodyend="4086"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3eaae6408f77ba7d87ca2d6a21dbde77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d0/d57/classtesting_1_1internal_1_1Gt2Matcher" kindref="compound">internal::Gt2Matcher</ref></type>
        <definition>internal::Gt2Matcher testing::Gt</definition>
        <argsstring>()</argsstring>
        <name>Gt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4090" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4090" bodyend="4090"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a04def1c627ea7e3fce2f08cb06e83ebc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d1/d4e/classtesting_1_1internal_1_1Le2Matcher" kindref="compound">internal::Le2Matcher</ref></type>
        <definition>internal::Le2Matcher testing::Le</definition>
        <argsstring>()</argsstring>
        <name>Le</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4094" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4094" bodyend="4094"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3b4d6d29d715c1bf219163f5206b53d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d0/dab/classtesting_1_1internal_1_1Lt2Matcher" kindref="compound">internal::Lt2Matcher</ref></type>
        <definition>internal::Lt2Matcher testing::Lt</definition>
        <argsstring>()</argsstring>
        <name>Lt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4098" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4098" bodyend="4098"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0cde8994764617eebc751e682c28d4ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="df/d2e/classtesting_1_1internal_1_1Ne2Matcher" kindref="compound">internal::Ne2Matcher</ref></type>
        <definition>internal::Ne2Matcher testing::Ne</definition>
        <argsstring>()</argsstring>
        <name>Ne</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4102" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4102" bodyend="4102"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afede91d4f9e45eb019fa1807c764defa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/d5a/classtesting_1_1internal_1_1NotMatcher" kindref="compound">internal::NotMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::NotMatcher&lt;InnerMatcher&gt; testing::Not</definition>
        <argsstring>(InnerMatcher m)</argsstring>
        <name>Not</name>
        <param>
          <type>InnerMatcher</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4107" bodyend="4109"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1ae32c6c218ef88dbd422c38f064d8a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d5/d36/classtesting_1_1internal_1_1TrulyMatcher" kindref="compound">internal::TrulyMatcher</ref>&lt; Predicate &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::TrulyMatcher&lt;Predicate&gt; &gt; testing::Truly</definition>
        <argsstring>(Predicate pred)</argsstring>
        <name>Truly</name>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4116" bodyend="4118"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a77222bbb366cc0071a96562a1d51916a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SizeMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d5a/classtesting_1_1internal_1_1SizeIsMatcher" kindref="compound">internal::SizeIsMatcher</ref>&lt; SizeMatcher &gt;</type>
        <definition>internal::SizeIsMatcher&lt;SizeMatcher&gt; testing::SizeIs</definition>
        <argsstring>(const SizeMatcher &amp;size_matcher)</argsstring>
        <name>SizeIs</name>
        <param>
          <type>const SizeMatcher &amp;</type>
          <declname>size_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4128" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4128" bodyend="4130"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a75916f8d8ba6e88ab48b62bf96605604" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DistanceMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/dfd/classtesting_1_1internal_1_1BeginEndDistanceIsMatcher" kindref="compound">internal::BeginEndDistanceIsMatcher</ref>&lt; DistanceMatcher &gt;</type>
        <definition>internal::BeginEndDistanceIsMatcher&lt;DistanceMatcher&gt; testing::BeginEndDistanceIs</definition>
        <argsstring>(const DistanceMatcher &amp;distance_matcher)</argsstring>
        <name>BeginEndDistanceIs</name>
        <param>
          <type>const DistanceMatcher &amp;</type>
          <declname>distance_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4139" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4139" bodyend="4141"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a325a83e9773a34312d04258a32942a34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db9/classtesting_1_1PolymorphicMatcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="d8/dea/classtesting_1_1internal_1_1ContainerEqMatcher" kindref="compound">internal::ContainerEqMatcher</ref>&lt; GTEST_REMOVE_CONST_(Container)&gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::ContainerEqMatcher&lt; GTEST_REMOVE_CONST_(Container)&gt; &gt; testing::ContainerEq</definition>
        <argsstring>(const Container &amp;rhs)</argsstring>
        <name>ContainerEq</name>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4150" bodyend="4156"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2788f73fa97e3389f069c8e6575aed5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Comparator</type>
          </param>
          <param>
            <type>typename ContainerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d38/classtesting_1_1internal_1_1WhenSortedByMatcher" kindref="compound">internal::WhenSortedByMatcher</ref>&lt; Comparator, ContainerMatcher &gt;</type>
        <definition>internal::WhenSortedByMatcher&lt;Comparator, ContainerMatcher&gt; testing::WhenSortedBy</definition>
        <argsstring>(const Comparator &amp;comparator, const ContainerMatcher &amp;container_matcher)</argsstring>
        <name>WhenSortedBy</name>
        <param>
          <type>const Comparator &amp;</type>
          <declname>comparator</declname>
        </param>
        <param>
          <type>const ContainerMatcher &amp;</type>
          <declname>container_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4163" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4162" bodyend="4166"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8ef11e5a545a5ef5a55c69922d40b321" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d38/classtesting_1_1internal_1_1WhenSortedByMatcher" kindref="compound">internal::WhenSortedByMatcher</ref>&lt; <ref refid="dc/d5c/structtesting_1_1internal_1_1LessComparator" kindref="compound">internal::LessComparator</ref>, ContainerMatcher &gt;</type>
        <definition>internal::WhenSortedByMatcher&lt;internal::LessComparator, ContainerMatcher&gt; testing::WhenSorted</definition>
        <argsstring>(const ContainerMatcher &amp;container_matcher)</argsstring>
        <name>WhenSorted</name>
        <param>
          <type>const ContainerMatcher &amp;</type>
          <declname>container_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4172" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4172" bodyend="4176"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0d74e644b4a41ecf13fe45f2027a93e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleMatcher</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/dc7/classtesting_1_1internal_1_1PointwiseMatcher" kindref="compound">internal::PointwiseMatcher</ref>&lt; TupleMatcher, GTEST_REMOVE_CONST_(Container)&gt;</type>
        <definition>internal::PointwiseMatcher&lt;TupleMatcher, GTEST_REMOVE_CONST_(Container)&gt; testing::Pointwise</definition>
        <argsstring>(const TupleMatcher &amp;tuple_matcher, const Container &amp;rhs)</argsstring>
        <name>Pointwise</name>
        <param>
          <type>const TupleMatcher &amp;</type>
          <declname>tuple_matcher</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4187" bodyend="4194"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab48715dd9834117691b0219fce068032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple2Matcher</type>
          </param>
          <param>
            <type>typename RhsContainer</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d32/classtesting_1_1internal_1_1UnorderedElementsAreArrayMatcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename <ref refid="d6/d0c/classtesting_1_1internal_1_1BoundSecondMatcher" kindref="compound">internal::BoundSecondMatcher</ref>&lt; Tuple2Matcher, typename <ref refid="d7/d68/classtesting_1_1internal_1_1StlContainerView" kindref="compound">internal::StlContainerView</ref>&lt; GTEST_REMOVE_CONST_(RhsContainer)&gt;::type::value_type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename internal::BoundSecondMatcher&lt; Tuple2Matcher, typename internal::StlContainerView&lt;GTEST_REMOVE_CONST_( RhsContainer)&gt;::type::value_type&gt; &gt; testing::UnorderedPointwise</definition>
        <argsstring>(const Tuple2Matcher &amp;tuple2_matcher, const RhsContainer &amp;rhs_container)</argsstring>
        <name>UnorderedPointwise</name>
        <param>
          <type>const Tuple2Matcher &amp;</type>
          <declname>tuple2_matcher</declname>
        </param>
        <param>
          <type>const RhsContainer &amp;</type>
          <declname>rhs_container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4224" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4223" bodyend="4248"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa6cf4691603709228d4b6d7f389feaff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/df8/classtesting_1_1internal_1_1ContainsMatcher" kindref="compound">internal::ContainsMatcher</ref>&lt; <ref refid="d8/d55/structM" kindref="compound">M</ref> &gt;</type>
        <definition>internal::ContainsMatcher&lt;M&gt; testing::Contains</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Contains</name>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4282" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4282" bodyend="4284"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab1a5a43868108dc2d335abf759fefadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d10/classtesting_1_1internal_1_1EachMatcher" kindref="compound">internal::EachMatcher</ref>&lt; <ref refid="d8/d55/structM" kindref="compound">M</ref> &gt;</type>
        <definition>internal::EachMatcher&lt;M&gt; testing::Each</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Each</name>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4314" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4314" bodyend="4316"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4d7d75015c1e26310c83f8c011ae537d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d3c/classtesting_1_1internal_1_1KeyMatcher" kindref="compound">internal::KeyMatcher</ref>&lt; <ref refid="d8/d55/structM" kindref="compound">M</ref> &gt;</type>
        <definition>internal::KeyMatcher&lt;M&gt; testing::Key</definition>
        <argsstring>(M inner_matcher)</argsstring>
        <name>Key</name>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4322" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4322" bodyend="4324"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab69c14716a3656d43bdd188192cc0368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FirstMatcher</type>
          </param>
          <param>
            <type>typename SecondMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d2d/classtesting_1_1internal_1_1PairMatcher" kindref="compound">internal::PairMatcher</ref>&lt; FirstMatcher, SecondMatcher &gt;</type>
        <definition>internal::PairMatcher&lt;FirstMatcher, SecondMatcher&gt; testing::Pair</definition>
        <argsstring>(FirstMatcher first_matcher, SecondMatcher second_matcher)</argsstring>
        <name>Pair</name>
        <param>
          <type>FirstMatcher</type>
          <declname>first_matcher</declname>
        </param>
        <param>
          <type>SecondMatcher</type>
          <declname>second_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4333" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4333" bodyend="4336"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a94815db5c3170d7dfaa09c9cc0d3d610" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="da/dc6/classtesting_1_1internal_1_1MatcherAsPredicate" kindref="compound">internal::MatcherAsPredicate</ref>&lt; <ref refid="d8/d55/structM" kindref="compound">M</ref> &gt;</type>
        <definition>internal::MatcherAsPredicate&lt;M&gt; testing::Matches</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Matches</name>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4341" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4341" bodyend="4343"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a181eca11a31d2d6d57a219108696557a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::Value</definition>
        <argsstring>(const T &amp;value, M matcher)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4347" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4347" bodyend="4349"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac9408dc826e3d016dca2d5b617474bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>typename <ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::ExplainMatchResult</definition>
        <argsstring>(M matcher, const T &amp;value, MatchResultListener *listener)</argsstring>
        <name>ExplainMatchResult</name>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
          <declname>matcher</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="db/d3e/classtesting_1_1MatchResultListener" kindref="compound">MatchResultListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4355" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4354" bodyend="4357"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8a548657caf954b8a55acf1fc408595d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type>InnerMatcher</type>
        <definition>InnerMatcher testing::AllArgs</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>AllArgs</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" line="4382" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-matchers.h" bodystart="4382" bodyend="4382"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a72ef0875d9ba4a7c9234bfa62bde1467" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionImpl</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="dd/df5/classtesting_1_1internal_1_1InvokeAction" kindref="compound">internal::InvokeAction</ref>&lt; FunctionImpl &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeAction&lt;FunctionImpl&gt; &gt; testing::Invoke</definition>
        <argsstring>(FunctionImpl function_impl)</argsstring>
        <name>Invoke</name>
        <param>
          <type>FunctionImpl</type>
          <declname>function_impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8b206cfe8d2868619966f85f96db0285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Class</type>
          </param>
          <param>
            <type>typename MethodPtr</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/d73/classtesting_1_1PolymorphicAction" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="d3/dcb/classtesting_1_1internal_1_1InvokeMethodAction" kindref="compound">internal::InvokeMethodAction</ref>&lt; Class, MethodPtr &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeMethodAction&lt;Class, MethodPtr&gt; &gt; testing::Invoke</definition>
        <argsstring>(Class *obj_ptr, MethodPtr method_ptr)</argsstring>
        <name>Invoke</name>
        <param>
          <type>Class *</type>
          <declname>obj_ptr</declname>
        </param>
        <param>
          <type>MethodPtr</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="124" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7dd1e34432509d8496eb0f51697b527b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction&gt; testing::WithoutArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithoutArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="135" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae4bfef174b098328d72245c1b78858c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k</declname>
            <defname>k</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d30/classtesting_1_1internal_1_1WithArgsAction" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k&gt; testing::WithArg</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArg</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="146" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a109d48f969260878ed1e743006196992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="163" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0478a3464d31f6726d5bc47b1be46491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SaveArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SaveArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(pointer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a31565a90ad7f08c1a88e4b138957172c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SaveArgPointee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SaveArgPointee</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(pointer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="179" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adfd3c9538285d257370f955aa81488f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SetArgReferee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(value))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SetArgReferee</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="185" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2b0f090219db3bb0630d5ce6f7d911d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SetArrayArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(first, last))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SetArrayArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(first, last)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a37a5ebfe68fd8dedf8bd82a5ebddcb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(DeleteArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>DeleteArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="217" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3d58f0d746946064154cd257d368599d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_P</definition>
        <argsstring>(ReturnPointee, pointer)</argsstring>
        <name>ACTION_P</name>
        <param>
          <type>ReturnPointee</type>
        </param>
        <param>
          <type>pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" line="222" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-actions.h" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a25b4065291778029b6311f07c2fc9cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::MATCHER</definition>
        <argsstring>(IsEmpty, negation?&quot;isn&apos;t empty&quot;:&quot;is empty&quot;)</argsstring>
        <name>MATCHER</name>
        <param>
          <type>IsEmpty</type>
        </param>
        <param>
          <type>negation?&quot;isn&apos;t empty&quot;:&quot;is empty&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-matchers.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-more-matchers.h" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1332ba3c7a3a585ec0db4a44e88f63e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
        <definition>const T&amp; testing::Const</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>Const</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-spec-builders.h" line="1826" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-spec-builders.h" bodystart="1826" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9dd7591091234b86ce48ce1aff6feeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DECLARE_bool_</definition>
        <argsstring>(catch_leaked_mocks)</argsstring>
        <name>GMOCK_DECLARE_bool_</name>
        <param>
          <type>catch_leaked_mocks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4dd099d1d538f26a16fcc2f94011b37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DECLARE_string_</definition>
        <argsstring>(verbose)</argsstring>
        <name>GMOCK_DECLARE_string_</name>
        <param>
          <type>verbose</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock.h" line="73"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a32b1c6db9ba5133ccabfa67616b3c041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::InitGoogleMock</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleMock</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock.h" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock.cxx" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a20fb86152763dddef67bc1dd8b090800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::InitGoogleMock</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleMock</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock.h" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock.cxx" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(death_test_style)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest-death-test.h" line="50"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7b802e532fd68749765cb7dc156130db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Message &amp;sb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d98/classtesting_1_1Message" kindref="compound">Message</ref> &amp;</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest-message.h" line="232" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest-message.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa8f79fa3e398a6e8527db3ddd0e0d648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>::std::string</type>
        <definition>std::string testing::PrintToString</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>PrintToString</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest-printers.h" line="980"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7c88897836b9f492190fb2b9dfa3a327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TestPartResult &amp;result)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest-test-part.h" line="120" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-test-part.cxx" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c08ba9fcb0581c61e25968e520efa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(also_run_disabled_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="88"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5868c3980b2f69f511fc8c3de7cdfc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(break_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="91"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab6f1777f7b740f31e41f7da017447b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(catch_exceptions)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0f658c915a1e60996a2ab00a06612723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(color)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>color</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a20d69860ce843142c7f740262e6b0c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(filter)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af2cd3595c571ca408afc337bc4bb2619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(list_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3fe54dd551f1c36cfdd1b36cd6881a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(output)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>output</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="112"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aeccefd463a0942da24750e1bbee76041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(print_time)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(random_seed)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a315ef0647e4f2795bf1705de8e9c9659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(repeat)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af37b9206b938bb8b7d398a1379eb7482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(show_internal_stack_frames)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="127"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6d87f7374e105483905a305328856f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(shuffle)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="130"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adba6f8afa0f8695956d0134f1629a10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(stack_trace_depth)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac69f2aeeb84dc5f49bd3d040a6f32d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(throw_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad4d1ea63037fc21018dbe997cb0041d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(stream_result_to)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac1d0baedb17286c5c6c87bd1a45da8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="339" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1010" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a75cb789614cb1c28c34627a4a3c053df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="342" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1015" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6bdf82adf159dcda822d75746937ffa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>(const Message &amp;msg)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const <ref refid="d3/d98/classtesting_1_1Message" kindref="compound">Message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="346" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1021" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a460d7b998622e332392c1e00be3a60d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/d71/classtesting_1_1Environment" kindref="compound">Environment</ref> *</type>
        <definition>Environment* testing::AddGlobalTestEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>AddGlobalTestEnvironment</name>
        <param>
          <type><ref refid="dc/d71/classtesting_1_1Environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1350" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" bodystart="1350" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afd726ae08c9bd16dc52f78c822d9946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1363" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="5368" bodyend="5374"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae5a88709a4a7529e30c83242156556b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1367" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="5378" bodyend="5384"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a390c4f66fe7e9098117eb77e5fffa4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1599" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1606" bodyend="1610"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa1c82529c7591d2a9fd016de45dd9113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1602" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1612" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2288dcf4249f88af67dcd46544dc49a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1605" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1618" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a53e5c6e91ea429c43de7f4f57e33d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1608" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1624" bodyend="1628"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a571c7edcfc574269833ebe3e7d338ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1611" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1630" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1abe7b3fa1c9528745f934d4a14155ea87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="1614" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1636" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2c9a2a391c72a7b02ea3024586e33af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="2063" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1421" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae10e2bb304b74abd1b06a2d912a8b43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="2065" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1428" bodyend="1431"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a56dddb5cf08f537d491782adcae1dbeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::StaticAssertTypeEq</definition>
        <argsstring>()</argsstring>
        <name>StaticAssertTypeEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" line="2154" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gtest/gtest.h" bodystart="2154" bodyend="2157"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac4efd3cec9fd78f180d825c1d178b970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DEFINE_bool_</definition>
        <argsstring>(catch_leaked_mocks, true,&quot;true iff Google Mock should report leaked mock objects &quot;&quot;as failures.&quot;)</argsstring>
        <name>GMOCK_DEFINE_bool_</name>
        <param>
          <type>catch_leaked_mocks</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>&quot;true iff Google <ref refid="d0/d62/classtesting_1_1Mock" kindref="compound">Mock</ref> should report leaked mock objects &quot;&quot;as failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock.cxx" line="42"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a17cbc94a0a3ef8fdf7d58fc5dcdcce2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DEFINE_string_</definition>
        <argsstring>(verbose, internal::kWarningVerbosity,&quot;Controls how verbose Google Mock&apos;s output is.&quot;&quot;  Valid values:\n&quot;&quot;  info    - prints all messages.\n&quot;&quot;  warning - prints warnings and errors.\n&quot;&quot;  error   - prints errors only.&quot;)</argsstring>
        <name>GMOCK_DEFINE_string_</name>
        <param>
          <type>verbose</type>
        </param>
        <param>
          <type>internal::kWarningVerbosity</type>
        </param>
        <param>
          <type>&quot;Controls how verbose Google <ref refid="d0/d62/classtesting_1_1Mock" kindref="compound">Mock</ref>&apos;s output is.&quot;&quot; Valid values:\n&quot;&quot; info - prints all messages.\n&quot;&quot; warning - prints warnings and errors.\n&quot;&quot; error - prints errors only.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gmock.cxx" line="49"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad93c9ec89517d047ed323b79d96df251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(death_test_style, internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle),&quot;Indicates how to run a death test in a forked child process: &quot;&quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot;&quot;from the beginning, running only the specific death test) or &quot;&quot;\&quot;fast\&quot; (child process runs the death test immediately &quot;&quot;after forking).&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;death_test_style&quot;, kDefaultDeathTestStyle</array>
        </param>
        <param>
          <type>&quot;Indicates how to run a death test in a forked child process: &quot;&quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot;&quot;from the beginning, running only the specific death test) or &quot;&quot;\&quot;fast\&quot; (child process runs the death test immediately &quot;&quot;after forking).&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-death-test.cxx" line="93"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afee59458b05682d57d3a389e0903bc01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(death_test_use_fork, internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false),&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot;&quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot;&quot;implemented. Useful when running under valgrind or similar tools if &quot;&quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot;&quot;it sees an unsupported combination of clone() flags. &quot;&quot;It is not recommended to use this flag w/o valgrind though it will &quot;&quot;work in 99% of the cases. Once valgrind is fixed, this flag will &quot;&quot;most likely be removed.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;death_test_use_fork&quot;, false</array>
        </param>
        <param>
          <type>&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot;&quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot;&quot;implemented. Useful when running under valgrind or similar tools if &quot;&quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot;&quot;it sees an unsupported combination of clone() flags. &quot;&quot;It is not recommended to use this flag w/o valgrind though it will &quot;&quot;work in 99% of the cases. Once valgrind is </type>
          <declname>fixed</declname>
        </param>
        <param>
          <type>this flag will&quot;&quot;most likely be removed.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-death-test.cxx" line="105"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(death_test_use_fork)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest-internal-inl.h" line="80"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::GetDefaultFilter</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="192" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="192" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aaead7d1aa21cf4a222e10e4c91c21ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(also_run_disabled_tests, internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false),&quot;Run disabled tests too, in addition to the tests normally being run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;also_run_disabled_tests&quot;, false</array>
        </param>
        <param>
          <type>&quot;Run disabled tests </type>
          <declname>too</declname>
        </param>
        <param>
          <type>in addition to the tests normally being run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="205"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5c9316c2f726f836c50fcfc1065d718c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(break_on_failure, internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false),&quot;True iff a failed assertion should be a debugger break-point.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;break_on_failure&quot;, false</array>
        </param>
        <param>
          <type>&quot;True iff a failed assertion should be a debugger break-point.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="210"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a16f63f28356f1843888013487da9f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(catch_exceptions, internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true),&quot;True iff &quot;GTEST_NAME_&quot; should catch exceptions and treat them as test failures.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;catch_exceptions&quot;, true</array>
        </param>
        <param>
          <type>&quot;True iff &quot;GTEST_NAME_&quot; should catch exceptions and treat them as test failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="216"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a00b4a4eabdef5927208aeabd81220069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(color, internal::StringFromGTestEnv(&quot;color&quot;,&quot;auto&quot;),&quot;Whether to use colors in the output.  Valid values: yes, no, &quot;&quot;and auto.  &apos;auto&apos; means to use colors if the output is &quot;&quot;being sent to a terminal and the TERM environment variable &quot;&quot;is set to a terminal type that supports colors.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>color</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;color&quot;,&quot;auto&quot;</array>
        </param>
        <param>
          <type>&quot;Whether to use colors in the output. Valid values: </type>
          <declname>yes</declname>
        </param>
        <param>
          <type>no</type>
        </param>
        <param>
          <type>&quot;&quot;and auto. &apos;auto&apos;means to use colors if the output is&quot;&quot;being sent to a terminal and the TERM environment variable&quot;&quot;is set to a terminal type that supports colors.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="224"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa7039e72c7b7041f11d2619c93a934d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(filter, internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter()),&quot;A colon-separated list of glob (not regex) patterns &quot;&quot;for filtering the tests to run, optionally followed by a &quot;&quot;&apos;-&apos; and a : separated list of negative patterns (tests to &quot;&quot;exclude).  A test is run if it matches one of the positive &quot;&quot;patterns and does not match any of the negative patterns.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;filter&quot;, GetDefaultFilter()</array>
        </param>
        <param>
          <type>&quot;A colon-separated list of glob (not regex) patterns &quot;&quot;for filtering the tests to </type>
          <declname>run</declname>
        </param>
        <param>
          <type>optionally followed by a&quot;&quot;&apos;-&apos;and a:separated list of negative patterns(tests to&quot;&quot;exclude).<ref refid="d4/dc4/structA" kindref="compound">A</ref> test is run if it matches one of the positive&quot;&quot;patterns and does not match any of the negative patterns.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="233"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9ef54a5b29ac4b2a1e086e77224a0b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(list_tests, false,&quot;List all tests without running them.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;List all tests without running them.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="236"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9f8de43b364103bafa1e8ca4bebe9d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(output, internal::StringFromGTestEnv(&quot;output&quot;,&quot;&quot;),&quot;A format (currently must be \&quot;xml\&quot;), optionally followed &quot;&quot;by a colon and an output file name or directory. A directory &quot;&quot;is indicated by a trailing pathname separator. &quot;&quot;Examples: \&quot;xml:filename.xml\&quot;, \&quot;xml::directoryname/\&quot;. &quot;&quot;If a directory is specified, output files will be created &quot;&quot;within that directory, with file-names based on the test &quot;&quot;executable&apos;s name and, if necessary, made unique by adding &quot;&quot;digits.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>output</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;output&quot;,&quot;&quot;</array>
        </param>
        <param>
          <type>&quot;A format </type>
          <array>currently must be \&quot;xml\&quot;</array>
        </param>
        <param>
          <type>optionally followed&quot;&quot;by a colon and an output file name or directory.A directory&quot;&quot;is indicated by a trailing pathname separator.&quot;&quot;Examples:\&quot;xml:filename.xml\&quot;</type>
        </param>
        <param>
          <type>\&quot;xml::directoryname/\&quot;. &quot;&quot;If a directory is </type>
          <declname>specified</declname>
        </param>
        <param>
          <type>output files will be created&quot;&quot;within that</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>with file-names based on the test&quot;&quot;executable&apos;s name</type>
          <declname>and</declname>
        </param>
        <param>
          <type>if</type>
          <declname>necessary</declname>
        </param>
        <param>
          <type>made unique by adding&quot;&quot;digits.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="248"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a51fb68302e8e3fce5bd61340843a6e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(print_time, internal::BoolFromGTestEnv(&quot;print_time&quot;, true),&quot;True iff &quot;GTEST_NAME_&quot; should display elapsed time in text output.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;print_time&quot;, true</array>
        </param>
        <param>
          <type>&quot;True iff &quot;GTEST_NAME_&quot; should display elapsed time in text output.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="254"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a25e098abb7ce93d06582d48434be90c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(random_seed, internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0),&quot;Random number seed to use when shuffling test orders.  Must be in range &quot;&quot;[1, 99999], or 0 to use a seed based on the current time.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>Int32FromGTestEnv</declname>
          <array>&quot;random_seed&quot;, 0</array>
        </param>
        <param>
          <type>&quot;Random number seed to use when shuffling test orders. Must be in range &quot;&quot;</type>
          <array>[1, 99999]</array>
        </param>
        <param>
          <type>or 0 to use a seed based on the current time.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="260"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8b2c1dad0764e0984486bae49a988f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(repeat, internal::Int32FromGTestEnv(&quot;repeat&quot;, 1),&quot;How many times to repeat each test.  Specify a negative number &quot;&quot;for repeating forever.  Useful for shaking out flaky tests.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>Int32FromGTestEnv</declname>
          <array>&quot;repeat&quot;, 1</array>
        </param>
        <param>
          <type>&quot;How many times to repeat each test. Specify a negative number &quot;&quot;for repeating forever. Useful for shaking out flaky tests.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="266"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5982e64522de6804cbf5d1732fd62751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(show_internal_stack_frames, false,&quot;True iff &quot;GTEST_NAME_&quot; should include internal stack frames when &quot;&quot;printing test failure stack traces.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;True iff &quot;GTEST_NAME_&quot; should include internal stack frames when &quot;&quot;printing test failure stack traces.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="271"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acc11444cd1c18500658a35e02d4f2cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(shuffle, internal::BoolFromGTestEnv(&quot;shuffle&quot;, false),&quot;True iff &quot;GTEST_NAME_&quot; should randomize tests&apos; order on every run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;shuffle&quot;, false</array>
        </param>
        <param>
          <type>&quot;True iff &quot;GTEST_NAME_&quot; should randomize tests&apos; order on every run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="277"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aaedd7015b957f3c37662c289b645e7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(stack_trace_depth, internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth),&quot;The maximum number of stack frames to print when an &quot;&quot;assertion fails.  The valid range is 0 through 100, inclusive.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>Int32FromGTestEnv</declname>
          <array>&quot;stack_trace_depth&quot;, kMaxStackTraceDepth</array>
        </param>
        <param>
          <type>&quot;The maximum number of stack frames to print when an &quot;&quot;assertion fails. The valid range is 0 through </type>
          <declname>100</declname>
        </param>
        <param>
          <type>inclusive.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="283"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0422a6f971513cf559a8575a0533b235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(stream_result_to, internal::StringFromGTestEnv(&quot;stream_result_to&quot;,&quot;&quot;),&quot;This flag specifies the host name and the port number on which to stream &quot;&quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot;&quot;Linux.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;stream_result_to&quot;,&quot;&quot;</array>
        </param>
        <param>
          <type>&quot;This flag specifies the host name and the port number on which to stream &quot;&quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot;&quot;Linux.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="290"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a05ff4385edff6d44f6823f5eade7abe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(throw_on_failure, internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false),&quot;When this flag is specified, a failed assertion will throw an exception &quot;&quot;if exceptions are enabled or exit the program with a non-zero code &quot;&quot;otherwise.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>BoolFromGTestEnv</declname>
          <array>&quot;throw_on_failure&quot;, false</array>
        </param>
        <param>
          <type>&quot;When this flag is </type>
          <declname>specified</declname>
        </param>
        <param>
          <type>a failed assertion will throw an exception&quot;&quot;if exceptions are enabled or exit the program with a non-zero code&quot;&quot;otherwise.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="297"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1deccb13602d9f2dd4f1a23ec7b19b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(flagfile, internal::StringFromGTestEnv(&quot;flagfile&quot;,&quot;&quot;),&quot;This flag specifies the flagfile to read command-line flags from.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>flagfile</type>
        </param>
        <param>
          <type>internal::</type>
          <declname>StringFromGTestEnv</declname>
          <array>&quot;flagfile&quot;,&quot;&quot;</array>
        </param>
        <param>
          <type>&quot;This flag specifies the flagfile to read command-line flags from.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="303"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8d700f2bf0a4c1603d67b8c2b14371eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::wstring &amp;needle, const ::std::wstring &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="1645" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1643" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a84165d16503f1629b3f1bb45d8434c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::wstring &amp;needle, const ::std::wstring &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::wstring &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="1651" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="1649" bodyend="1653"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa98b36148290d1a404c676055eb4055f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>kSize</declname>
            <defname>kSize</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; testing::ArrayAsVector</definition>
        <argsstring>(const char *const (&amp;array)[kSize])</argsstring>
        <name>ArrayAsVector</name>
        <param>
          <type>const char *const (&amp;)</type>
          <declname>array</declname>
          <array>[kSize]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2108" bodyend="2110"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; testing::GetReservedAttributesForElement</definition>
        <argsstring>(const std::string &amp;xml_element)</argsstring>
        <name>GetReservedAttributesForElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2113" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2112" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatWordList</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;words)</argsstring>
        <name>FormatWordList</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2127" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::ValidateTestPropertyName</definition>
        <argsstring>(const std::string &amp;property_name, const std::vector&lt; std::string &gt; &amp;reserved_names)</argsstring>
        <name>ValidateTestPropertyName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>reserved_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2141" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartFatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartFatallyFailed</name>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2179" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2179" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartNonfatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartNonfatallyFailed</name>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2189" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatCountableNoun</definition>
        <argsstring>(int count, const char *singular_form, const char *plural_form)</argsstring>
        <name>FormatCountableNoun</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>singular_form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plural_form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2811" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2809" bodyend="2814"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatTestCount</definition>
        <argsstring>(int test_count)</argsstring>
        <name>FormatTestCount</name>
        <param>
          <type>int</type>
          <declname>test_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2817" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2817" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatTestCaseCount</definition>
        <argsstring>(int test_case_count)</argsstring>
        <name>FormatTestCaseCount</name>
        <param>
          <type>int</type>
          <declname>test_case_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2822" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2822" bodyend="2824"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::TestPartResultTypeToString</definition>
        <argsstring>(TestPartResult::Type type)</argsstring>
        <name>TestPartResultTypeToString</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" line="2830" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/Root/gtest.cxx" bodystart="2830" bodyend="2845"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/Asg_GoogleTest/include/gmock/gmock-actions.h" line="53"/>
  </compounddef>
</doxygen>
