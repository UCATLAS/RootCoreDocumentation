<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/da2/PrunDriver_8cxx" kind="file">
    <compoundname>PrunDriver.cxx</compoundname>
    <includes refid="d6/d7c/PrunDriver_8h" local="no">EventLoopGrid/PrunDriver.h</includes>
    <includes refid="d8/d11/GridDriver_8h" local="no">EventLoopGrid/GridDriver.h</includes>
    <includes refid="d7/d36/Algorithm_8h" local="no">EventLoop/Algorithm.h</includes>
    <includes refid="d5/d80/Job_8h" local="no">EventLoop/Job.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="db/dbe/hadd_8h" local="no">RootCoreUtils/hadd.h</includes>
    <includes refid="d3/dbc/ExceptionMsg_8h" local="no">RootCoreUtils/ExceptionMsg.h</includes>
    <includes refid="d7/d50/MetaObject_8h" local="no">SampleHandler/MetaObject.h</includes>
    <includes refid="df/d9d/Sample_8h" local="no">SampleHandler/Sample.h</includes>
    <includes refid="d7/d20/SampleGrid_8h" local="no">SampleHandler/SampleGrid.h</includes>
    <includes refid="d2/da1/SampleHandler_8h" local="no">SampleHandler/SampleHandler.h</includes>
    <includes refid="d1/dd9/GridTools_8h" local="no">SampleHandler/GridTools.h</includes>
    <includes local="no">TList.h</includes>
    <includes local="no">TPython.h</includes>
    <includes local="no">TROOT.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="130199">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="130200" relation="include">
        </childnode>
        <childnode refid="130201" relation="include">
        </childnode>
        <childnode refid="130202" relation="include">
        </childnode>
      </node>
      <node id="130215">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130216" relation="include">
        </childnode>
        <childnode refid="130217" relation="include">
        </childnode>
        <childnode refid="130218" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
        <childnode refid="130201" relation="include">
        </childnode>
      </node>
      <node id="130213">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="130200" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
        <childnode refid="130215" relation="include">
        </childnode>
        <childnode refid="130202" relation="include">
        </childnode>
      </node>
      <node id="130230">
        <label>xAODRootAccess/tools/TReturnCode.h</label>
        <link refid="df/d0a/TReturnCode_8h_source"/>
      </node>
      <node id="130232">
        <label>TList.h</label>
      </node>
      <node id="130212">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="130200" relation="include">
        </childnode>
      </node>
      <node id="130227">
        <label>SampleHandler/GridTools.h</label>
        <link refid="d1/dd9/GridTools_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130228" relation="include">
        </childnode>
        <childnode refid="130218" relation="include">
        </childnode>
        <childnode refid="130216" relation="include">
        </childnode>
        <childnode refid="130225" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
      </node>
      <node id="130206">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="130205" relation="include">
        </childnode>
      </node>
      <node id="130209">
        <label>EventLoopGrid/GridDriver.h</label>
        <link refid="d8/d11/GridDriver_8h_source"/>
        <childnode refid="130199" relation="include">
        </childnode>
      </node>
      <node id="130207">
        <label>string</label>
      </node>
      <node id="130233">
        <label>TPython.h</label>
      </node>
      <node id="130218">
        <label>map</label>
      </node>
      <node id="130231">
        <label>AthenaBaseComps/AthMessaging.h</label>
      </node>
      <node id="130221">
        <label>RootCoreUtils/ExceptionMsg.h</label>
        <link refid="d3/dbc/ExceptionMsg_8h_source"/>
        <childnode refid="130205" relation="include">
        </childnode>
        <childnode refid="130222" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
      </node>
      <node id="130198">
        <label>EventLoopGrid/PrunDriver.h</label>
        <link refid="d6/d7c/PrunDriver_8h_source"/>
        <childnode refid="130199" relation="include">
        </childnode>
      </node>
      <node id="130226">
        <label>SampleHandler/SampleGrid.h</label>
        <link refid="d7/d20/SampleGrid_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
        <childnode refid="130223" relation="include">
        </childnode>
      </node>
      <node id="130222">
        <label>exception</label>
      </node>
      <node id="130197">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx</label>
        <link refid="PrunDriver.cxx"/>
        <childnode refid="130198" relation="include">
        </childnode>
        <childnode refid="130209" relation="include">
        </childnode>
        <childnode refid="130210" relation="include">
        </childnode>
        <childnode refid="130213" relation="include">
        </childnode>
        <childnode refid="130219" relation="include">
        </childnode>
        <childnode refid="130204" relation="include">
        </childnode>
        <childnode refid="130220" relation="include">
        </childnode>
        <childnode refid="130221" relation="include">
        </childnode>
        <childnode refid="130202" relation="include">
        </childnode>
        <childnode refid="130223" relation="include">
        </childnode>
        <childnode refid="130226" relation="include">
        </childnode>
        <childnode refid="130215" relation="include">
        </childnode>
        <childnode refid="130227" relation="include">
        </childnode>
        <childnode refid="130232" relation="include">
        </childnode>
        <childnode refid="130233" relation="include">
        </childnode>
        <childnode refid="130234" relation="include">
        </childnode>
        <childnode refid="130235" relation="include">
        </childnode>
        <childnode refid="130236" relation="include">
        </childnode>
        <childnode refid="130237" relation="include">
        </childnode>
        <childnode refid="130238" relation="include">
        </childnode>
        <childnode refid="130239" relation="include">
        </childnode>
        <childnode refid="130240" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
      </node>
      <node id="130202">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130204" relation="include">
        </childnode>
        <childnode refid="130206" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
        <childnode refid="130208" relation="include">
        </childnode>
      </node>
      <node id="130223">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
        <childnode refid="130201" relation="include">
        </childnode>
        <childnode refid="130206" relation="include">
        </childnode>
        <childnode refid="130224" relation="include">
        </childnode>
      </node>
      <node id="130200">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="130220">
        <label>RootCoreUtils/hadd.h</label>
        <link refid="db/dbe/hadd_8h_source"/>
        <childnode refid="130205" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
      </node>
      <node id="130234">
        <label>TROOT.h</label>
      </node>
      <node id="130228">
        <label>AsgTools/MessageCheck.h</label>
        <link refid="d6/dab/AsgTools_2AsgTools_2MessageCheck_8h_source"/>
        <childnode refid="130229" relation="include">
        </childnode>
        <childnode refid="130230" relation="include">
        </childnode>
        <childnode refid="130231" relation="include">
        </childnode>
      </node>
      <node id="130201">
        <label>TObject.h</label>
      </node>
      <node id="130236">
        <label>TSystem.h</label>
      </node>
      <node id="130214">
        <label>vector</label>
      </node>
      <node id="130235">
        <label>TFile.h</label>
      </node>
      <node id="130240">
        <label>sstream</label>
      </node>
      <node id="130205">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="130217">
        <label>iosfwd</label>
      </node>
      <node id="130238">
        <label>cstdlib</label>
      </node>
      <node id="130239">
        <label>iostream</label>
      </node>
      <node id="130224">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="130203" relation="include">
        </childnode>
        <childnode refid="130225" relation="include">
        </childnode>
        <childnode refid="130207" relation="include">
        </childnode>
      </node>
      <node id="130210">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="130200" relation="include">
        </childnode>
        <childnode refid="130211" relation="include">
        </childnode>
        <childnode refid="130212" relation="include">
        </childnode>
      </node>
      <node id="130211">
        <label>TNamed.h</label>
      </node>
      <node id="130229">
        <label>type_traits</label>
      </node>
      <node id="130225">
        <label>set</label>
      </node>
      <node id="130204">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="130205" relation="include">
        </childnode>
      </node>
      <node id="130203">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="130237">
        <label>algorithm</label>
      </node>
      <node id="130216">
        <label>memory</label>
      </node>
      <node id="130219">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="130200" relation="include">
        </childnode>
        <childnode refid="130214" relation="include">
        </childnode>
        <childnode refid="130201" relation="include">
        </childnode>
        <childnode refid="130202" relation="include">
        </childnode>
        <childnode refid="130215" relation="include">
        </childnode>
      </node>
      <node id="130208">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a407db9aa4e8d529d10db868c609af4b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::PrunDriver) namespace</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="de/d84/classEL_1_1PrunDriver" kindref="compound">EL::PrunDriver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="33" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1ad73036fa58401daa31d95adcc7804729" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JobState::Enum</type>
        <definition>static JobState::Enum sampleState</definition>
        <argsstring>(SH::Sample *sample)</argsstring>
        <name>sampleState</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a7446f3c5c0ca880ec233bfd6a05fe4ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JobState::Enum</type>
        <definition>static JobState::Enum nextState</definition>
        <argsstring>(JobState::Enum state, Status::Enum status)</argsstring>
        <name>nextState</name>
        <param>
          <type>JobState::Enum</type>
          <declname>state</declname>
        </param>
        <param>
          <type>Status::Enum</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="94" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="93" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a19fc01c0b58504dbed3b972be3564653" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref></type>
        <definition>static SH::MetaObject defaultOpts</definition>
        <argsstring>()</argsstring>
        <name>defaultOpts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a5bb1d46ebbe61f9377d0e58a8ec0f169" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool downloadContainer</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;location)</argsstring>
        <name>downloadContainer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="132" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a9f81b67efd1c517291d6c7cf4b36a6e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status::Enum</type>
        <definition>static Status::Enum submit</definition>
        <argsstring>(SH::Sample *const sample)</argsstring>
        <name>submit</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *const </type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="161" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a958279a542db748b77ee93e5109d4a38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status::Enum</type>
        <definition>static Status::Enum checkPandaTask</definition>
        <argsstring>(SH::Sample *const sample)</argsstring>
        <name>checkPandaTask</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *const </type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="191" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="190" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1aadf8fb2d330611720b5e0a7922900937" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status::Enum</type>
        <definition>static Status::Enum download</definition>
        <argsstring>(SH::Sample *const sample)</argsstring>
        <name>download</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *const </type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="221" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="220" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a16e031f830674912654feec4ec0e445c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status::Enum</type>
        <definition>static Status::Enum merge</definition>
        <argsstring>(SH::Sample *const sample)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *const </type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="252" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1ae27d93f1abdb67f7b85050540063a8b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void processTask</definition>
        <argsstring>(SH::Sample *const sample)</argsstring>
        <name>processTask</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> *const </type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="303" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="302" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a260f5003f9fe5960d4ccad0523d25b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void processAllInState</definition>
        <argsstring>(const SH::SampleHandler &amp;sh, JobState::Enum state, const size_t nThreads)</argsstring>
        <name>processAllInState</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref> &amp;</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>JobState::Enum</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nThreads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="335" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="333" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1af96d1de139e8098572833c3f5946d9c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string formatOutputName</definition>
        <argsstring>(const SH::MetaObject &amp;sampleMeta, const std::string pattern)</argsstring>
        <name>formatOutputName</name>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> &amp;</type>
          <declname>sampleMeta</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="362" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="360" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1a4455d3d265a9928a1582564a18600450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string outputFileNames</definition>
        <argsstring>(const EL::Job &amp;job)</argsstring>
        <name>outputFileNames</name>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="396" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="395" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1aaa351c773341184bd4990a89df4b5538" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void saveJobDef</definition>
        <argsstring>(const std::string &amp;fileName, const EL::Job &amp;job, const SH::SampleHandler sh)</argsstring>
        <name>saveJobDef</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref></type>
          <declname>sh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="419" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="416" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="d0/da2/PrunDriver_8cxx_1ae31e05cec303a854fb9c7a58ef98a8e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref></type>
        <definition>static SH::SampleHandler outputSH</definition>
        <argsstring>(const SH::SampleHandler &amp;in, const std::string &amp;outputLabel)</argsstring>
        <name>outputSH</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" line="437" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx" bodystart="435" bodyend="450"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;EventLoopGrid/PrunDriver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoopGrid/GridDriver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Job.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/hadd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ExceptionMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaObject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/Sample.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleGrid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleHandler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/GridTools.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TPython.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TROOT.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;pool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">ClassImp(<ref refid="de/d84/classEL_1_1PrunDriver" kindref="compound">EL::PrunDriver</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">namespace<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">JobState<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NSTATES<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum<sp/>{<sp/>INIT=0,<sp/>RUN=1,<sp/>DOWNLOAD=2,<sp/>MERGE=3,<sp/>FINISHED=4,<sp/>FAILED=5<sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name[NSTATES]<sp/>=<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;INIT&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RUNNING&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DOWNLOAD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MERGE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FINISHED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum<sp/>parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>what)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NSTATES;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(what<sp/>==<sp/>name[i])<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Enum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT0(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>parse<sp/>job<sp/>state<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//compiler<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Status<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//static<sp/>const<sp/>int<sp/>NSTATES<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum<sp/>{<sp/>DONE=0,<sp/>PENDING=1,<sp/>FAIL=2<sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TransitionRule<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>JobState::Enum<sp/>fromState;<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Status::Enum<sp/>status;<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>JobState::Enum<sp/>toState;<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>TransitionRule(JobState::Enum<sp/>fromState,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status::Enum<sp/>status,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JobState::Enum<sp/>toState)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fromState(fromState)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>status(status)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>toState(toState)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TmpCd<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>origDir;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TmpCd(std::string<sp/>dir)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>origDir(gSystem-&gt;pwd())</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;cd(dir.c_str());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>~TmpCd()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;cd(origDir.c_str());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>JobState::Enum<sp/>sampleState(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/>sample)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>defaultState<sp/>=<sp/>JobState::name[JobState::INIT];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>std::string<sp/>label<sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" kindref="member">getMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state&quot;</highlight><highlight class="normal">,<sp/>defaultState);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JobState::parse(label);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>JobState::Enum<sp/>nextState(JobState::Enum<sp/>state,<sp/>Status::Enum<sp/>status)<sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(state<sp/>!=<sp/>JobState::FINISHED);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(state<sp/>!=<sp/>JobState::FAILED);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TransitionRule<sp/>TABLE[]<sp/>=</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::INIT,<sp/><sp/><sp/><sp/><sp/>Status::DONE,<sp/><sp/><sp/><sp/>JobState::RUN),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::INIT,<sp/><sp/><sp/><sp/><sp/>Status::PENDING,<sp/>JobState::INIT),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::INIT,<sp/><sp/><sp/><sp/><sp/>Status::FAIL,<sp/><sp/><sp/><sp/>JobState::FAILED),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::RUN,<sp/><sp/><sp/><sp/><sp/><sp/>Status::DONE,<sp/><sp/><sp/><sp/>JobState::DOWNLOAD),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::RUN,<sp/><sp/><sp/><sp/><sp/><sp/>Status::PENDING,<sp/>JobState::RUN),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::RUN,<sp/><sp/><sp/><sp/><sp/><sp/>Status::FAIL,<sp/><sp/><sp/><sp/>JobState::FAILED),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::DOWNLOAD,<sp/>Status::DONE,<sp/><sp/><sp/><sp/>JobState::MERGE),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::DOWNLOAD,<sp/>Status::PENDING,<sp/>JobState::DOWNLOAD),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::DOWNLOAD,<sp/>Status::FAIL,<sp/><sp/><sp/><sp/>JobState::FAILED),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::MERGE,<sp/><sp/><sp/><sp/>Status::DONE,<sp/><sp/><sp/><sp/>JobState::FINISHED),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::MERGE,<sp/><sp/><sp/><sp/>Status::PENDING,<sp/>JobState::MERGE),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransitionRule(JobState::MERGE,<sp/><sp/><sp/><sp/>Status::FAIL,<sp/><sp/><sp/><sp/>JobState::DOWNLOAD)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TABLE_SIZE<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TABLE)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TABLE[0]);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>TABLE_SIZE;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TABLE[i].fromState<sp/>==<sp/>state<sp/>&amp;&amp;<sp/>TABLE[i].status<sp/>==<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TABLE[i].toState;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>RCU_ASSERT0(</highlight><highlight class="stringliteral">&quot;Missing<sp/>state<sp/>transtion<sp/>rule&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//compiler<sp/>dummy<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>defaultOpts()</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>o;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>o.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_nGBPerJob&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>o.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_mergeOutput&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>o.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_rootVer&quot;</highlight><highlight class="normal">,<sp/>gROOT-&gt;GetVersion());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>o.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_cmtConfig&quot;</highlight><highlight class="normal">,<sp/>EL::getRootCoreConfig());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>downloadContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>RCU_ASSERT(not<sp/>name.empty());<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>RCU_ASSERT(name[name.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>RCU_ASSERT(not<sp/>location.empty());<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;mkdir<sp/>-p<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>location.c_str()));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>datasets;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry<sp/>:<sp/><ref refid="d0/d9e/namespaceSH_1a371bc3580e0a7420385db611cb60d8fa" kindref="member" tooltip="run rucio-list-dids for the given dataset">SH::rucioListDids</ref><sp/>(name))</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry.type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DATASET&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datasets.push_back<sp/>(entry.name);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>downloadResult<sp/>=<sp/><ref refid="d0/d9e/namespaceSH_1a08a97d09eb6664882be300a3d86acf9f" kindref="member" tooltip="run rucio-download with multiple datasets">SH::rucioDownloadList</ref><sp/>(location,<sp/>datasets);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>result<sp/>:<sp/>downloadResult)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.notDownloaded<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Status::Enum<sp/>submit(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Submitting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>loaded)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/python/EventLoopGrid/ELG_prun.py&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;ExpandPathName(path);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>TPython::LoadMacro(path.Data());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>loaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>TPython::Bind(dynamic_cast&lt;TObject*&gt;(sample),<sp/></highlight><highlight class="stringliteral">&quot;ELG_SAMPLE&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>TPython::Eval(</highlight><highlight class="stringliteral">&quot;ELG_prun(ELG_SAMPLE)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>TPython::Bind(0,<sp/></highlight><highlight class="stringliteral">&quot;ELG_SAMPLE&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>submitting&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::FAIL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1ab19adefa98f34923c0921f9b42d29736" kindref="member">setMetaDouble</ref>(</highlight><highlight class="stringliteral">&quot;nc_jediTaskID&quot;</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::DONE;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Status::Enum<sp/>checkPandaTask(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(static_cast&lt;int&gt;(sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a671f61ecab10f556effe37b0a57c054e" kindref="member">getMetaDouble</ref>(</highlight><highlight class="stringliteral">&quot;nc_jediTaskID&quot;</highlight><highlight class="normal">,0))<sp/>&gt;<sp/>100);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>loaded)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/python/EventLoopGrid/ELG_jediState.py&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;ExpandPathName(path);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>TPython::LoadMacro(path.Data());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>loaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>TPython::Bind(dynamic_cast&lt;TObject*&gt;(sample),<sp/></highlight><highlight class="stringliteral">&quot;ELG_SAMPLE&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>std::string<sp/>ret<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>TPython::Eval(</highlight><highlight class="stringliteral">&quot;ELG_jediState(ELG_SAMPLE)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>TPython::Bind(0,<sp/></highlight><highlight class="stringliteral">&quot;ELG_SAMPLE&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::DONE;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::FAIL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;finished&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::FAIL;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;running&quot;</highlight><highlight class="normal">)<sp/>{<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/>ret);<sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.empty())<sp/>{<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>checking<sp/>jedi<sp/>task<sp/>status&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::PENDING;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Status::Enum<sp/>download(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::mutex<sp/>mutex;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Downloading<sp/>output<sp/>from:<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>std::string<sp/>container<sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" kindref="member">getMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_outDS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>RCU_ASSERT(not<sp/>container.empty());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container[container.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>container.resize(container.size()<sp/>-<sp/>1);<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>container<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_hist/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>downloadOk<sp/>=<sp/>downloadContainer(container,<sp/></highlight><highlight class="stringliteral">&quot;elg/download/&quot;</highlight><highlight class="normal"><sp/>+<sp/>container);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>downloadOk)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>download<sp/>one<sp/>or<sp/>more<sp/>files&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error,<sp/>check<sp/>log<sp/>for<sp/>details&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::PENDING;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::DONE;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Status::Enum<sp/>merge(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>std::string<sp/>container<sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" kindref="member">getMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_outDS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>RCU_ASSERT(not<sp/>container.empty());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container[container.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>container.resize(container.size()<sp/>-<sp/>1);<sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>container<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_hist/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;elg/download/&quot;</highlight><highlight class="normal"><sp/>+<sp/>container;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hist-output.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>target<sp/>=<sp/>Form(</highlight><highlight class="stringliteral">&quot;hist-%s.root&quot;</highlight><highlight class="normal">,<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>().c_str());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>findCmd(Form(</highlight><highlight class="stringliteral">&quot;find<sp/>%s<sp/>-name<sp/>\&quot;*.%s*\&quot;<sp/>|<sp/>tr<sp/>&apos;\n&apos;<sp/>&apos;<sp/>&apos;&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.c_str(),<sp/>fileName.c_str()));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>input(gSystem-&gt;GetFromPipe(findCmd.c_str()).Data());<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>files((std::istream_iterator&lt;std::string&gt;(input)),</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istream_iterator&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>std::sort(files.begin(),<sp/>files.end());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>RCU_ASSERT(std::unique(files.begin(),<sp/>files.end())<sp/>==<sp/>files.end());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>files.size())<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>no<sp/>input<sp/>files<sp/>for<sp/>merging!<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Requeueing<sp/>sample<sp/>for<sp/>download...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;retry,<sp/>files<sp/>were<sp/>lost&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::FAIL;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d83/namespaceRCU_1ad6b11c00605f529a1cde4fdc548dc128" kindref="member">RCU::hadd</ref>(target.c_str(),<sp/>files);<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error,<sp/>check<sp/>log<sp/>for<sp/>details&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;rm<sp/>-f<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>target.c_str()));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::PENDING;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>files.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;rm<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>files[i].c_str()));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;rmdir<sp/>%s/*&quot;</highlight><highlight class="normal">,<sp/>dir.c_str()));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;rmdir<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>dir.c_str()));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status::DONE;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processTask(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sample);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>JobState::Enum<sp/>state<sp/>=<sp/>sampleState(sample);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>Status::Enum<sp/>status<sp/>=<sp/>Status::PENDING;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::INIT:<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>submit(sample);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::RUN:<sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>checkPandaTask(sample);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::DOWNLOAD:<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>download(sample);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::MERGE:<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>merge(sample);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::FINISHED:<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::FAILED:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>nextState(state,<sp/>status);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_ELG_state&quot;</highlight><highlight class="normal">,<sp/>JobState::name[state]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processAllInState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref>&amp;<sp/>sh,<sp/>JobState::Enum<sp/>state,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nThreads)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member" tooltip="the number of samples contained">size</ref>());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>WorkList<sp/>workList;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleState(*s)<sp/>==<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>workList.push_back([s]()-&gt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">{<sp/>processTask(*s);<sp/>});</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>process(workList,<sp/>nThreads);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleState(*s)<sp/>==<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processTask(*s);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>formatOutputName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref>&amp;<sp/>sampleMeta,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>pattern)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>sampleName<sp/>=<sp/>sampleMeta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(</highlight><highlight class="stringliteral">&quot;sample_name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>pattern.empty());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>nickname<sp/>=<sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;GetFromPipe(Form(</highlight><highlight class="stringliteral">&quot;python<sp/>-c<sp/>\&quot;%s\&quot;<sp/>2&gt;/dev/null&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;from<sp/>pandatools<sp/>import<sp/>PsubUtils;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;print<sp/>PsubUtils.getNickname();&quot;</highlight><highlight class="normal">)).Data();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>TString<sp/>out<sp/>=<sp/>pattern.c_str();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>out.ReplaceAll(</highlight><highlight class="stringliteral">&quot;%nickname%&quot;</highlight><highlight class="normal">,<sp/>nickname);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>out.ReplaceAll(</highlight><highlight class="stringliteral">&quot;%in:name%&quot;</highlight><highlight class="normal">,<sp/>sampleName);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss(sampleName);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(ss,<sp/>item,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>sskey;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>sskey<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%in:name[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>++field<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]%&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>out.ReplaceAll(sskey.str(),<sp/>item);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(out.Index(</highlight><highlight class="stringliteral">&quot;%in:&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>out.Index(</highlight><highlight class="stringliteral">&quot;%in:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>out.Index(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>i1+1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>metaName<sp/>=<sp/>out(i1+4,<sp/>i2-i1-4);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>out.ReplaceAll(</highlight><highlight class="stringliteral">&quot;%in:&quot;</highlight><highlight class="normal">+metaName+</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleMeta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(std::string(metaName.Data())));<sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>out.ReplaceAll(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.Data();</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">std::string<sp/>outputFileNames(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref>&amp;<sp/>job)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>TList<sp/>outputs;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::Job::outputIter</ref><sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++out)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>outputs.Add(out-&gt;Clone());</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>std::string<sp/>out<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hist:hist-output.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>TIter<sp/>itr(&amp;outputs);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>TObject<sp/>*obj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((obj<sp/>=<sp/>itr()))<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::OutputStream</ref><sp/>*os<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::OutputStream</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/>os-&gt;<ref refid="d5/dfe/classEL_1_1OutputStream_1a9ef5507e9336b95aace7e2086bc369d2" kindref="member">label</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ds<sp/>=<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;<ref refid="d5/dfe/classEL_1_1OutputStream_1accb97d83127add7d304d9c60cdffc3cf" kindref="member">options</ref>()-&gt;<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(EL::OutputStream::optContainerSuffix);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>(ds.empty()<sp/>?<sp/>name<sp/>:<sp/>ds<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>algortihms<sp/>and<sp/>lists<sp/>of<sp/>inputs<sp/>and<sp/>outputs<sp/>to<sp/>a<sp/>root<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>saveJobDef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fileName,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref>&amp;<sp/>job,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>TFile<sp/>file(fileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;RECREATE&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>TList<sp/>algs,<sp/>outputs;<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" kindref="member">EL::Job::algsIter</ref><sp/>a<sp/>=<sp/>job.algsBegin();<sp/>a<sp/>!=<sp/>job.algsEnd();<sp/>++a)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>algs.Add((*a)-&gt;Clone());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::Job::outputIter</ref><sp/>o<sp/>=<sp/>job.outputBegin();<sp/>o<sp/>!=job.outputEnd();<sp/>++o)<sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>outputs.Add(o-&gt;Clone());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>file.WriteTObject(&amp;algs,<sp/></highlight><highlight class="stringliteral">&quot;algorithms&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SingleKey&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>file.WriteTObject(&amp;outputs,<sp/></highlight><highlight class="stringliteral">&quot;outputs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SingleKey&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref>&amp;<sp/>meta<sp/>=<sp/>*((*s)-&gt;meta());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>file.WriteObject(&amp;meta,<sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(</highlight><highlight class="stringliteral">&quot;sample_name&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>sample<sp/>handler<sp/>with<sp/>grid<sp/>locations<sp/>of<sp/>outputs<sp/>with<sp/>given<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>outputSH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref>&amp;<sp/>in,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>outputLabel)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>out;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>outputFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal"><sp/>+<sp/>outputLabel<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>outDSSuffix<sp/>=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>+<sp/>outputLabel<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root/&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>in.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>in.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d36/classSH_1_1SampleGrid" kindref="compound" tooltip="This class implements a Sample located on the grid.">SH::SampleGrid</ref>*<sp/>outSample<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d36/classSH_1_1SampleGrid" kindref="compound" tooltip="This class implements a Sample located on the grid.">SH::SampleGrid</ref>((*s)-&gt;name());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>outputDS<sp/>=<sp/>(*s)-&gt;getMetaString(</highlight><highlight class="stringliteral">&quot;nc_outDS&quot;</highlight><highlight class="normal">)<sp/>+<sp/>outDSSuffix;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>outSample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_grid&quot;</highlight><highlight class="normal">,<sp/>outputDS);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>outSample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" kindref="member">setMetaString</ref>(</highlight><highlight class="stringliteral">&quot;nc_grid_filter&quot;</highlight><highlight class="normal">,<sp/>outputFile);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref>(outSample);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>out.<ref refid="d1/d56/classSH_1_1SampleHandler_1afa7698bb543938ebf295da6f28e1dd45" kindref="member" tooltip="fetch the meta-data for all samples that are also in the source sample handler.">fetch</ref>(in);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d84/classEL_1_1PrunDriver_1a68c1cbb6a54b57cb2a626a535a041416" kindref="member">EL::PrunDriver::testInvariant</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>RCU_INVARIANT(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">EL::PrunDriver::PrunDriver()<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>RCU_NEW_INVARIANT(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d84/classEL_1_1PrunDriver_1a22d42c7db92111ef0a2a1f88f3f90f21" kindref="member">EL::PrunDriver::doSubmit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref>&amp;<sp/>job,<sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>RCU_READ_INVARIANT(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>location.empty());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>jobELGDir<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/elg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>runShFile<sp/>=<sp/>jobELGDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/runjob.sh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>runShOrig<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/data/EventLoopGrid/runjob.sh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>mergeShFile<sp/>=<sp/>jobELGDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/elg_merge&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>mergeShOrig<sp/>=<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/user_scripts/EventLoopGrid/elg_merge&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>jobDefFile<sp/>=<sp/>jobELGDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/jobdef.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;mkdir<sp/>-p<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>jobELGDir.c_str()));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;cp<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>runShOrig.c_str(),<sp/>runShFile.c_str()));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;chmod<sp/>+x<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>runShFile.c_str()));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;cp<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mergeShOrig.c_str(),<sp/>mergeShFile.c_str()));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>gSystem-&gt;Exec(Form(</highlight><highlight class="stringliteral">&quot;chmod<sp/>+x<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mergeShFile.c_str()));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref>&amp;<sp/>sh<sp/>=<sp/>job.<ref refid="da/dbb/classEL_1_1Job_1aa02788adcdc922ea863ef9c28c7d5b5f" kindref="member">sampleHandler</ref>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref>&amp;<sp/>meta<sp/>=<sp/>*(*s)-&gt;meta();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" kindref="member" tooltip="fetch the meta-data from the given sample not present in this sample. ignores any...">fetchDefaults</ref>(*job.<ref refid="da/dbb/classEL_1_1Job_1a26060474b2602f91ef3d220c415c2005" kindref="member">options</ref>());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" kindref="member" tooltip="fetch the meta-data from the given sample not present in this sample. ignores any...">fetchDefaults</ref>(*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>());</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" kindref="member" tooltip="fetch the meta-data from the given sample not present in this sample. ignores any...">fetchDefaults</ref>(defaultOpts());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_outputs&quot;</highlight><highlight class="normal">,<sp/>outputFileNames(job));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outputSampleName<sp/>=<sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(</highlight><highlight class="stringliteral">&quot;nc_outputSampleName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputSampleName.empty())<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputSampleName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;user.%nickname%.%in:name%&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_outDS&quot;</highlight><highlight class="normal">,<sp/>formatOutputName(meta,<sp/>outputSampleName));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_inDS&quot;</highlight><highlight class="normal">,<sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(</highlight><highlight class="stringliteral">&quot;nc_grid&quot;</highlight><highlight class="normal">,<sp/>(*s)-&gt;name()));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_writeInputToTxt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IN:input.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_match&quot;</highlight><highlight class="normal">,<sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref>(</highlight><highlight class="stringliteral">&quot;nc_grid_filter&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>execstr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;runjob.sh<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*s)-&gt;name();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_exec&quot;</highlight><highlight class="normal">,<sp/>execstr);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>mergestr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;elg_merge<sp/>jobdef.root<sp/>%OUT<sp/>%IN&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>meta.<ref refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" kindref="member" tooltip="set the meta-data string with the given name">setString</ref>(</highlight><highlight class="stringliteral">&quot;nc_mergeScript&quot;</highlight><highlight class="normal">,<sp/>mergestr);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>saveJobDef(jobDefFile,<sp/>job,<sp/>sh);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::Job::outputIter</ref><sp/>out<sp/>=<sp/>job.outputBegin();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>!=<sp/>job.outputEnd();<sp/>++out)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>shOut<sp/>=<sp/>outputSH(sh,<sp/>out-&gt;label());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>shOut.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>shHist<sp/>=<sp/>outputSH(sh,<sp/></highlight><highlight class="stringliteral">&quot;hist-output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>shHist.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>TmpCd<sp/>keepDir(jobELGDir);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::INIT,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>doRetrieve<sp/>is<sp/>called<sp/>immediately,<sp/>panda<sp/>client<sp/>will<sp/>print<sp/>ugly<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//as<sp/>task<sp/>info<sp/>is<sp/>not<sp/>yet<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>sleep(60);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d84/classEL_1_1PrunDriver_1ac5cb84f7e40a813f3412b95e7b6b9a71" kindref="member">EL::PrunDriver::doRetrieve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>RCU_READ_INVARIANT(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>location.empty());<sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>TmpCd<sp/>tmpDir(location);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>RCU_ASSERT(sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member" tooltip="the number of samples contained">size</ref>());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nRunThreads<sp/>=<sp/><ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>()-&gt;<ref refid="db/d3a/classSH_1_1MetaObject_1a8215d56cd61535948e0b280eeac0f575" kindref="member" tooltip="the meta-data double with the given name">castDouble</ref>(</highlight><highlight class="stringliteral">&quot;nc_run_threads&quot;</highlight><highlight class="normal">,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nDlThreads<sp/>=<sp/><ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>()-&gt;<ref refid="db/d3a/classSH_1_1MetaObject_1a8215d56cd61535948e0b280eeac0f575" kindref="member" tooltip="the meta-data double with the given name">castDouble</ref>(</highlight><highlight class="stringliteral">&quot;nc_download_threads&quot;</highlight><highlight class="normal">,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::INIT,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::RUN,<sp/>nRunThreads);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::DOWNLOAD,<sp/>nDlThreads);<sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::MERGE,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allDone<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>JobState::Enum<sp/>state<sp/>=<sp/>sampleState(*s);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>details<sp/>=<sp/>(*s)-&gt;getMetaString(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>details.empty())<sp/>{<sp/>details<sp/>=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>details<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*s)-&gt;name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::INIT:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::RUN:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::DOWNLOAD:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::MERGE:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>JobState::name[state]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::FINISHED:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[1;32m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>JobState::name[state]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JobState::FAILED:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[1;31m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>JobState::name[state]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>allDone<sp/>&amp;=<sp/>(state<sp/>==<sp/>JobState::FINISHED<sp/>||<sp/>state<sp/>==<sp/>JobState::FAILED);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(allDone);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EL::PrunDriver::status(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>location.empty());<sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>TmpCd<sp/>tmpDir(location);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>RCU_ASSERT(sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member" tooltip="the number of samples contained">size</ref>());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>processAllInState(sh,<sp/>JobState::RUN,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>s<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" kindref="member" tooltip="the begin iterator to use">begin</ref>();<sp/>s<sp/>!=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" kindref="member" tooltip="the end iterator to use">end</ref>();<sp/>++s)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>JobState::Enum<sp/>state<sp/>=<sp/>sampleState(*s);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>details<sp/>=<sp/>(*s)-&gt;getMetaString(</highlight><highlight class="stringliteral">&quot;nc_ELG_state_details&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>details.empty())<sp/>{<sp/>details<sp/>=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>details<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*s)-&gt;name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>JobState::name[state]<sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EL::PrunDriver::setState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>task,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>state)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>location.empty());<sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>task.empty());<sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>RCU_REQUIRE(not<sp/>state.empty());<sp/><sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>TmpCd<sp/>tmpDir(location);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>RCU_ASSERT(sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member" tooltip="the number of samples contained">size</ref>());</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref>(task))<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>task:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>task<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Choose<sp/>one<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a9d22938c1860048b92456abf84640bea" kindref="member" tooltip="print the debugging output to the screen">print</ref>();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>JobState::parse(state);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref>(task)-&gt;setMetaString(</highlight><highlight class="stringliteral">&quot;nc_ELG_state&quot;</highlight><highlight class="normal">,<sp/>state);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref>(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/Root/PrunDriver.cxx"/>
  </compounddef>
</doxygen>
