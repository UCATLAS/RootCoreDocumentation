<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d8e/EventData_8cxx" kind="file">
    <compoundname>EventData.cxx</compoundname>
    <includes refid="dd/df3/EventData_8h" local="no">QuickAna/EventData.h</includes>
    <includes refid="d2/d0a/ObjectTypeInfo_8h" local="no">QuickAna/ObjectTypeInfo.h</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <incdepgraph>
      <node id="245859">
        <label>functional</label>
      </node>
      <node id="245853">
        <label>QuickAna/Global.h</label>
        <link refid="d4/d7e/QuickAna_2QuickAna_2Global_8h_source"/>
      </node>
      <node id="245858">
        <label>string</label>
      </node>
      <node id="245852">
        <label>QuickAna/EventData.h</label>
        <link refid="dd/df3/EventData_8h_source"/>
        <childnode refid="245853" relation="include">
        </childnode>
        <childnode refid="245854" relation="include">
        </childnode>
        <childnode refid="245863" relation="include">
        </childnode>
      </node>
      <node id="245854">
        <label>PATInterfaces/SystematicSet.h</label>
        <link refid="d4/db8/SystematicSet_8h_source"/>
        <childnode refid="245855" relation="include">
        </childnode>
        <childnode refid="245856" relation="include">
        </childnode>
        <childnode refid="245857" relation="include">
        </childnode>
        <childnode refid="245858" relation="include">
        </childnode>
        <childnode refid="245859" relation="include">
        </childnode>
        <childnode refid="245860" relation="include">
        </childnode>
        <childnode refid="245861" relation="include">
        </childnode>
      </node>
      <node id="245861">
        <label>PATInterfaces/SystematicVariation.h</label>
        <link refid="d1/def/SystematicVariation_8h_source"/>
        <childnode refid="245855" relation="include">
        </childnode>
        <childnode refid="245862" relation="include">
        </childnode>
        <childnode refid="245856" relation="include">
        </childnode>
        <childnode refid="245858" relation="include">
        </childnode>
      </node>
      <node id="245855">
        <label>PATInterfaces/Global.h</label>
        <link refid="dd/d0c/PATInterfaces_2PATInterfaces_2Global_8h_source"/>
      </node>
      <node id="245857">
        <label>vector</label>
      </node>
      <node id="245866">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="245869">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="245866" relation="include">
        </childnode>
      </node>
      <node id="245851">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/QuickAna/Root/EventData.cxx</label>
        <link refid="EventData.cxx"/>
        <childnode refid="245852" relation="include">
        </childnode>
        <childnode refid="245864" relation="include">
        </childnode>
        <childnode refid="245865" relation="include">
        </childnode>
        <childnode refid="245867" relation="include">
        </childnode>
      </node>
      <node id="245864">
        <label>QuickAna/ObjectTypeInfo.h</label>
        <link refid="d2/d0a/ObjectTypeInfo_8h_source"/>
        <childnode refid="245853" relation="include">
        </childnode>
        <childnode refid="245858" relation="include">
        </childnode>
      </node>
      <node id="245862">
        <label>iosfwd</label>
      </node>
      <node id="245863">
        <label>unordered_map</label>
      </node>
      <node id="245868">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="245866" relation="include">
        </childnode>
        <childnode refid="245858" relation="include">
        </childnode>
        <childnode refid="245869" relation="include">
        </childnode>
      </node>
      <node id="245867">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="245866" relation="include">
        </childnode>
        <childnode refid="245868" relation="include">
        </childnode>
      </node>
      <node id="245856">
        <label>set</label>
      </node>
      <node id="245865">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="245866" relation="include">
        </childnode>
      </node>
      <node id="245860">
        <label>PATInterfaces/SystematicCode.h</label>
        <link refid="df/df5/SystematicCode_8h_source"/>
      </node>
    </incdepgraph>
    <innernamespace refid="d7/d63/namespaceana">ana</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Iowa<sp/>State<sp/>University<sp/>2015.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Nils<sp/>Krumnack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(nils.erik.krumnack@cern.ch)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QuickAna/EventData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QuickAna/ObjectTypeInfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ana</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d7c/classana_1_1EventData_1a885b259b00a591a3378fda858d3090f6" kindref="member" tooltip="test the invariant of this object">EventData ::</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1a885b259b00a591a3378fda858d3090f6" kindref="member" tooltip="test the invariant of this object">  testInvariant</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="29"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="df/d7c/classana_1_1EventData_1a48b4b63776193608c5e42e6b65c42e19" kindref="member" tooltip="standard constructor">EventData ::</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1a48b4b63776193608c5e42e6b65c42e19" kindref="member" tooltip="standard constructor">  EventData</ref><sp/>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;ObjectType&gt;&amp;<sp/><ref refid="df/d7c/classana_1_1EventData_1aa8bfae79693050ab1e292c868870d066" kindref="member" tooltip="get the list of object types available">EventData ::</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1aa8bfae79693050ab1e292c868870d066" kindref="member" tooltip="get the list of object types available">  getObjectTypes</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="45"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_objectTypes;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;CP::SystematicSet&gt;&amp;<sp/><ref refid="df/d7c/classana_1_1EventData_1aba579aaea01593c08ba82abd03c11a93" kindref="member" tooltip="get the list of systematics configured">EventData ::</ref></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1aba579aaea01593c08ba82abd03c11a93" kindref="member" tooltip="get the list of systematics configured">  getSystematics</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="54"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_systematics;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="df/d7c/classana_1_1EventData_1af47fb80e8a6fc403ea6ed246a0026c0a" kindref="member" tooltip="get the name of the given collection for the given systematic, or the empty string...">EventData ::</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1af47fb80e8a6fc403ea6ed246a0026c0a" kindref="member" tooltip="get the name of the given collection for the given systematic, or the empty string...">  getName</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">CP::SystematicSet</ref>&amp;<sp/>sys)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="63"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>m_names[type].find<sp/>(sys);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>m_names[type].end())</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_names[type].empty())</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>empty;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>systematic<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sys.<ref refid="d4/d52/classCP_1_1SystematicSet_1af01661875334428bad90eb29174a5ae8" kindref="member">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>for<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="dc/d2d/structana_1_1ObjectTypeInfo_1ae2cd3c7dcb3cacb61317564876f0a3c0" kindref="member" tooltip="the string name of the type">ObjectTypeInfo::name</ref>[type]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d7c/classana_1_1EventData_1ac99dd2a523f9c755fc4521eec7b7a9db" kindref="member" tooltip="set the name returned by getName">EventData ::</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1ac99dd2a523f9c755fc4521eec7b7a9db" kindref="member" tooltip="set the name returned by getName">  setName</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">CP::SystematicSet</ref>&amp;<sp/>sys,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>val_name)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(!val_name.empty());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objectTypes.insert<sp/>(type);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m_systematics.insert<sp/>(sys);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>m_names[type][sys]<sp/>=<sp/>val_name;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="df/d7c/classana_1_1EventData_1a2e3bfd8aee1859256ab979c928953887" kindref="member" tooltip="get the list of all unique names for one object type">EventData ::</ref></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1a2e3bfd8aee1859256ab979c928953887" kindref="member" tooltip="get the list of all unique names for one object type">  getNames</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>a<sp/>set<sp/>first<sp/>to<sp/>identify<sp/>the<sp/>unique<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>uniqueNames;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sys<sp/>:<sp/>m_systematics)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uniqueNames.insert(<sp/><ref refid="df/d7c/classana_1_1EventData_1af47fb80e8a6fc403ea6ed246a0026c0a" kindref="member" tooltip="get the name of the given collection for the given systematic, or the empty string...">getName</ref>(type,<sp/>sys)<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>convert<sp/>to<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;(<sp/>uniqueNames.begin(),<sp/>uniqueNames.end()<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="df/d7c/classana_1_1EventData_1ad90db5c4f58a37ffeb7ff7b03f76a36c" kindref="member" tooltip="get the name of the original collection from which the collection returned by getName...">EventData ::</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1ad90db5c4f58a37ffeb7ff7b03f76a36c" kindref="member" tooltip="get the name of the original collection from which the collection returned by getName...">  getSourceName</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">CP::SystematicSet</ref>&amp;<sp/>sys)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="113"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>m_sourceNames[type].find<sp/>(sys);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>m_sourceNames[type].end())</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_sourceNames[type].empty())</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>empty;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>systematic<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sys.<ref refid="d4/d52/classCP_1_1SystematicSet_1af01661875334428bad90eb29174a5ae8" kindref="member">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>for<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="dc/d2d/structana_1_1ObjectTypeInfo_1ae2cd3c7dcb3cacb61317564876f0a3c0" kindref="member" tooltip="the string name of the type">ObjectTypeInfo::name</ref>[type]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d7c/classana_1_1EventData_1a14af6fecc21f585468521698cf985367" kindref="member" tooltip="set the name returned by getName">EventData ::</ref></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1a14af6fecc21f585468521698cf985367" kindref="member" tooltip="set the name returned by getName">  setSourceName</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">CP::SystematicSet</ref>&amp;<sp/>sys,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>val_sourceName)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(!val_sourceName.empty());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objectTypes.insert<sp/>(type);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m_systematics.insert<sp/>(sys);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sourceNames[type][sys]<sp/>=<sp/>val_sourceName;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="df/d7c/classana_1_1EventData_1a392c2fe1a10845d995c478521a129313" kindref="member" tooltip="get the list of all unique source names for one object type">EventData ::</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="df/d7c/classana_1_1EventData_1a392c2fe1a10845d995c478521a129313" kindref="member" tooltip="get the list of all unique source names for one object type">  getSourceNames</ref><sp/>(<ref refid="d7/d63/namespaceana_1ae3f743901acd68af2cd8583a1f982eee" kindref="member" tooltip="the various object types we have to deal with">ObjectType</ref><sp/>type)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="148"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(type)<sp/>&lt;<sp/><ref refid="de/d8b/structana_1_1EnumSize_3_01ObjectType_01_4_1a0bfea7b53c1dc68d7658c668562f0460" kindref="member" tooltip="the number of object types that have actual objects associated">EnumSize&lt;ObjectType&gt;::dataSize</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>a<sp/>set<sp/>first<sp/>to<sp/>identify<sp/>the<sp/>unique<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>uniqueNames;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sys<sp/>:<sp/>m_systematics)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>may<sp/>not<sp/>be<sp/>a<sp/>source<sp/>container,<sp/>so<sp/>we<sp/>skip<sp/>if<sp/>the<sp/>name<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceName<sp/>=<sp/><ref refid="df/d7c/classana_1_1EventData_1ad90db5c4f58a37ffeb7ff7b03f76a36c" kindref="member" tooltip="get the name of the original collection from which the collection returned by getName...">getSourceName</ref>(type,<sp/>sys);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!sourceName.empty())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniqueNames.insert(<sp/><ref refid="df/d7c/classana_1_1EventData_1ad90db5c4f58a37ffeb7ff7b03f76a36c" kindref="member" tooltip="get the name of the original collection from which the collection returned by getName...">getSourceName</ref>(type,<sp/>sys)<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>convert<sp/>to<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;(<sp/>uniqueNames.begin(),<sp/>uniqueNames.end()<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/QuickAna/Root/EventData.cxx"/>
  </compounddef>
</doxygen>
