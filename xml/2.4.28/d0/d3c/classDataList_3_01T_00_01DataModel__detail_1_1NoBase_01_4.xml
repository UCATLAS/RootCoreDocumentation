<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4" kind="class" prot="public">
    <compoundname>DataList&lt; T, DataModel_detail::NoBase &gt;</compoundname>
    <includes refid="d1/d43/DataList_8h" local="no">DataList.h</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Internal operations.</header>
      <description><para><anchor id="_1amgrp18fcc315290ab5188be82cc8bf66dc29"/> </para></description>
      <memberdef kind="friend" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aa387b75132216aab1ab41e3ae44cc56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DataModel_detail::ElementProxy&lt; DataList &gt;</definition>
        <argsstring></argsstring>
        <name>DataModel_detail::ElementProxy&lt; DataList &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2004" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a803b456eae8c94a9cc000542421595b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ConstDataList&lt; DataList &gt;</definition>
        <argsstring></argsstring>
        <name>ConstDataList&lt; DataList &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2005" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1119a539ef95e66a83ed73e65ce4acb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void test2_assignelement1</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2006" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3170" bodyend="3181"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a58d4eab21e401f540614780a4bbe5c4f" prot="protected" static="no" mutable="no">
        <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
        <definition>SG::OwnershipPolicy DataList&lt; T, DataModel_detail::NoBase &gt;::m_ownPolicy</definition>
        <argsstring></argsstring>
        <name>m_ownPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ownership policy of this container --- either SG::OWNS_ELEMENTS or <ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2064" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adccdf67214a3ae7e0bf5c627f7773fb1" prot="protected" static="no" mutable="no">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abd17c4641bc563342e90f0cacb64af97" kindref="member">PtrList</ref></type>
        <definition>PtrList DataList&lt; T, DataModel_detail::NoBase &gt;::m_pCont</definition>
        <argsstring></argsstring>
        <name>m_pCont</name>
        <briefdescription>
<para>This actually holds the elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2067" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac9244ff2441f80e03469a43b412d9a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::resortAux</definition>
        <argsstring>(iterator beg, iterator end)</argsstring>
        <name>resortAux</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Reset indices / reorder aux data after elements have been permuted. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the range of elements to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the range of elements to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a no-op for <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1974"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abc13d32a48d8e181d1c4f444f9b63952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::testInsert</definition>
        <argsstring>(const char *op)</argsstring>
        <name>testInsert</name>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Test if we can insert; raise an exception if not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of the attempted operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
In order to maintain type-safety, we can only allow insertions using the most-derived instance of <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. This checks this by testing the <computeroutput>m_isMostDerived</computeroutput>, which is set by the constructors to true only for the most-derived instance. If the test fails, we call to potentially out-of-line code to continue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1987"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9e0b9dc2ba00a550bb6d228a454e4567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::testInsertOol</definition>
        <argsstring>(const char *op)</argsstring>
        <name>testInsertOol</name>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Test if we can insert; raise an exception if not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of the attempted operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
This continues the test of <computeroutput>testInsert</computeroutput>. There is one case where <computeroutput>m_isMostDerived</computeroutput> may not be set correctly. If this container was made via copy construction, then all the <computeroutput>m_isMostDerived</computeroutput> flags will be false. So we call <computeroutput>setMostDerived</computeroutput> to set the flags correctly and test again. If the test fails again, then we raise an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2000"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a56318b0504881e271a337d6ea83499cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::assignElement</definition>
        <argsstring>(typename BaseContainer::iterator pos, value_type newElem)</argsstring>
        <name>assignElement</name>
        <param>
          <type>typename BaseContainer::iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">value_type</ref></type>
          <declname>newElem</declname>
        </param>
        <briefdescription>
<para>Handle element assignment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in the container to assign. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to assign.</para></parameterdescription>
</parameteritem>
</parameterlist>
The old element is freed if this container owns elements. Auxiliary data are copied if appropriate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2017"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab4db3d17a1bff855a1832f80f8109ddb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::assignBaseElement</definition>
        <argsstring>(typename BaseContainer::iterator pos, typename BaseContainer::value_type newElem)</argsstring>
        <name>assignBaseElement</name>
        <param>
          <type>typename BaseContainer::iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>typename BaseContainer::value_type</type>
          <declname>newElem</declname>
        </param>
        <briefdescription>
<para>Handle element assignment from a base pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in the container to assign. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to assign.</para></parameterdescription>
</parameteritem>
</parameterlist>
The old element is freed if this container owns elements. Auxiliary data are copied if appropriate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2029"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a5473acf8eb1ea055c4ad2ed7cc19d89f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::type_info &amp;</type>
        <definition>virtual const std::type_info&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::dl_typeid</definition>
        <argsstring>() const </argsstring>
        <name>dl_typeid</name>
        <briefdescription>
<para>Find the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class in the hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <computeroutput>type_info</computeroutput> for the class for which this method gets run.</para></simplesect>
In order to properly type-check insertions, we need to be able to find the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class in the inheritance hierarchy. That&apos;s the purpose of this function. Every <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> defines this virtual method, so when it&apos;s called, the one corresponding to the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> gets run. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2100"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a323a52a2cf1cf5531f1db34a01cea959" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PtrList::iterator</type>
        <definition>PtrList::iterator DataList&lt; T, DataModel_detail::NoBase &gt;::erase_base</definition>
        <argsstring>(typename PtrList::iterator position)</argsstring>
        <name>erase_base</name>
        <param>
          <type>typename PtrList::iterator</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Helper for <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" kindref="member">erase()</ref></computeroutput>. Remove element at a given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the next element (or <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" kindref="member">end()</ref></computeroutput>).</para></simplesect>
This function factors out common code between <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" kindref="member">erase()</ref></computeroutput> in the base and derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> classes. It deals with the <computeroutput>std::list</computeroutput> iterators directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2042"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af6d3b26b1bfe8cd7fd5fbb6e539ca21d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PtrList::iterator</type>
        <definition>PtrList::iterator DataList&lt; T, DataModel_detail::NoBase &gt;::erase_base</definition>
        <argsstring>(typename PtrList::iterator first, typename PtrList::iterator last)</argsstring>
        <name>erase_base</name>
        <param>
          <type>typename PtrList::iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>typename PtrList::iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Helper for <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" kindref="member">erase()</ref></computeroutput>. Remove a range of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first element to be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing one past the last element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the element pointed to by <emphasis>last</emphasis> prior to erasing (or <computeroutput> <ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" kindref="member">end()</ref></computeroutput>).</para></simplesect>
This function factors out common code between <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" kindref="member">erase()</ref></computeroutput> in the base and derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> classes. It deals with the <computeroutput>std::list</computeroutput> iterators directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2058"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0868554e751e7a0601c5c66e40b2ed85" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::clearMostDerived</definition>
        <argsstring>()</argsstring>
        <name>clearMostDerived</name>
        <briefdescription>
<para>Clear <computeroutput>m_isMostDerived</computeroutput> for this instance and for all bases. </para>        </briefdescription>
        <detaileddescription>
<para>Called from the constructor after setting <computeroutput>m_isMostDerived</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2075"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2abecca05cb11a4ddcc2bb2e1c5179ae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void DataList&lt; T, DataModel_detail::NoBase &gt;::setMostDerived</definition>
        <argsstring>()</argsstring>
        <name>setMostDerived</name>
        <briefdescription>
<para>Set <computeroutput>m_isMostDerived</computeroutput> for this instance and clear it for all bases. </para>        </briefdescription>
        <detaileddescription>
<para>Called from <computeroutput>testInsert</computeroutput> if the test fails. The flag may not have been set if this container was made via copy construction, so set it appropriately now so we can test again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2085"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors, destructors, assignment.</header>
      <description><para><anchor id="_1amgrpb39bb9cb1bc18cddc74e7f363d4e2167"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a27604fb39d04f165c5ca6fdeae58b15f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataList&lt; T, DataModel_detail::NoBase &gt;::DataList</definition>
        <argsstring>(SG::OwnershipPolicy ownPolicy=SG::OWN_ELEMENTS)</argsstring>
        <name>DataList</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::OWN_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements. To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1329"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a28dd8a67308d8cf2257eade0d1111e3b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataList&lt; T, DataModel_detail::NoBase &gt;::DataList</definition>
        <argsstring>(size_type n, SG::OwnershipPolicy ownPolicy=SG::OWN_ELEMENTS)</argsstring>
        <name>DataList</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::OWN_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Sized constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that unlike the standard list constructor, you can&apos;t specify an initial value here. The container will be initialized with 0&apos;s.</para><para>By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements. To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1344"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af0a897b471d93ba7a5d3863f028e65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataList&lt; T, DataModel_detail::NoBase &gt;::DataList</definition>
        <argsstring>(const DataList &amp;rhs)</argsstring>
        <name>DataList</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to copy.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a `shallow&apos; copy; the new container will not own its elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1353"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abbcdb62b70628a64709319acd5ab6050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>DataList&lt; T, DataModel_detail::NoBase &gt;::DataList</definition>
        <argsstring>(InputIterator first, InputIterator last, SG::OwnershipPolicy ownPolicy=SG::VIEW_ELEMENTS)</argsstring>
        <name>DataList</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::VIEW_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Constructor from iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the new container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the new container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements (and take ownership of the pointers passed to this constructor). To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1368"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a098ae1daf011dd3037d2ac50bc618bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
        <definition>DataList&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::operator=</definition>
        <argsstring>(const DataList &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> from which to assign. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This object.</para></simplesect>
This is a `shallow&apos; copy; after the completion of this, the <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will not own its elements. Any elements it owned prior to this call will be released.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1383"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aaad2b0dda0339ace2a5f380b7a2ed929" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::assign</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>assign</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Assign from iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Any existing owned elements will be released. The <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>&apos;s ownership policy determines whether it will take ownership of the new elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1396"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9188108e3569f3e14b57134bdc011fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual DataList&lt; T, DataModel_detail::NoBase &gt;::~DataList</definition>
        <argsstring>()</argsstring>
        <name>~DataList</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>If this container owns its elements, the contained elements will be deleted as well. Before doing this, the destructor will scan for duplicate pointers (takes <formula id="0">$ n\log n $</formula> time); duplicates are only destroyed once. Duplicates should, however, be considered an error; don&apos;t rely on this behavior. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1408"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Size and capacity.</header>
      <description><para><anchor id="_1amgrp91690d5f8f79d42f64e62a4bfc370024"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a47eeeef94c243655cfa6995ad8f17d46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type DataList&lt; T, DataModel_detail::NoBase &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1420"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad7536225c8c9321ac4eec89bba451eef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type DataList&lt; T, DataModel_detail::NoBase &gt;::max_size</definition>
        <argsstring>() const </argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a47eeeef94c243655cfa6995ad8f17d46" kindref="member">size()</ref></computeroutput> of the largest possible collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1426"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab49fdbcd60375b226b8272dca4d2fa43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::resize</definition>
        <argsstring>(size_type sz)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Resizes the collection to the specified number of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the collection.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that this function differs from the standard in that it does not allow specifying the value of any inserted elements. They will always be 0.</para><para>If the container is shrunk, elements will be deleted as with <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" kindref="member">erase()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1439"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0db251354aa82da30e173170c4c9336d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DataList&lt; T, DataModel_detail::NoBase &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the collection is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1445"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Element access.</header>
      <description><para><anchor id="_1amgrp03f08060dbcda9a05f3dd6a98ff9f981"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a47921f2fe9b99ea2768c8353323dcb64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>const T* DataList&lt; T, DataModel_detail::NoBase &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
<para>Access the first element in the collection as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1461"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a78fcb74e8810ee041560deb0fd0e5085" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>const T* DataList&lt; T, DataModel_detail::NoBase &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
<para>Access the last element in the collection as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1471"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a3933eb9f817615c290c4613218c776b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">ElementProxy</ref></type>
        <definition>ElementProxy DataList&lt; T, DataModel_detail::NoBase &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>Access the first element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the first element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a proxy object rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1482"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac37d4ef9d3e17f774b15d65c80ef3956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">ElementProxy</ref></type>
        <definition>ElementProxy DataList&lt; T, DataModel_detail::NoBase &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Access the last element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the last element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a proxy object rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1493"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterator creation.</header>
      <description><para><anchor id="_1amgrp04fea93d7622927e954392dcd5690674"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a96cd0a1a4dfe935e939afc8a62394fe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return a <computeroutput>const_iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>const_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1510"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a07ff31864f8bdda74e30255c6e578548" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Return a <computeroutput>const_iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>const_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1521"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1f600a76301a2d3d14e482b9e2776cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator DataList&lt; T, DataModel_detail::NoBase &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return an <computeroutput>iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1533"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator DataList&lt; T, DataModel_detail::NoBase &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return an <computeroutput>iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1545"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af00a3dad08bbd578054b202f4458a4c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835adbeac6f6308e227b0ebbb601d40e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::rbegin</definition>
        <argsstring>() const </argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a <computeroutput>const_reverse_iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>const_reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1556"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae2912a56c75a78e3daba92d308c2bd09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835adbeac6f6308e227b0ebbb601d40e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::rend</definition>
        <argsstring>() const </argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a <computeroutput>const_reverse_iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>const_reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a <computeroutput>const</computeroutput> <computeroutput>T*</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1567"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a61dc30fc5a281edc891fc5646e8b39bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1add2a33702a069332966fb7369c33da52" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a <computeroutput>reverse_iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1579"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a91706520fb2c75102299affef231541d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1add2a33702a069332966fb7369c33da52" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a <computeroutput>reverse_iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1591"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion operations.</header>
      <description><para><anchor id="_1amgrpc4ff45e64b9f41cc82677be76808116c"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab09c229bdb18bf7c2e5385685ce15471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::push_front</definition>
        <argsstring>(value_type pElem)</argsstring>
        <name>push_front</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add an element at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1609"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aeda608ccc6fac0ae29461df6cbf714a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::push_back</definition>
        <argsstring>(value_type pElem)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add an element to the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1622"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a02227e05459f68f7ae0ec287b7817729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator DataList&lt; T, DataModel_detail::NoBase &gt;::insert</definition>
        <argsstring>(iterator position, value_type pElem)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add a new element to the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator before which the element will be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator that points to the inserted data.</para></simplesect>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1637"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2a34d2cfcdb42eefc16b22427ad44b31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::insert</definition>
        <argsstring>(iterator position, InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Add a group of new elements to the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator before which the element will be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1653"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Erasure operations.</header>
      <description><para><anchor id="_1amgrp5dd35913d37b538bffc58eac1d7946e3"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator DataList&lt; T, DataModel_detail::NoBase &gt;::erase</definition>
        <argsstring>(iterator position)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Remove element at a given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the next element (or <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" kindref="member">end()</ref></computeroutput>).</para></simplesect>
If the container owns its elements, then the pointed-to element will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1670"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a210ba843db90aea8fd000b7fd0137d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator DataList&lt; T, DataModel_detail::NoBase &gt;::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Remove a range of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first element to be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing one past the last element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the element pointed to by <emphasis>last</emphasis> prior to erasing (or <computeroutput><ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" kindref="member">end()</ref></computeroutput>).</para></simplesect>
If the container owns its elements, then the removed elements will be deleted. Any duplicates will be removed in this process, but don&apos;t rely on this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1684"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a63a46869c71bdec71e0294a6f72d8735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::pop_front</definition>
        <argsstring>()</argsstring>
        <name>pop_front</name>
        <briefdescription>
<para>Remove the first element from the collection. </para>        </briefdescription>
        <detaileddescription>
<para>If the container owns its elements, then the removed element will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1693"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aa83393a907c793c2aa838fb6fa12aef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Remove the last element from the collection. </para>        </briefdescription>
        <detaileddescription>
<para>If the container owns its elements, then the removed element will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1702"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a651b5eb77fe0071bbe708dc18971c009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erase all the elements in the collection. </para>        </briefdescription>
        <detaileddescription>
<para>If the container owns its elements, then the removed elements will be deleted. Any duplicates will be removed in this process, but don&apos;t rely on this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1712"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Swap and sort.</header>
      <description><para><anchor id="_1amgrp48740572230bf871bbbe3f4450b8e26c"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a280aba4dcb670ce252bafb3b4902fba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::swap</definition>
        <argsstring>(DataList &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap this collection with another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection with which to swap.</para></parameterdescription>
</parameteritem>
</parameterlist>
Ownership is swapped along with the collection content.</para><para>Note: this method may only be called using the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. The <emphasis>rhs</emphasis> must also be referenced using the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1731"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad707975872cf9e85f633a9829c916d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::sort</definition>
        <argsstring>()</argsstring>
        <name>sort</name>
        <briefdescription>
<para>Sort the container. </para>        </briefdescription>
        <detaileddescription>
<para>This just sorts by pointer value, so it&apos;s probably not very useful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1747"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae388d1a40d05d53610c74d3443537feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class COMPARE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::sort</definition>
        <argsstring>(COMPARE comp)</argsstring>
        <name>sort</name>
        <param>
          <type>COMPARE</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Sort the container with a user-specified comparison operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Functional to compare two values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1756"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad11d3b6dbf3f2dc4dddaa972377607ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DataList&lt; T, DataModel_detail::NoBase &gt;::iter_swap</definition>
        <argsstring>(iterator a, iterator b)</argsstring>
        <name>iter_swap</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Swap the referents of two <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first iterator for the swap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second iterator for the swap/ </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1739"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>List operations.</header>
      <description><para><anchor id="_1amgrp543a41302df2bfd847db57ca041c7b35"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a633c3ce289cbaf70eafcea4db83fcae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::splice</definition>
        <argsstring>(iterator position, DataList &amp;l)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Insert contents of another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list.</para></parameterdescription>
</parameteritem>
</parameterlist>
The elements of <emphasis>l</emphasis> are inserted in constant time in front of the element referenced by <emphasis>position</emphasis>. <emphasis>l</emphasis> becomes an empty list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1774"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b434dbf244d93b44b46f6ff94a6d2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::splice</definition>
        <argsstring>(iterator position, DataList &amp;l, iterator i)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Insert element from another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to move.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes the element in list <emphasis>l</emphasis> referenced by <emphasis>i</emphasis> and inserts it into the current list before <emphasis>position</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1785"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abc339e17c39eb53440f0e8022b011db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::splice</definition>
        <argsstring>(iterator position, DataList &amp;l, iterator first, iterator last)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Insert range from another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the start of range in <emphasis>l</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the end of range in <emphasis>l</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes elements in the range [<emphasis>first</emphasis>, <emphasis>last</emphasis> ) and inserts them before <emphasis>position</emphasis> in constant time.</para><para>Undefined if <emphasis>position</emphasis> is in [<emphasis>first</emphasis>, <emphasis>last</emphasis> ). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1802"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adb755c1c808b9195aea714580a047f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::remove</definition>
        <argsstring>(const value_type &amp;value)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">value_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Remove all elements equal to value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes every element in the list equal to <emphasis>value</emphasis>. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1816"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae9208e95075295b87459e9d408fea622" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PREDICATE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::remove_if</definition>
        <argsstring>(PREDICATE p)</argsstring>
        <name>remove_if</name>
        <param>
          <type>PREDICATE</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Remove all elements satisfying a predicate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Unary predicate function or object.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes every element in the list for which the predicate returns true. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1831"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae940d6e63477383a918c1eaf834eb488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::unique</definition>
        <argsstring>()</argsstring>
        <name>unique</name>
        <briefdescription>
<para>Remove consecutive duplicate elements. </para>        </briefdescription>
        <detaileddescription>
<para>For each consecutive set of elements with the same value, remove all but the first one. Remaining elements stay in list order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1840"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aee4f88433d0e02f0818bf3692c49e14f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BinaryPredicate</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::unique</definition>
        <argsstring>(BinaryPredicate pred)</argsstring>
        <name>unique</name>
        <param>
          <type>BinaryPredicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>Remove consecutive elements satisfying a predicate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary predicate function or object.</para></parameterdescription>
</parameteritem>
</parameterlist>
For each consecutive set of elements [first,last) that satisfy predicate(first,i) where i is an iterator in [first,last), remove all but the first one. Remaining elements stay in list order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1852"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a381210b588a66c2161bef370b3106dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::merge</definition>
        <argsstring>(DataList &amp;l)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Merge sorted lists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Sorted list to merge.</para></parameterdescription>
</parameteritem>
</parameterlist>
Assumes that both <emphasis>l</emphasis> and this list are sorted according to <ref refid="d1/d43/DataList_8h_1a331f1405e2b4323d37655e725a8f5b63" kindref="member">operator&lt;()</ref>. Merges elements of <emphasis>l</emphasis> into this list in sorted order, leaving <emphasis>l</emphasis> empty when complete. Elements in this list precede elements in <emphasis>l</emphasis> that are equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1863"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac889908ffffa15fd4a8d99903b8241b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename COMPARE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::merge</definition>
        <argsstring>(DataList &amp;l, COMPARE predicate)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>COMPARE</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Merge sorted lists according to comparison function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Sorted list to merge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function defining a sort order (which must be strictly weak ordering).</para></parameterdescription>
</parameteritem>
</parameterlist>
Assumes that both <emphasis>l</emphasis> and this <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> are sorted according to COMPARE predicate. Merges elements of <emphasis>l</emphasis> into this list in sorted order, leaving <emphasis>l</emphasis> empty when complete. Elements in this list precede elements in <emphasis>x</emphasis> that are equivalent according to StrictWeakOrdering(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1878"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1a95df551a45b969628ca7cda2eda6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::reverse</definition>
        <argsstring>()</argsstring>
        <name>reverse</name>
        <briefdescription>
<para>Reverse the elements in list. </para>        </briefdescription>
        <detaileddescription>
<para>Reverse the order of elements in the list in linear time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1885"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non-standard operations.</header>
      <description><para><anchor id="_1amgrp67b3645f65a6afd377578740fa3b4ed2"/> </para></description>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab7c31e2e55534c5724b20598db2324b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::swapElement</definition>
        <argsstring>(iterator pos, value_type newElem, reference oldElem)</argsstring>
        <name>swapElement</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">value_type</ref></type>
          <declname>newElem</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">reference</ref></type>
          <declname>oldElem</declname>
        </param>
        <briefdescription>
<para>Swap one element out of the container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The element in the container to swap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>New element to put in the container. May be 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldElem</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to receive the element removed from the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Reference <emphasis>oldElem</emphasis> is initialized with element <emphasis>pos</emphasis> of the collection (no bounds checking). Then element <emphasis>index</emphasis> is set to <computeroutput>newElem</computeroutput>. If the collection owns its elements, then it will take ownership of <emphasis>newElem</emphasis> and release (without deleting) the element returned through <emphasis>oldElem</emphasis>.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1913"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a637d00a090bf2fb52876227982ed2c3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abd17c4641bc563342e90f0cacb64af97" kindref="member">PtrList</ref> &amp;</type>
        <definition>const PtrList&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::stdcont</definition>
        <argsstring>() const </argsstring>
        <name>stdcont</name>
        <briefdescription>
<para>Return the underlying <computeroutput>std::list</computeroutput> of the container. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the <computeroutput>std::list</computeroutput> actually holding the collection.</para></simplesect>
Note that <computeroutput><ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member">DataList&lt;T&gt;::stdcont</ref></computeroutput> does not necessarily return a <computeroutput>std::list&lt;T*&gt;</computeroutput> if <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> inheritance is being used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1923"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835da5f372ef8a7d7054e8bea85c91b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
        <definition>SG::OwnershipPolicy DataList&lt; T, DataModel_detail::NoBase &gt;::ownPolicy</definition>
        <argsstring>() const </argsstring>
        <name>ownPolicy</name>
        <briefdescription>
<para>Return the ownership policy setting for this container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1929"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afc7f61743b492152b434836640190583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataList&lt; T, DataModel_detail::NoBase &gt;::clear</definition>
        <argsstring>(SG::OwnershipPolicy ownPolicy)</argsstring>
        <name>clear</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
        </param>
        <briefdescription>
<para>Erase all the elements in the collection, and reset the ownership mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The new ownership policy of the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the container owns its elements, then the removed elements will be deleted. Any duplicates will be removed in this process, but don&apos;t rely on this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1941"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a48e52dc31b3138ab558203889325917c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref> &amp;</type>
        <definition>virtual const DataModel_detail::DVLInfoBase&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::dvlinfo_v</definition>
        <argsstring>() const </argsstring>
        <name>dvlinfo_v</name>
        <briefdescription>
<para>Return the DV/DL info struct for this class. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used to make sure that it&apos;s instantiated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1957"/>
      </memberdef>
      <memberdef kind="function" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac854ab0e32699c904b79153ac25b3efa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref> &amp;</type>
        <definition>static const DataModel_detail::DVLInfoBase&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::dvlinfo</definition>
        <argsstring>()</argsstring>
        <name>dvlinfo</name>
        <briefdescription>
<para>Return the DV/DL info struct for this class. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used to make sure that it&apos;s instantiated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1949"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a4fb145fade4da0f72c0c518b4bb2b66f" prot="public" static="no">
        <type><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound">DataModel_detail::NoBase</ref></type>
        <definition>typedef DataModel_detail::NoBase DataList&lt; T, DataModel_detail::NoBase &gt;::DataList_BASE</definition>
        <argsstring></argsstring>
        <name>DataList_BASE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1258" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9da50ef8a9f78390888589f37b8baf83" prot="public" static="no">
        <type><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound">DataModel_detail::NoBase</ref></type>
        <definition>typedef DataModel_detail::NoBase DataList&lt; T, DataModel_detail::NoBase &gt;::DVL_BASE</definition>
        <argsstring></argsstring>
        <name>DVL_BASE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1259" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac4f7baf956209ef4cfcff4a68887a392" prot="public" static="no">
        <type>boost::true_type</type>
        <definition>typedef boost::true_type DataList&lt; T, DataModel_detail::NoBase &gt;::isSequence</definition>
        <argsstring></argsstring>
        <name>isSequence</name>
        <briefdescription>
<para>Mark as a sequence, for <ref refid="da/da2/classDataLink" kindref="compound">DataLink</ref> / <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1262" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abd17c4641bc563342e90f0cacb64af97" prot="public" static="no">
        <type>std::list&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> * &gt;</type>
        <definition>typedef std::list&lt;T*&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::PtrList</definition>
        <argsstring></argsstring>
        <name>PtrList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the type of the underlying <computeroutput>std::list</computeroutput> (what <computeroutput>stdcont</computeroutput> returns). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1266" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a5e706f302d8a41bce617916b547ea097" prot="public" static="no">
        <type>std::list&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> * &gt;</type>
        <definition>typedef std::list&lt;T*&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::BaseContainer</definition>
        <argsstring></argsstring>
        <name>BaseContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1267" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a35cedee549ab02f8d911d53f558cefc7" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
        <definition>typedef T*&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1276" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac8fc5266f26e44d17d817367fa2ef29e" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *const &amp;</type>
        <definition>typedef T* const&amp; DataList&lt; T, DataModel_detail::NoBase &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af5512d5dc3a73c22ec3beb3e35a0da4f" prot="public" static="no">
        <type>PtrList::size_type</type>
        <definition>typedef PtrList::size_type DataList&lt; T, DataModel_detail::NoBase &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1278" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a305f3ded130e83133289deea8c5cf144" prot="public" static="no">
        <type>PtrList::difference_type</type>
        <definition>typedef PtrList::difference_type DataList&lt; T, DataModel_detail::NoBase &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1279" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afd5944bbd9a25246126c4de4f2e22ac2" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>typedef T* DataList&lt; T, DataModel_detail::NoBase &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1280" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afc453046748092e6fc4916a502294c17" prot="public" static="no">
        <type>PtrList::allocator_type</type>
        <definition>typedef PtrList::allocator_type DataList&lt; T, DataModel_detail::NoBase &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1281" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adcbacb6f844432bd4a56d2a0b368f18b" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> **</type>
        <definition>typedef T** DataList&lt; T, DataModel_detail::NoBase &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1282" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a8869b07738694f2afeffdfa6051efc65" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *const *</type>
        <definition>typedef T* const* DataList&lt; T, DataModel_detail::NoBase &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1283" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a4c7795fd259107d07d7efe6d53a038d3" prot="public" static="no">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>typedef const T* DataList&lt; T, DataModel_detail::NoBase &gt;::const_value_type</definition>
        <argsstring></argsstring>
        <name>const_value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1285" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2b4d44e14e15d8c836d3af43e45cae85" prot="public" static="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
        <definition>typedef T DataList&lt; T, DataModel_detail::NoBase &gt;::base_value_type</definition>
        <argsstring></argsstring>
        <name>base_value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="d1/def/classT" kindref="compound">T</ref></computeroutput> value used as the template parameter. Note that this is different from <computeroutput>value_type</computeroutput> (that&apos;s <computeroutput>T*</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1289" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a7a43f3105d5ac0011046690b54cbefdf" prot="public" static="no">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">DataModel_detail::ElementProxy</ref>&lt; <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &gt;</type>
        <definition>typedef DataModel_detail::ElementProxy&lt;DataList&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::ElementProxy</definition>
        <argsstring></argsstring>
        <name>ElementProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This type is used to proxy lvalue accesses to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> elements, in order to handle ownership. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" prot="public" static="no">
        <type>PtrList::const_iterator</type>
        <definition>typedef PtrList::const_iterator DataList&lt; T, DataModel_detail::NoBase &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <computeroutput>const_iterator</computeroutput>. Here, we can just use the <computeroutput>std::list</computeroutput> iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1298" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2005081b262f1e63a17d7ccc0615249d" prot="public" static="no">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">DataModel_detail::iterator</ref>&lt; <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> &gt;</type>
        <definition>typedef DataModel_detail::iterator&lt;DataList&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <computeroutput>iterator</computeroutput>. Note that lvalue references here will yield an <computeroutput>ElementProxy</computeroutput>, not a <computeroutput>reference</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1302" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835adbeac6f6308e227b0ebbb601d40e" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <computeroutput>const_reverse_iterator</computeroutput>. Note: we can&apos;t just use the underlying PtrList::const_reverse_iterator here; otherwise, const_reverse_iterator won&apos;t be convertable to reverse_iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1309" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1add2a33702a069332966fb7369c33da52" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; DataList&lt; T, DataModel_detail::NoBase &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <computeroutput>reverse_iterator</computeroutput>. Note that lvalue references here will yield an <computeroutput>ElementProxy</computeroutput>, not a <computeroutput>reference</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1314" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a38b3e7e0271935500c103f9a5b9a9909" prot="private" static="no">
        <type>ROOT_SELECTION_NS::DataList&lt; <ref refid="d1/def/classT" kindref="compound">T</ref>, <ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound">DataList_BASE</ref> &gt;::self</type>
        <definition>typedef ROOT_SELECTION_NS::DataList&lt;T, DataList_BASE&gt;::self DataList&lt; T, DataModel_detail::NoBase &gt;::self</definition>
        <argsstring></argsstring>
        <name>self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a904290e6b3a3dc730b98b1866b160827" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool DataList&lt; T, DataModel_detail::NoBase &gt;::has_virtual</definition>
        <argsstring></argsstring>
        <name>has_virtual</name>
        <initializer> false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is true for any <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class if we need to use virtual derivation to get to the base <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class. Since this <emphasis>is</emphasis> the base <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class, set this unconditionally to <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1273" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1273" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a81d2277034a04150f150ed24dd4c4e87" prot="private" static="no" mutable="no">
        <type><ref refid="df/d76/classSG_1_1IsMostDerivedFlag" kindref="compound">SG::IsMostDerivedFlag</ref></type>
        <definition>SG::IsMostDerivedFlag DataList&lt; T, DataModel_detail::NoBase &gt;::m_isMostDerived</definition>
        <argsstring></argsstring>
        <name>m_isMostDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This flag is true if this DL instance is the most-derived one. We set this to true in the top-level constructor; the constructor then calls clearMostDerived on the base classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a166cf66f9922b0791159bff5fc668c69" prot="private" static="yes" mutable="no">
        <type><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo</ref>&lt; <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt;</type>
        <definition>DataModel_detail::DVLInfo&lt;DataList&lt;T&gt; &gt; DataList&lt; T, DataModel_detail::NoBase &gt;::s_info</definition>
        <argsstring></argsstring>
        <name>s_info</name>
        <briefdescription>
<para>The DV/DL info struct for this class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2111" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="2111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base specialization for <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>This is used for the case where <computeroutput><ref refid="d1/def/classT" kindref="compound">T</ref></computeroutput> does not derive from other classes. This is the class which actually holds the list of pointers.</para><para>See the file comments for full details. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="4804">
        <label>SG::IsMostDerivedFlag</label>
        <link refid="df/d76/classSG_1_1IsMostDerivedFlag"/>
      </node>
      <node id="4805">
        <label>DataModel_detail::DVLInfo&lt; DataList&lt; T &gt; &gt;</label>
        <link refid="df/d12/classDataModel__detail_1_1DVLInfo"/>
        <childnode refid="4806" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4806">
        <label>DataModel_detail::DVLInfoBase</label>
        <link refid="da/d8a/classDataModel__detail_1_1DVLInfoBase"/>
      </node>
      <node id="4803">
        <label>DataList&lt; T, DataModel_detail::NoBase &gt;</label>
        <link refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4"/>
        <childnode refid="4804" relation="usage">
          <edgelabel>m_isMostDerived</edgelabel>
        </childnode>
        <childnode refid="4805" relation="usage">
          <edgelabel>s_info</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="1256" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="1255" bodyend="2116"/>
    <listofallmembers>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afc453046748092e6fc4916a502294c17" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>allocator_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aaad2b0dda0339ace2a5f380b7a2ed929" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>assign</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab4db3d17a1bff855a1832f80f8109ddb" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>assignBaseElement</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a56318b0504881e271a337d6ea83499cd" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>assignElement</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a78fcb74e8810ee041560deb0fd0e5085" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac37d4ef9d3e17f774b15d65c80ef3956" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2b4d44e14e15d8c836d3af43e45cae85" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>base_value_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a5e706f302d8a41bce617916b547ea097" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>BaseContainer</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a96cd0a1a4dfe935e939afc8a62394fe4" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1f600a76301a2d3d14e482b9e2776cf2" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a651b5eb77fe0071bbe708dc18971c009" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afc7f61743b492152b434836640190583" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0868554e751e7a0601c5c66e40b2ed85" prot="protected" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>clearMostDerived</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>const_iterator</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a8869b07738694f2afeffdfa6051efc65" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>const_pointer</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac8fc5266f26e44d17d817367fa2ef29e" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>const_reference</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835adbeac6f6308e227b0ebbb601d40e" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>const_reverse_iterator</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a4c7795fd259107d07d7efe6d53a038d3" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>const_value_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a803b456eae8c94a9cc000542421595b3" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>ConstDataList&lt; DataList &gt;</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a27604fb39d04f165c5ca6fdeae58b15f" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataList</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a28dd8a67308d8cf2257eade0d1111e3b" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataList</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af0a897b471d93ba7a5d3863f028e65f5" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataList</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abbcdb62b70628a64709319acd5ab6050" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataList</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a4fb145fade4da0f72c0c518b4bb2b66f" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataList_BASE</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aa387b75132216aab1ab41e3ae44cc56f" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DataModel_detail::ElementProxy&lt; DataList &gt;</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a305f3ded130e83133289deea8c5cf144" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>difference_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a5473acf8eb1ea055c4ad2ed7cc19d89f" prot="private" virt="virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>dl_typeid</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9da50ef8a9f78390888589f37b8baf83" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>DVL_BASE</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac854ab0e32699c904b79153ac25b3efa" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>dvlinfo</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a48e52dc31b3138ab558203889325917c" prot="public" virt="virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>dvlinfo_v</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a7a43f3105d5ac0011046690b54cbefdf" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>ElementProxy</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0db251354aa82da30e173170c4c9336d" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>empty</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a07ff31864f8bdda74e30255c6e578548" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac68e2b55f65d97e88b866fb50218059d" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a0e87fb8184614c638940f4c2bc2ef823" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a210ba843db90aea8fd000b7fd0137d30" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a323a52a2cf1cf5531f1db34a01cea959" prot="protected" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>erase_base</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af6d3b26b1bfe8cd7fd5fbb6e539ca21d" prot="protected" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>erase_base</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a47921f2fe9b99ea2768c8353323dcb64" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a3933eb9f817615c290c4613218c776b7" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a904290e6b3a3dc730b98b1866b160827" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>has_virtual</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a02227e05459f68f7ae0ec287b7817729" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2a34d2cfcdb42eefc16b22427ad44b31" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac4f7baf956209ef4cfcff4a68887a392" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>isSequence</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad11d3b6dbf3f2dc4dddaa972377607ff" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>iter_swap</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2005081b262f1e63a17d7ccc0615249d" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>iterator</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a81d2277034a04150f150ed24dd4c4e87" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>m_isMostDerived</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a58d4eab21e401f540614780a4bbe5c4f" prot="protected" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>m_ownPolicy</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adccdf67214a3ae7e0bf5c627f7773fb1" prot="protected" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>m_pCont</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad7536225c8c9321ac4eec89bba451eef" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>max_size</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a381210b588a66c2161bef370b3106dc7" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>merge</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac889908ffffa15fd4a8d99903b8241b2" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>merge</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a098ae1daf011dd3037d2ac50bc618bfc" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>operator=</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835da5f372ef8a7d7054e8bea85c91b6" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>ownPolicy</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adcbacb6f844432bd4a56d2a0b368f18b" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>pointer</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aa83393a907c793c2aa838fb6fa12aef3" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>pop_back</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a63a46869c71bdec71e0294a6f72d8735" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>pop_front</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abd17c4641bc563342e90f0cacb64af97" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>PtrList</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aeda608ccc6fac0ae29461df6cbf714a8" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>push_back</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab09c229bdb18bf7c2e5385685ce15471" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>push_front</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af00a3dad08bbd578054b202f4458a4c5" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a61dc30fc5a281edc891fc5646e8b39bb" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a35cedee549ab02f8d911d53f558cefc7" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>reference</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adb755c1c808b9195aea714580a047f29" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>remove</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae9208e95075295b87459e9d408fea622" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>remove_if</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae2912a56c75a78e3daba92d308c2bd09" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a91706520fb2c75102299affef231541d" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab49fdbcd60375b226b8272dca4d2fa43" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>resize</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac9244ff2441f80e03469a43b412d9a69" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>resortAux</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1a95df551a45b969628ca7cda2eda6d1" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>reverse</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1add2a33702a069332966fb7369c33da52" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>reverse_iterator</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a166cf66f9922b0791159bff5fc668c69" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>s_info</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a38b3e7e0271935500c103f9a5b9a9909" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>self</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2abecca05cb11a4ddcc2bb2e1c5179ae" prot="protected" virt="virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>setMostDerived</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a47eeeef94c243655cfa6995ad8f17d46" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>size</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1af5512d5dc3a73c22ec3beb3e35a0da4f" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>size_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ad707975872cf9e85f633a9829c916d15" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae388d1a40d05d53610c74d3443537feb" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a633c3ce289cbaf70eafcea4db83fcae3" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>splice</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b434dbf244d93b44b46f6ff94a6d2f2" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>splice</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abc339e17c39eb53440f0e8022b011db6" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>splice</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a637d00a090bf2fb52876227982ed2c3b" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>stdcont</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a280aba4dcb670ce252bafb3b4902fba9" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>swap</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ab7c31e2e55534c5724b20598db2324b8" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>swapElement</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a1119a539ef95e66a83ed73e65ce4acb9" prot="private" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>test2_assignelement1</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abc13d32a48d8e181d1c4f444f9b63952" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>testInsert</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9e0b9dc2ba00a550bb6d228a454e4567" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>testInsertOol</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ae940d6e63477383a918c1eaf834eb488" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>unique</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1aee4f88433d0e02f0818bf3692c49e14f" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>unique</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1afd5944bbd9a25246126c4de4f2e22ac2" prot="public" virt="non-virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>value_type</name></member>
      <member refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9188108e3569f3e14b57134bdc011fc5" prot="public" virt="virtual"><scope>DataList&lt; T, DataModel_detail::NoBase &gt;</scope><name>~DataList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
