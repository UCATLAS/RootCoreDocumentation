<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d85/classxAOD_1_1THolder" kind="class" prot="public">
    <compoundname>xAOD::THolder</compoundname>
    <derivedcompoundref refid="d6/d4b/classxAOD_1_1TCDVHolderT" prot="public" virt="non-virtual">xAOD::TCDVHolderT&lt; T &gt;</derivedcompoundref>
    <includes refid="d1/db1/THolder_8h" local="no">THolder.h</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="d0/d85/classxAOD_1_1THolder_1a30322b33558c6ab67a46e05648703ecc" prot="protected" static="no">
        <type>std::map&lt; const std::type_info *, TClass * &gt;</type>
        <definition>typedef std::map&lt; const std::type_info*, TClass* &gt; xAOD::THolder::TypeCache_t</definition>
        <argsstring></argsstring>
        <name>TypeCache_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> for the internal cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d85/classxAOD_1_1THolder_1ab3bbe8664d365f29c974b9635df39486" prot="protected" static="no">
        <type>std::map&lt; void *, int &gt;</type>
        <definition>typedef std::map&lt; void*, int &gt; xAOD::THolder::SharedCount_t</definition>
        <argsstring></argsstring>
        <name>SharedCount_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> implementing the instance counting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="105" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1a8c3554f272109bf5a2377ae24866893c" prot="protected" static="no" mutable="no">
        <type>void *</type>
        <definition>void* xAOD::THolder::m_object</definition>
        <argsstring></argsstring>
        <name>m_object</name>
        <briefdescription>
<para>Typeless pointer to the object in memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="91" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1ab330bab2ce644ac958127534aae1bbcd" prot="protected" static="no" mutable="no">
        <type>::TClass *</type>
        <definition>::TClass* xAOD::THolder::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <briefdescription>
<para>Concrete type of the object being held on to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1ad144585893f0afc8d21d3607ea03dbeb" prot="protected" static="no" mutable="no">
        <type>const std::type_info *</type>
        <definition>const std::type_info* xAOD::THolder::m_typeInfo</definition>
        <argsstring></argsstring>
        <name>m_typeInfo</name>
        <briefdescription>
<para>Concrete type of the object, if it doesn&apos;t have a dictionary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1af29d34b8ea4e9945f92d775f7f4cf7c3" prot="protected" static="no" mutable="no">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::THolder::m_owner</definition>
        <argsstring></argsstring>
        <name>m_owner</name>
        <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> flag for whether the object owns what it points to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="97" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1aae464a8842a668de6b3f6b60a1e63986" prot="protected" static="yes" mutable="no">
        <type><ref refid="d0/d85/classxAOD_1_1THolder_1a30322b33558c6ab67a46e05648703ecc" kindref="member">TypeCache_t</ref></type>
        <definition>THolder::TypeCache_t xAOD::THolder::s_typeMap</definition>
        <argsstring></argsstring>
        <name>s_typeMap</name>
        <initializer> <ref refid="d0/d85/classxAOD_1_1THolder_1a30322b33558c6ab67a46e05648703ecc" kindref="member">THolder::TypeCache_t</ref>()</initializer>
        <briefdescription>
<para>Cache for the requested class types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="102" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d85/classxAOD_1_1THolder_1aa5f15c7a038163821af52bc9a0fa9769" prot="protected" static="yes" mutable="no">
        <type><ref refid="d0/d85/classxAOD_1_1THolder_1ab3bbe8664d365f29c974b9635df39486" kindref="member">SharedCount_t</ref></type>
        <definition>THolder::SharedCount_t xAOD::THolder::s_sharedCount</definition>
        <argsstring></argsstring>
        <name>s_sharedCount</name>
        <initializer> <ref refid="d0/d85/classxAOD_1_1THolder_1ab3bbe8664d365f29c974b9635df39486" kindref="member">THolder::SharedCount_t</ref>()</initializer>
        <briefdescription>
<para>Variable counting the different object instances. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a2020c29c9e01536adf5c06326089f43d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::THolder::THolder</definition>
        <argsstring>()</argsstring>
        <name>THolder</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a1b5e34c09af804f941e1e2f8dcb09c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::THolder::THolder</definition>
        <argsstring>(void *object,::TClass *type,::Bool_t owner=kTRUE)</argsstring>
        <name>THolder</name>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>::TClass *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>owner</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Constructor pointing to an object in memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="26" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a68b8de203830129be9a640ea3ec684f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::THolder::THolder</definition>
        <argsstring>(void *object, const std::type_info &amp;type,::Bool_t owner=kTRUE)</argsstring>
        <name>THolder</name>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>owner</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Constructor pointing to an object in memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ae6c7301dffdea2c5997662a3fc564575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::THolder::THolder</definition>
        <argsstring>(const THolder &amp;parent)</argsstring>
        <name>THolder</name>
        <param>
          <type>const <ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The copy constructor takes the pointer from the parent object, and based on whether the parent owned the object or not, increments the shared count.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent object that should be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="57" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a0a348bab2d9c063bff0025efc1af0d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::THolder::THolder</definition>
        <argsstring>(THolder &amp;&amp;parent)</argsstring>
        <name>THolder</name>
        <param>
          <type><ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;&amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This is a tricky one. Since the object is being moved, meaning that the parent will be deleted right after this operation, instead of incrementing and then decrementing the shared count, we just tell the parent that it doesn&apos;t own its object anymore. In this case if it did own it, the shared count will remain valid. Since it&apos;s this object owning it now. If it didn&apos;t own the object in the first place, then no hard no foul.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent object that should be moved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="77" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a0afb7d776dc3ef15ac169134593bf4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>xAOD::THolder::~THolder</definition>
        <argsstring>()</argsstring>
        <name>~THolder</name>
        <briefdescription>
<para>The destructor cleans out the memory used by the managed object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="85" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a1e0c9c44b282258a4d7ec144055f92e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;</type>
        <definition>THolder &amp; xAOD::THolder::operator=</definition>
        <argsstring>(const THolder &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>The copy operator, just like the copy constructor makes the object aware that it doesn&apos;t own the object that it has the pointer to.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that has to be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> reference to this same object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="103" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ac96544f53b648de77f2d444d11267f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;</type>
        <definition>THolder &amp; xAOD::THolder::operator=</definition>
        <argsstring>(THolder &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move operator. </para>        </briefdescription>
        <detaileddescription>
<para>This move operator is necessary to be able to use this type as a value type of STL containers.</para><para>See the comments given for the move constructor for an explanation of the behaviour of this operator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that has to be moved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> reference to this same object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="141" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ad6d832af0c8c55bbe0492d490342790a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * xAOD::THolder::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Return a typeless pointer to the held object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a83140cc8dbe76e4c9e8a485479f7613c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** xAOD::THolder::getPtr</definition>
        <argsstring>()</argsstring>
        <name>getPtr</name>
        <briefdescription>
<para>Return a typeless pointer to the held object&apos;s pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a8a60a21b41d3d4154ff5be66ac94fdaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::THolder::set</definition>
        <argsstring>(void *obj)</argsstring>
        <name>set</name>
        <reimplementedby refid="d6/d4b/classxAOD_1_1TCDVHolderT_1a5e29479066758bfa270d2e893775506d">set</reimplementedby>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Replace the managed object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="180" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ab5d09bfde84e6a001fb44fb99fa4f030" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::THolder::isOwner</definition>
        <argsstring>() const </argsstring>
        <name>isOwner</name>
        <briefdescription>
<para>Check whether the holder owns its object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a4f15b2a9902d9750a3768e5700ae61a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::THolder::setOwner</definition>
        <argsstring>(::Bool_t state=kTRUE)</argsstring>
        <name>setOwner</name>
        <param>
          <type>::Bool_t</type>
          <declname>state</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Set whether the holder should own its object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="69" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="210" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ad4b96bbfa1fa22ed4db52e6b421546b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * xAOD::THolder::getAs</definition>
        <argsstring>(const std::type_info &amp;tid,::Bool_t silent=kFALSE) const </argsstring>
        <name>getAs</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>silent</declname>
          <defval>kFALSE</defval>
        </param>
        <briefdescription>
<para>Return the object as a specific pointer. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used for retrieving an object as one of its bases. It is used when the caller requires a non-const pointer to the managed object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The type as which the object is to be retrieved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>silent</parametername>
</parameternamelist>
<parameterdescription>
<para>When <computeroutput>kTRUE</computeroutput>, the call will fail silently when unsuccessful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> non-const pointer that can be cast to the requested type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="244" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1ac20f281ae3e93761527d61575057961f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const void *</type>
        <definition>const void * xAOD::THolder::getAsConst</definition>
        <argsstring>(const std::type_info &amp;tid,::Bool_t silent=kFALSE) const </argsstring>
        <name>getAsConst</name>
        <reimplementedby refid="d6/d4b/classxAOD_1_1TCDVHolderT_1a61e2667ff431cfc0c9d77f2cb49db757">getAsConst</reimplementedby>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>silent</declname>
          <defval>kFALSE</defval>
        </param>
        <briefdescription>
<para>Return the object as a specific, constant pointer. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used for retrieving an object as one of its bases. It is used when the caller need a const pointer to the managed object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The type as which the object is to be retrieved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>silent</parametername>
</parameternamelist>
<parameterdescription>
<para>When <computeroutput>kTRUE</computeroutput>, the call will fail silently when unsuccessful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> const pointer that can be cast to the requested type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="317" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1acb0cdae3b8f976c63d17572325746cc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::TClass *</type>
        <definition>TClass * xAOD::THolder::getClass</definition>
        <argsstring>() const </argsstring>
        <name>getClass</name>
        <briefdescription>
<para>Return the concrete type of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1a217a1d18d4b3664e5756b34f85068fba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::type_info *</type>
        <definition>const std::type_info * xAOD::THolder::getTypeInfo</definition>
        <argsstring>() const </argsstring>
        <name>getTypeInfo</name>
        <briefdescription>
<para>Return the concrete type of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1aa57902250e744edbf975fc4251c6643e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::THolder::renew</definition>
        <argsstring>()</argsstring>
        <name>renew</name>
        <briefdescription>
<para>Renew the object in memory. </para>        </briefdescription>
        <detaileddescription>
<para>This function is mostly used in &quot;Athena access mode&quot;, to delete the managed objects from memory between events, and recreate them from scratch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="339" bodyend="357"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d0/d85/classxAOD_1_1THolder_1aa3fd2af8fe7606fe11418b17c2f2a601" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::THolder::deleteObject</definition>
        <argsstring>()</argsstring>
        <name>deleteObject</name>
        <briefdescription>
<para>Internal function used to delete the managed object from memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/THolder.cxx" bodystart="359" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class takes care of holding EDM objects in memory. </para>    </briefdescription>
    <detaileddescription>
<para>In order to be able to access EDM objects easily as their concrete type, or as one of their base classes, a little trickery is needed.</para><para>We always access the branches of the input TTree as their concrete, transient types. It is then up to our own code to decide if the user is requesting the object as a type that it can be cast to, or not.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>725531 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2016-02-22 17:14:25 +0100 (Mon, 22 Feb 2016) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="19792">
        <label>xAOD::THolder</label>
        <link refid="d0/d85/classxAOD_1_1THolder"/>
      </node>
      <node id="19793">
        <label>xAOD::TCDVHolderT&lt; T &gt;</label>
        <link refid="d6/d4b/classxAOD_1_1TCDVHolderT"/>
        <childnode refid="19792" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19794">
        <label>xAOD::THolder</label>
        <link refid="d0/d85/classxAOD_1_1THolder"/>
        <childnode refid="19795" relation="usage">
          <edgelabel>m_object</edgelabel>
        </childnode>
      </node>
      <node id="19795">
        <label>void</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/tools/THolder.h" bodystart="36" bodyend="109"/>
    <listofallmembers>
      <member refid="d0/d85/classxAOD_1_1THolder_1aa3fd2af8fe7606fe11418b17c2f2a601" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>deleteObject</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ad6d832af0c8c55bbe0492d490342790a" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>get</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ad4b96bbfa1fa22ed4db52e6b421546b8" prot="public" virt="virtual"><scope>xAOD::THolder</scope><name>getAs</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ac20f281ae3e93761527d61575057961f" prot="public" virt="virtual"><scope>xAOD::THolder</scope><name>getAsConst</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1acb0cdae3b8f976c63d17572325746cc1" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>getClass</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a83140cc8dbe76e4c9e8a485479f7613c" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>getPtr</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a217a1d18d4b3664e5756b34f85068fba" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>getTypeInfo</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ab5d09bfde84e6a001fb44fb99fa4f030" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>isOwner</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a8c3554f272109bf5a2377ae24866893c" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>m_object</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1af29d34b8ea4e9945f92d775f7f4cf7c3" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>m_owner</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ab330bab2ce644ac958127534aae1bbcd" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>m_type</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ad144585893f0afc8d21d3607ea03dbeb" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>m_typeInfo</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a1e0c9c44b282258a4d7ec144055f92e6" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>operator=</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ac96544f53b648de77f2d444d11267f9a" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>operator=</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1aa57902250e744edbf975fc4251c6643e" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>renew</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1aa5f15c7a038163821af52bc9a0fa9769" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>s_sharedCount</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1aae464a8842a668de6b3f6b60a1e63986" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>s_typeMap</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a8a60a21b41d3d4154ff5be66ac94fdaa" prot="public" virt="virtual"><scope>xAOD::THolder</scope><name>set</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a4f15b2a9902d9750a3768e5700ae61a2" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>setOwner</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ab3bbe8664d365f29c974b9635df39486" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>SharedCount_t</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a2020c29c9e01536adf5c06326089f43d" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>THolder</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a1b5e34c09af804f941e1e2f8dcb09c7b" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>THolder</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a68b8de203830129be9a640ea3ec684f5" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>THolder</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1ae6c7301dffdea2c5997662a3fc564575" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>THolder</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a0a348bab2d9c063bff0025efc1af0d7e" prot="public" virt="non-virtual"><scope>xAOD::THolder</scope><name>THolder</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a30322b33558c6ab67a46e05648703ecc" prot="protected" virt="non-virtual"><scope>xAOD::THolder</scope><name>TypeCache_t</name></member>
      <member refid="d0/d85/classxAOD_1_1THolder_1a0afb7d776dc3ef15ac169134593bf4e2" prot="public" virt="virtual"><scope>xAOD::THolder</scope><name>~THolder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
