<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d2e/classInternal_1_1hash__code__base" kind="class" prot="public">
    <compoundname>Internal::hash_code_base</compoundname>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; const std::type_info *, std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt;, std::allocator&lt; std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt; &gt;, std::equal_to&lt; const std::type_info * &gt;, hash&lt; const std::type_info * &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; const void *, std::pair&lt; const const void *, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, std::equal_to&lt; const void * &gt;, hash&lt; const void * &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; Key, std::pair&lt; const Key, T &gt;, Alloc, Internal::extract1st&lt; std::pair&lt; const Key, T &gt; &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, false, false &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; Key, std::pair&lt; const Key, T &gt;, Alloc, Internal::extract1st&lt; std::pair&lt; const Key, T &gt; &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; key_t, std::pair&lt; const key_t, SG::auxid_t &gt;, std::allocator&lt; std::pair&lt; const key_t, SG::auxid_t &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const key_t, SG::auxid_t &gt; &gt;, std::equal_to&lt; key_t &gt;, stringpair_hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; sgkey_t, std::pair&lt; const sgkey_t, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, std::equal_to&lt; sgkey_t &gt;, hash&lt; sgkey_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; size_t, size_t, std::allocator&lt; size_t &gt;, Internal::identity&lt; size_t &gt;, std::equal_to&lt; size_t &gt;, hash&lt; size_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, true, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; TestStoreRemap, std::pair&lt; const TestStoreRemap, TestStoreRemap &gt;, std::allocator&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, std::equal_to&lt; TestStoreRemap &gt;, TestStoreRemapHash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, false &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/d63/classSG_1_1hashtable" prot="public" virt="non-virtual">SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</derivedcompoundref>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7739">
        <label>hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, false &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7724">
        <label>SG::unordered_map&lt; const std::type_info *, const IAuxTypeVectorFactory * &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7723" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7733">
        <label>hashtable&lt; sgkey_t, std::pair&lt; const sgkey_t, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, std::equal_to&lt; sgkey_t &gt;, hash&lt; sgkey_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7732">
        <label>SG::unordered_map&lt; key_t, SG::auxid_t, stringpair_hash &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7731" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7735">
        <label>hashtable&lt; size_t, size_t, std::allocator&lt; size_t &gt;, Internal::identity&lt; size_t &gt;, std::equal_to&lt; size_t &gt;, hash&lt; size_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7727">
        <label>hashtable&lt; Key, std::pair&lt; const Key, T &gt;, Alloc, Internal::extract1st&lt; std::pair&lt; const Key, T &gt; &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, false, false &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7740">
        <label>SG::unordered_multiset&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="df/d21/classSG_1_1unordered__multiset"/>
        <childnode refid="7739" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7722">
        <label>hash_code_base</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="7728">
        <label>SG::unordered_multimap&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="d1/d54/classSG_1_1unordered__multimap"/>
        <childnode refid="7727" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7726">
        <label>SG::unordered_map&lt; const void *, SG::DataProxy * &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7725" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7731">
        <label>hashtable&lt; key_t, std::pair&lt; const key_t, SG::auxid_t &gt;, std::allocator&lt; std::pair&lt; const key_t, SG::auxid_t &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const key_t, SG::auxid_t &gt; &gt;, std::equal_to&lt; key_t &gt;, stringpair_hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7738">
        <label>SG::unordered_map&lt; TestStoreRemap, TestStoreRemap, TestStoreRemapHash &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7729">
        <label>hashtable&lt; Key, std::pair&lt; const Key, T &gt;, Alloc, Internal::extract1st&lt; std::pair&lt; const Key, T &gt; &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7723">
        <label>hashtable&lt; const std::type_info *, std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt;, std::allocator&lt; std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const const std::type_info *, const IAuxTypeVectorFactory * &gt; &gt;, std::equal_to&lt; const std::type_info * &gt;, hash&lt; const std::type_info * &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7734">
        <label>SG::unordered_map&lt; sgkey_t, SG::DataProxy * &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7733" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7741">
        <label>hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7742">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="7741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7725">
        <label>hashtable&lt; const void *, std::pair&lt; const const void *, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, std::equal_to&lt; const void * &gt;, hash&lt; const void * &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7737">
        <label>hashtable&lt; TestStoreRemap, std::pair&lt; const TestStoreRemap, TestStoreRemap &gt;, std::allocator&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, std::equal_to&lt; TestStoreRemap &gt;, TestStoreRemapHash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="7722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7730">
        <label>SG::unordered_map&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="7729" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7736">
        <label>SG::unordered_set&lt; size_t &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="7735" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="1202"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
