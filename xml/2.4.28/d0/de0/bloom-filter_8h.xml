<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/de0/bloom-filter_8h" kind="file">
    <compoundname>bloom-filter.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108138">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
      <node id="108137">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h</label>
        <link refid="bloom-filter.h"/>
        <childnode refid="108138" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" prot="public" static="no">
        <type>struct _BloomFilter</type>
        <definition>typedef struct _BloomFilter BloomFilter</definition>
        <argsstring></argsstring>
        <name>BloomFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> bloom filter structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/de0/bloom-filter_8h_1afd17b4487dec1456d77b653a914a231c" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* BloomFilterValue</definition>
        <argsstring></argsstring>
        <name>BloomFilterValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> value stored in a <ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/de0/bloom-filter_8h_1a715828539c8ce80605e14c450304ff85" prot="public" static="no">
        <type>unsigned long(*</type>
        <definition>typedef unsigned long(* BloomFilterHashFunc)(BloomFilterValue data)</definition>
        <argsstring>)(BloomFilterValue data)</argsstring>
        <name>BloomFilterHashFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hash function used to generate hash values for values inserted into a bloom filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to generate a hash value for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1a6e3bc3043536d2dc5f53d34c9bf735cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
        <definition>BloomFilter* bloom_filter_new</definition>
        <argsstring>(unsigned int table_size, BloomFilterHashFunc hash_func, unsigned int num_functions)</argsstring>
        <name>bloom_filter_new</name>
        <param>
          <type>unsigned int</type>
          <declname>table_size</declname>
        </param>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a715828539c8ce80605e14c450304ff85" kindref="member">BloomFilterHashFunc</ref></type>
          <declname>hash_func</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_functions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new bloom filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the bloom filter. The greater the table size, the more elements can be stored, and the lesser the chance of false positives. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash function to use on values stored in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_functions</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hash functions to apply to each element on insertion. This running time for insertion and queries is proportional to this value. The more functions applied, the lesser the chance of false positives. The maximum number of functions is 64. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new hash table structure, or NULL if it was not possible to allocate the new bloom filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="91"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1ae26b8f3e56f0ba26c08a368a6a8e97d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bloom_filter_free</definition>
        <argsstring>(BloomFilter *bloomfilter)</argsstring>
        <name>bloom_filter_free</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>bloomfilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a bloom filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bloomfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The bloom filter to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="99"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1a2ce58fd3c0abbb367b8bc221c322ff0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bloom_filter_insert</definition>
        <argsstring>(BloomFilter *bloomfilter, BloomFilterValue value)</argsstring>
        <name>bloom_filter_insert</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>bloomfilter</declname>
        </param>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1afd17b4487dec1456d77b653a914a231c" kindref="member">BloomFilterValue</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a value into a bloom filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bloomfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The bloom filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1ae91f8c8c33c2ce61c908ce7c07602077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bloom_filter_query</definition>
        <argsstring>(BloomFilter *bloomfilter, BloomFilterValue value)</argsstring>
        <name>bloom_filter_query</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>bloomfilter</declname>
        </param>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1afd17b4487dec1456d77b653a914a231c" kindref="member">BloomFilterValue</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query a bloom filter for a particular value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bloomfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The bloom filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to look up. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the value was definitely not inserted into the filter. Non-zero indicates that it either may or may not have been inserted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1a328e5236f01872f6a5880aae9f0889e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bloom_filter_read</definition>
        <argsstring>(BloomFilter *bloomfilter, unsigned char *array)</argsstring>
        <name>bloom_filter_read</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>bloomfilter</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the contents of a bloom filter into an array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bloomfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The bloom filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array to read into. This should be (table_size + 7) / 8 bytes in length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="132"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1a1ad211c46709b8f2cf12bd9129f22514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bloom_filter_load</definition>
        <argsstring>(BloomFilter *bloomfilter, unsigned char *array)</argsstring>
        <name>bloom_filter_load</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>bloomfilter</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load the contents of a bloom filter from an array. The data loaded should be the output read from <ref refid="d0/de0/bloom-filter_8h_1a328e5236f01872f6a5880aae9f0889e3" kindref="member">bloom_filter_read</ref>, from a bloom filter created using the same arguments used to create the original filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bloomfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The bloom filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array to load from. This should be (table_size + 7) / 8 bytes in length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1a61e42bee7c8136bd97f28c52c8118c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
        <definition>BloomFilter* bloom_filter_union</definition>
        <argsstring>(BloomFilter *filter1, BloomFilter *filter2)</argsstring>
        <name>bloom_filter_union</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>filter1</declname>
        </param>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>filter2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the union of two bloom filters. Values are present in the resulting filter if they are present in either of the original filters.</para><para>Both of the original filters must have been created using the same parameters to <ref refid="d0/de0/bloom-filter_8h_1a6e3bc3043536d2dc5f53d34c9bf735cf" kindref="member">bloom_filter_new</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new filter which is an intersection of the two filters, or NULL if it was not possible to allocate memory for the new filter, or if the two filters specified were created with different parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="d0/de0/bloom-filter_8h_1ab61c4ca48116becdb749685a1b4e269f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
        <definition>BloomFilter* bloom_filter_intersection</definition>
        <argsstring>(BloomFilter *filter1, BloomFilter *filter2)</argsstring>
        <name>bloom_filter_intersection</name>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>filter1</declname>
        </param>
        <param>
          <type><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref> *</type>
          <declname>filter2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the intersection of two bloom filters. Values are only ever present in the resulting filter if they are present in both of the original filters.</para><para>Both of the original filters must have been created using the same parameters to <ref refid="d0/de0/bloom-filter_8h_1a6e3bc3043536d2dc5f53d34c9bf735cf" kindref="member">bloom_filter_new</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new filter which is an intersection of the two filters, or NULL if it was not possible to allocate memory for the new filter, or if the two filters specified were created with different parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h" line="186"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bloom filter. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> bloom filter is a space efficient data structure that can be used to test whether a given element is part of a set. Lookups will occasionally generate false positives, but never false negatives.</para><para>To create a bloom filter, use <ref refid="d0/de0/bloom-filter_8h_1a6e3bc3043536d2dc5f53d34c9bf735cf" kindref="member">bloom_filter_new</ref>. To destroy a bloom filter, use <ref refid="d0/de0/bloom-filter_8h_1ae26b8f3e56f0ba26c08a368a6a8e97d3" kindref="member">bloom_filter_free</ref>.</para><para>To insert a value into a bloom filter, use <ref refid="d0/de0/bloom-filter_8h_1a2ce58fd3c0abbb367b8bc221c322ff0b" kindref="member">bloom_filter_insert</ref>.</para><para>To query whether a value is part of the set, use <ref refid="d0/de0/bloom-filter_8h_1ae91f8c8c33c2ce61c908ce7c07602077" kindref="member">bloom_filter_query</ref>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_BLOOM_FILTER_H</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_BLOOM_FILTER_H</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="51" refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_BloomFilter<sp/><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="d0/de0/bloom-filter_8h_1afd17b4487dec1456d77b653a914a231c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d0/de0/bloom-filter_8h_1afd17b4487dec1456d77b653a914a231c" kindref="member">BloomFilterValue</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="d0/de0/bloom-filter_8h_1a715828539c8ce80605e14c450304ff85" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long<sp/>(*<ref refid="d0/de0/bloom-filter_8h_1a715828539c8ce80605e14c450304ff85" kindref="member">BloomFilterHashFunc</ref>)(BloomFilterValue<sp/>data);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*<ref refid="d0/de0/bloom-filter_8h_1a6e3bc3043536d2dc5f53d34c9bf735cf" kindref="member">bloom_filter_new</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>table_size,<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/de0/bloom-filter_8h_1a715828539c8ce80605e14c450304ff85" kindref="member">BloomFilterHashFunc</ref><sp/>hash_func,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_functions);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/de0/bloom-filter_8h_1ae26b8f3e56f0ba26c08a368a6a8e97d3" kindref="member">bloom_filter_free</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*bloomfilter);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/de0/bloom-filter_8h_1a2ce58fd3c0abbb367b8bc221c322ff0b" kindref="member">bloom_filter_insert</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*bloomfilter,<sp/>BloomFilterValue<sp/>value);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/de0/bloom-filter_8h_1ae91f8c8c33c2ce61c908ce7c07602077" kindref="member">bloom_filter_query</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*bloomfilter,<sp/>BloomFilterValue<sp/>value);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/de0/bloom-filter_8h_1a328e5236f01872f6a5880aae9f0889e3" kindref="member">bloom_filter_read</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*bloomfilter,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*array);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/de0/bloom-filter_8h_1a1ad211c46709b8f2cf12bd9129f22514" kindref="member">bloom_filter_load</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*bloomfilter,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*array);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*<ref refid="d0/de0/bloom-filter_8h_1a61e42bee7c8136bd97f28c52c8118c6b" kindref="member">bloom_filter_union</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*filter1,<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*filter2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*<ref refid="d0/de0/bloom-filter_8h_1ab61c4ca48116becdb749685a1b4e269f" kindref="member">bloom_filter_intersection</ref>(<ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*filter1,<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/de0/bloom-filter_8h_1a9f9faeb8c9f53089edbc42c51c3dca49" kindref="member">BloomFilter</ref><sp/>*filter2);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_BLOOM_FILTER_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/bloom-filter.h"/>
  </compounddef>
</doxygen>
