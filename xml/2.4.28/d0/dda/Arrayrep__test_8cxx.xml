<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/dda/Arrayrep__test_8cxx" kind="file">
    <compoundname>Arrayrep_test.cxx</compoundname>
    <includes refid="dd/de3/Arrayrep_8h" local="yes">CxxUtils/Arrayrep.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="113607">
        <label>cassert</label>
      </node>
      <node id="113606">
        <label>stdexcept</label>
      </node>
      <node id="113604">
        <label>string</label>
      </node>
      <node id="113603">
        <label>CxxUtils/Arrayrep.h</label>
        <link refid="dd/de3/Arrayrep_8h"/>
        <childnode refid="113604" relation="include">
        </childnode>
        <childnode refid="113605" relation="include">
        </childnode>
      </node>
      <node id="113605">
        <label>vector</label>
      </node>
      <node id="113602">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx</label>
        <link refid="Arrayrep_test.cxx"/>
        <childnode refid="113603" relation="include">
        </childnode>
        <childnode refid="113606" relation="include">
        </childnode>
        <childnode refid="113607" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d0/dda/Arrayrep__test_8cxx_1ab8df3fda72b17a3de0e1f063009fcf12" prot="public" static="no">
        <name>ARSZ</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x)/sizeof(x[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d0/dda/Arrayrep__test_8cxx_1a92a6a0b4bdb85385f4d7bdf22a343afc" prot="public" static="no">
        <name>EXPECT_EXCEPTION</name>
        <param><defname>s</defname></param>
        <initializer>{ \
    bool caught = false; \
    try { \
      Arrayrep xx (s); \
    } catch (std::runtime_error&amp; c) {           \
      caught = true; \
    } \
    assert (caught); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="42"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/dda/Arrayrep__test_8cxx_1a4849ac92a5b4f9babf4430ddddb093da" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int shape[]</definition>
        <argsstring>[]</argsstring>
        <name>shape</name>
        <initializer> {2, 4, 3}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="19" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/dda/Arrayrep__test_8cxx_1a2f4508025d167895cdca320316334543" prot="public" static="no" mutable="no">
        <type>Arrayelt</type>
        <definition>Arrayelt data[]</definition>
        <argsstring>[]</argsstring>
        <name>data</name>
        <initializer> { 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
                   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="21" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/dda/Arrayrep__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="26" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="d0/dda/Arrayrep__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="66" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="d0/dda/Arrayrep__test_8cxx_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="79" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d0/dda/Arrayrep__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx" bodystart="99" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for the Arrayrep class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>June, 2004 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>Arrayrep_test.cxx,v<sp/>1.2<sp/>2009-04-08<sp/>21:12:45<sp/>ssnyder<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dd/de3/Arrayrep_8h" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">CxxUtils/Arrayrep.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CxxUtils;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape[]<sp/>=<sp/>{2,<sp/>4,<sp/>3};</highlight></codeline>
<codeline lineno="20"><highlight class="normal">Arrayelt<sp/>data[]<sp/>=<sp/>{<sp/>1,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARSZ(x)<sp/>(sizeof(x)/sizeof(x[0]))</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>ar0<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>3.5<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>assert<sp/>(ar0.m_shape.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>assert<sp/>(ar0.m_data.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>assert<sp/>(ar0.m_data[0]<sp/>==<sp/>3.5);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_EXCEPTION(s)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>caught<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Arrayrep<sp/>xx<sp/>(s);<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(std::runtime_error&amp;<sp/>c)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>assert<sp/>(caught);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>asd<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>3.5<sp/>3.5<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>ar1<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[3.5,<sp/>4.5]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_shape.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_shape[0]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_shape[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_data.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_data[0]<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_data[1]<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_data[2]<sp/>==<sp/>3.5);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>assert<sp/>(ar1.m_data[3]<sp/>==<sp/>4.5);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[3.5,<sp/>4.5,<sp/>5.5]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[3.5,<sp/>4.5],<sp/>[[6.5,<sp/>7.5]]]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[4.5]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[asd]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[3.5,<sp/>4.5]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" kindref="member" tooltip="Initialize the m_sizes vector from the m_shape vector.">init_sizes</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1aeea9324049b2aaf8693a41a3eae55481" kindref="member">m_shape</ref>.assign<sp/>(&amp;shape[0],<sp/>shape<sp/>+<sp/>ARSZ(shape));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" kindref="member" tooltip="The array data, stored using the C array ordering.">m_data</ref>.assign<sp/>(data,<sp/>data<sp/>+<sp/>ARSZ(data));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" kindref="member" tooltip="Initialize the m_sizes vector from the m_shape vector.">init_sizes</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert<sp/>(rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" kindref="member">m_sizes</ref>.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>assert<sp/>(rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" kindref="member">m_sizes</ref>[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>assert<sp/>(rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" kindref="member">m_sizes</ref>[1]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>assert<sp/>(rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" kindref="member">m_sizes</ref>[2]<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test3()</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep1<sp/>(shape,<sp/>ARSZ(shape));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(rep1.m_shape.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>assert<sp/>(rep1.m_shape[0]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert<sp/>(rep1.m_shape[1]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert<sp/>(rep1.m_shape[2]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>assert<sp/>(rep1.m_data.size()<sp/>==<sp/>24);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(4);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(2);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep2<sp/>(v);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>assert<sp/>(rep2.m_shape.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>assert<sp/>(rep2.m_shape[0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>assert<sp/>(rep2.m_shape[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>assert<sp/>(rep2.m_data.size()<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>test3();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Arrayrep_test.cxx"/>
  </compounddef>
</doxygen>
