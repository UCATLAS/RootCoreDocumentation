<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" kind="file">
    <compoundname>ClassName.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes local="no">stdexcept</includes>
    <includedby refid="d2/d8a/normalizedTypeinfoName_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/normalizedTypeinfoName.cxx</includedby>
    <includedby refid="dc/d94/ClassName_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ClassName.cxx</includedby>
    <includedby refid="d2/dca/ClassName__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx</includedby>
    <incdepgraph>
      <node id="32149">
        <label>stdexcept</label>
      </node>
      <node id="32146">
        <label>string</label>
      </node>
      <node id="32148">
        <label>map</label>
      </node>
      <node id="32147">
        <label>vector</label>
      </node>
      <node id="32145">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h</label>
        <link refid="CxxUtils/CxxUtils/ClassName.h"/>
        <childnode refid="32146" relation="include">
        </childnode>
        <childnode refid="32147" relation="include">
        </childnode>
        <childnode refid="32148" relation="include">
        </childnode>
        <childnode refid="32149" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32151">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/normalizedTypeinfoName.cxx</label>
        <link refid="d2/d8a/normalizedTypeinfoName_8cxx"/>
      </node>
      <node id="32152">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx</label>
        <link refid="d2/dca/ClassName__test_8cxx"/>
      </node>
      <node id="32150">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h</label>
        <link refid="CxxUtils/CxxUtils/ClassName.h"/>
        <childnode refid="32151" relation="include">
        </childnode>
        <childnode refid="32152" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d2/df5/classCxxUtils_1_1ClassName" prot="public">CxxUtils::ClassName</innerclass>
    <innerclass refid="dc/d63/classCxxUtils_1_1ClassName_1_1ExcBadClassName" prot="public">CxxUtils::ClassName::ExcBadClassName</innerclass>
    <innerclass refid="de/d9a/classCxxUtils_1_1ClassName_1_1ExcMissingVariable" prot="public">CxxUtils::ClassName::ExcMissingVariable</innerclass>
    <innerclass refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" prot="public">CxxUtils::ClassName::Rules</innerclass>
    <innernamespace refid="de/d12/namespaceCxxUtils">CxxUtils</innernamespace>
    <briefdescription>
<para>Recursively separate out template arguments in a C++ class name. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Jun, 2014 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file&apos;s<sp/>extension<sp/>implies<sp/>that<sp/>it&apos;s<sp/>C,<sp/>but<sp/>it&apos;s<sp/>really<sp/>-*-<sp/>C++<sp/>-*-.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>CXXUTILS_CLASSNAME_H</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CXXUTILS_CLASSNAME_H</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CxxUtils<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="d2/df5/classCxxUtils_1_1ClassName" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="dc/d63/classCxxUtils_1_1ClassName_1_1ExcBadClassName" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/d63/classCxxUtils_1_1ClassName_1_1ExcBadClassName" kindref="compound" tooltip="Exception to signal a malformed class name.">ExcBadClassName</ref></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d63/classCxxUtils_1_1ClassName_1_1ExcBadClassName_1ac088d62d826d2ac56138098ea68db922" kindref="member" tooltip="Exception to signal a malformed class name.">ExcBadClassName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="de/d9a/classCxxUtils_1_1ClassName_1_1ExcMissingVariable" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d9a/classCxxUtils_1_1ClassName_1_1ExcMissingVariable" kindref="compound" tooltip="Exception to signal a missing variable.">ExcMissingVariable</ref></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d9a/classCxxUtils_1_1ClassName_1_1ExcMissingVariable_1aa21a35d11fc8bc746e0beabcfa65f21d" kindref="member" tooltip="Exception to signal a missing variable.">ExcMissingVariable</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>var);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">Rules</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a84d800bbd52890c6d12e114a860d7d96" kindref="member" tooltip="Return the number of defined rules.">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>pattern,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>replacement);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;&amp;<sp/>pattern,<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;&amp;<sp/>replacement);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a5182ec73aee588d8d667315e6faaf77d" kindref="member" tooltip="Apply the set of transformation rules to a class name object.">applyTo</ref><sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>cn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ac5f945c506f2701a6f625ff34ce36a23" kindref="member" tooltip="Apply transformations to a class name.">apply</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;ClassName,<sp/>ClassName&gt;<sp/>pat_repl_t;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::multimap&lt;std::string,<sp/>pat_repl_t&gt;<sp/>rulemap_t;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>rulemap_t<sp/>m_rules;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>ClassName&gt;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" kindref="member" tooltip="Map used to hold variable assignments from matching.">match_t</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a6705742f2fbe4b648be53846792b3483" kindref="member" tooltip="Default constructor.">ClassName</ref><sp/>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a6705742f2fbe4b648be53846792b3483" kindref="member" tooltip="Default constructor.">ClassName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a6705742f2fbe4b648be53846792b3483" kindref="member" tooltip="Default constructor.">ClassName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a6705742f2fbe4b648be53846792b3483" kindref="member" tooltip="Default constructor.">ClassName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,<sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8e16fe0dcb6be7a8746a47a7b38ca953" kindref="member" tooltip="Swap this expression with another one.">swap</ref><sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1afb46cf0dd4a6b1bda705391466713eef" kindref="member" tooltip="Set the const flag for this expression.">setConst</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1afac5cffe53dd2e346f2cf1148dac5713" kindref="member" tooltip="Return the namespace-qualified name of the expression.">qualifiedName</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1abfa27284ab7fb9660ebffa0fe8159129" kindref="member" tooltip="Return the full name of the expression.">fullName</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1ab72ab23cf89c5fa217366b4c0e55896c" kindref="member" tooltip="Test two expressions for equality.">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a830d0a5ab2061a7b93845e4b07f72365" kindref="member" tooltip="Test two expressions for inequality.">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8c977888cec29d2538ee51fde6934414" kindref="member" tooltip="Match this expression against a pattern.">match</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>pattern,<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" kindref="member" tooltip="Map used to hold variable assignments from matching.">match_t</ref>&amp;<sp/>matches)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1af128db26769f589d91221f3c6df44b4f" kindref="member" tooltip="Substitute variables into this expression.">subst</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" kindref="member" tooltip="Map used to hold variable assignments from matching.">match_t</ref>&amp;<sp/>matches);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1ade65e075ffad0e920593040136218b58" kindref="member" tooltip="Return a copy of this expression with variables substituted.">substCopy</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" kindref="member" tooltip="Map used to hold variable assignments from matching.">match_t</ref>&amp;<sp/>matches)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1ad928b4f879a35defc22f2beca281e970" kindref="member" tooltip="Apply a set of transformation rules to this object.">applyRules</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">Rules</ref>&amp;<sp/>rules);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1ad928b4f879a35defc22f2beca281e970" kindref="member" tooltip="Apply a set of transformation rules to this object.">applyRules</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">Rules</ref>&amp;<sp/>rules);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,<sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>std::string<sp/>parsePrimary<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseNamespace<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,<sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseTemplateArgs<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,<sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipSpaces<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a1f49f8ecf0f6cb155d25337c9a8040d2" kindref="member" tooltip="Return the root name of the expression.">name</ref>,<sp/>std::string::size_type&amp;<sp/>pos);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref>&amp;<sp/>pattern,<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName_1a8152d9ea3ca2a3217c43be8a4d645c14" kindref="member" tooltip="Map used to hold variable assignments from matching.">match_t</ref>&amp;<sp/>matches)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>applyRules1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">Rules</ref>&amp;<sp/>rules);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_const;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>std::vector&lt;ClassName&gt;<sp/>m_namespace;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>std::string<sp/>m_name;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>std::vector&lt;ClassName&gt;<sp/>m_targs;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CxxUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>CXXUTILS_CLASSNAME_H</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h"/>
  </compounddef>
</doxygen>
