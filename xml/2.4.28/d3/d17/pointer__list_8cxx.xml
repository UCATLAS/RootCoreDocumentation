<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d17/pointer__list_8cxx" kind="file">
    <compoundname>pointer_list.cxx</compoundname>
    <includes refid="df/d5b/pointer__list_8h" local="yes">CxxUtils/pointer_list.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="113475">
        <label>iterator</label>
      </node>
      <node id="113473">
        <label>CxxUtils/pointer_list.h</label>
        <link refid="df/d5b/pointer__list_8h"/>
        <childnode refid="113474" relation="include">
        </childnode>
        <childnode refid="113475" relation="include">
        </childnode>
        <childnode refid="113476" relation="include">
        </childnode>
      </node>
      <node id="113477">
        <label>cassert</label>
      </node>
      <node id="113474">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="113476">
        <label>CxxUtils/pointer_list.icc</label>
        <link refid="d1/d99/pointer__list_8icc"/>
        <childnode refid="113477" relation="include">
        </childnode>
        <childnode refid="113478" relation="include">
        </childnode>
      </node>
      <node id="113478">
        <label>algorithm</label>
      </node>
      <node id="113472">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx</label>
        <link refid="pointer_list.cxx"/>
        <childnode refid="113473" relation="include">
        </childnode>
        <childnode refid="113478" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="de/d12/namespaceCxxUtils">CxxUtils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d5b/pointer__list_8h" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">CxxUtils/pointer_list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CxxUtils<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a156f16467a071282081194b293dd43e4" kindref="member" tooltip="Constructor.">pointer_list_base::allocator::allocator</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelt,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nblock,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end_mask,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end_offs)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>:<sp/>m_nelt<sp/>(nelt),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nblock<sp/>(nblock),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_chunks<sp/>(0),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nthis<sp/>(nblock),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nchunks<sp/>(0),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_end_mask<sp/>(end_mask),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_end_offs<sp/>(end_offs)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">pointer_list_base::allocator::~allocator()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>chunks,<sp/>deleting<sp/>each<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>chunk*<sp/>ch<sp/>=<sp/>m_chunks;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>chunk*<sp/>next<sp/>=<sp/>ch-&gt;m_next;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ch);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pointer_list_base::allocator::refill()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>[(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(chunk)<sp/>+<sp/>m_nblock*list_block::size(m_nelt))<sp/>+</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>list_block::size(m_nelt)-1];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>chunk*<sp/>ch<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">chunk*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Align.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ch+1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>pp<sp/>=<sp/>(pp<sp/>+<sp/>m_end_mask)<sp/>&amp;<sp/>~m_end_mask;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>ch-&gt;m_blocks<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">list_block*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(pp);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>ch-&gt;m_next<sp/>=<sp/>m_chunks;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>m_chunks<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>++m_nchunks;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>blocks<sp/>allocated<sp/>so<sp/>far<sp/>from<sp/>this<sp/>chunk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>m_nthis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pointer_list_base::clear()</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_head)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m_insert<sp/>=<sp/>&amp;m_head-&gt;m_data[0];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pointer_list_base::firstblock<sp/>()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>m_head<sp/>=<sp/>getblock();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>m_insert<sp/>=<sp/>&amp;m_head-&gt;m_data[0];</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pointer_list_base::nextblock<sp/>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>may<sp/>be<sp/>one<sp/>already<sp/>allocated.<sp/><sp/>Use<sp/>it<sp/>if<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>list_block*<sp/>newblock<sp/>=<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">list_block*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(*m_insert);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newblock)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>newblock<sp/>=<sp/>getblock();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>*m_insert<sp/>=<sp/>newblock;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>m_insert<sp/>=<sp/>&amp;newblock-&gt;m_data[0];</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">pointer_list_base::list_block*<sp/>pointer_list_base::getblock<sp/>()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>list_block*<sp/>b<sp/>=<sp/>m_pool.allocate();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxndx<sp/>=<sp/>m_pool.nelt();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>only<sp/>the<sp/>last<sp/>element<sp/>has<sp/>the<sp/>sentinel<sp/>bit<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::fill<sp/>(b-&gt;m_data,<sp/>b-&gt;m_data<sp/>+<sp/>maxndx,<sp/>value_type());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>b-&gt;m_data[maxndx]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CxxUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx"/>
  </compounddef>
</doxygen>
