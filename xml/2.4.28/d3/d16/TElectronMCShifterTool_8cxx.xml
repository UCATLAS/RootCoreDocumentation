<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d16/TElectronMCShifterTool_8cxx" kind="file">
    <compoundname>TElectronMCShifterTool.cxx</compoundname>
    <includes refid="d6/dc5/TElectronMCShifterTool_8h" local="yes">ElectronPhotonShowerShapeFudgeTool/TElectronMCShifterTool.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="126768">
        <label>cmath</label>
      </node>
      <node id="126766">
        <label>map</label>
      </node>
      <node id="126767">
        <label>vector</label>
      </node>
      <node id="126765">
        <label>ElectronPhotonShowerShapeFudgeTool/TElectronMCShifterTool.h</label>
        <link refid="d6/dc5/TElectronMCShifterTool_8h"/>
        <childnode refid="126766" relation="include">
        </childnode>
        <childnode refid="126767" relation="include">
        </childnode>
      </node>
      <node id="126769">
        <label>iostream</label>
      </node>
      <node id="126764">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonShowerShapeFudgeTool/Root/TElectronMCShifterTool.cxx</label>
        <link refid="TElectronMCShifterTool.cxx"/>
        <childnode refid="126765" relation="include">
        </childnode>
        <childnode refid="126768" relation="include">
        </childnode>
        <childnode refid="126769" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/dc5/TElectronMCShifterTool_8h" kindref="compound" tooltip="A Tool used to shift MC varibles.">ElectronPhotonShowerShapeFudgeTool/TElectronMCShifterTool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="da/d5e/classTElectronMCShifterTool_1aca8aeb6ec4d97167552215ddabf8f5b1" kindref="member" tooltip="Default constructor.">TElectronMCShifterTool::TElectronMCShifterTool</ref>():</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>Shifts(),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>Widths()</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//Default<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="da/d5e/classTElectronMCShifterTool_1aba9341fc3e670646c7808566c75c974a" kindref="member" tooltip="Default destructor.">TElectronMCShifterTool::~TElectronMCShifterTool</ref>(){}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>Et<sp/>bin<sp/>given<sp/>the<sp/>et<sp/>(MeV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TElectronMCShifterTool::getShifterEtBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{10*GeV,15*GeV,20*GeV,30*GeV,40*GeV,50*GeV};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>Eta<sp/>bin<sp/>[0-8]<sp/>given<sp/>the<sp/>eta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TElectronMCShifterTool::getShifterEtaBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtaBins<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>etaBins[nEtaBins]<sp/>=<sp/>{0.6,0.8,1.15,1.37,1.52,1.81,2.01,2.37,2.47};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etaBin<sp/>=<sp/>0;<sp/>etaBin<sp/>&lt;<sp/>nEtaBins;<sp/>++etaBin){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(eta)<sp/>&lt;<sp/>etaBins[etaBin])</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>etaBin;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shift<sp/>individual<sp/>variables.<sp/>User<sp/>decides<sp/>which<sp/>to<sp/>shift.<sp/>Do<sp/>not<sp/>call<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>you<sp/>do<sp/>not<sp/>wish<sp/>to<sp/>shift.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a4bdaf378d382c32da715f2a31a1247df" kindref="member" tooltip="Shift a variable.">TElectronMCShifterTool::shiftVar</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,<ref refid="d8/d0f/namespaceElePIDNames_1a0eb6db6cbb50f1e3b863408e16c7e205" kindref="member">ElePIDNames::Var</ref><sp/>var,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::DeltaPoverP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::eratio<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>1.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::f1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::f3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::fside<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>getShifterEtBin(eT)*9+getShifterEtaBin(eta);<sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>2d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>+<sp/>Shifts[var].at(ibin_combined);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shift<sp/>variables.<sp/>Shift<sp/>by<sp/>the<sp/>et<sp/>and<sp/>eta<sp/>bin<sp/>numbers.<sp/>Needs<sp/>fixin&apos;.<sp/>Dont<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d5e/classTElectronMCShifterTool_1aef01f5a5467242f2477fcd164be4a339" kindref="member" tooltip="Shift a variable by the eT and eta bins.">TElectronMCShifterTool::shiftVarByBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etaBin,<ref refid="d8/d0f/namespaceElePIDNames_1a0eb6db6cbb50f1e3b863408e16c7e205" kindref="member">ElePIDNames::Var</ref><sp/>var,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::DeltaPoverP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::eratio<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>1.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::f1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::f3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>ElePIDNames::fside<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>val<sp/>==<sp/>0.)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>eTBin*9+etaBin;<sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>2d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>+<sp/>Shifts[var].at(ibin_combined);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shift<sp/>references<sp/>to<sp/>all<sp/>varialbes.<sp/>For<sp/>use<sp/>in<sp/>xAOD<sp/>wrapper.<sp/>Or<sp/>stand<sp/>alone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>thats<sp/>how<sp/>you<sp/>roll.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a52b440d2af25061ea2e987187ae8890e" kindref="member" tooltip="shift all variables as references.">TElectronMCShifterTool::shiftAll</ref>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eT,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>rhad1<sp/><sp/>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>rhad<sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>reta<sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>rphi<sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>weta2<sp/><sp/>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>f1<sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>f3<sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>fside<sp/><sp/>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>ws3<sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>wstot<sp/><sp/>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>eratio<sp/>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>e277<sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>DeltaE<sp/>,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>deltaeta1,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>deltaphiRescaled</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>getShifterEtBin(eT)*9+getShifterEtaBin(eta);<sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>2d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::deltaeta1].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaeta1<sp/>=<sp/>deltaeta1<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::deltaeta1].at(ibin_combined);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::deltaphiRescaled].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaphiRescaled<sp/>=<sp/>deltaphiRescaled<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::deltaphiRescaled].at(ibin_combined);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::rhad].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>rhad<sp/>=<sp/>rhad<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::rhad].at(ibin_combined);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>rhad1<sp/>=<sp/>rhad1<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::rhad].at(ibin_combined);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::f1].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f1<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::f1].at(ibin_combined);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::f3].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>f3<sp/>=<sp/>f3<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::f3].at(ibin_combined);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::weta2].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>weta2<sp/>=<sp/>weta2<sp/>*<sp/><ref refid="da/d5e/classTElectronMCShifterTool_1a57e654fc7ec0d8d2e5982d4707eea557" kindref="member" tooltip="vector to hold the widths to be applied">Widths</ref>[ElePIDNames::Var::weta2].at(ibin_combined);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::f1].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>!=<sp/>0){<sp/>f1<sp/>=<sp/>f1<sp/>+<sp/>Shifts[ElePIDNames::Var::f1].at(ibin_combined);<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::f3].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f3<sp/>!=<sp/>0){<sp/>f3<sp/>=<sp/>f3<sp/>+<sp/>Shifts[ElePIDNames::Var::f3].at(ibin_combined);<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::reta].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>reta<sp/>=<sp/>reta<sp/>+<sp/>Shifts[ElePIDNames::Var::reta].at(ibin_combined);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::weta2].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>weta2<sp/>=<sp/>weta2<sp/>+<sp/>Shifts[ElePIDNames::Var::weta2].at(ibin_combined);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::eratio].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eratio<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>eratio<sp/>!=<sp/>1){<sp/>eratio<sp/>=<sp/>eratio<sp/>+<sp/>Shifts[ElePIDNames::Var::eratio].at(ibin_combined);<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::rhad].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>rhad<sp/>=<sp/>rhad<sp/>+<sp/>Shifts[ElePIDNames::Var::rhad].at(ibin_combined);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>rhad1<sp/>=<sp/>rhad1<sp/>+<sp/>Shifts[ElePIDNames::Var::rhad].at(ibin_combined);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::rphi].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rphi<sp/>!=<sp/>1){<sp/>rphi<sp/>=<sp/>rphi<sp/>+<sp/>Shifts[ElePIDNames::Var::rphi].at(ibin_combined);<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::fside].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fside<sp/>!=<sp/>0){<sp/>fside<sp/>=<sp/>fside<sp/>+<sp/>Shifts[ElePIDNames::Var::fside].at(ibin_combined);<sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::ws3].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>ws3<sp/>=<sp/>ws3<sp/>+<sp/>Shifts[ElePIDNames::Var::ws3].at(ibin_combined);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::wstot].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>wstot<sp/>=<sp/>wstot<sp/>+<sp/>Shifts[ElePIDNames::Var::wstot].at(ibin_combined);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::e277].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>e277<sp/>=<sp/>e277<sp/>+<sp/>Shifts[ElePIDNames::Var::e277].at(ibin_combined);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Shifts[ElePIDNames::Var::DeltaE].size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>DeltaE<sp/>=<sp/>DeltaE<sp/>+<sp/>Shifts[ElePIDNames::Var::DeltaE].at(ibin_combined);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonShowerShapeFudgeTool/Root/TElectronMCShifterTool.cxx"/>
  </compounddef>
</doxygen>
