<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/de9/TrigNavStructure_8cxx" kind="file">
    <compoundname>TrigNavStructure.cxx</compoundname>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes refid="df/d30/TypelessHolder_8h" local="yes">TrigNavStructure/TypelessHolder.h</includes>
    <includes refid="d2/db8/TrigNavStructure_8h" local="yes">TrigNavStructure/TrigNavStructure.h</includes>
    <incdepgraph>
      <node id="328469">
        <label>TrigNavStructure/TrigNavStructure.h</label>
        <link refid="d2/db8/TrigNavStructure_8h_source"/>
        <childnode refid="328465" relation="include">
        </childnode>
        <childnode refid="328470" relation="include">
        </childnode>
        <childnode refid="328472" relation="include">
        </childnode>
        <childnode refid="328463" relation="include">
        </childnode>
        <childnode refid="328473" relation="include">
        </childnode>
      </node>
      <node id="328480">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328476" relation="include">
        </childnode>
        <childnode refid="328481" relation="include">
        </childnode>
        <childnode refid="328482" relation="include">
        </childnode>
      </node>
      <node id="328482">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="328460">
        <label>iterator</label>
      </node>
      <node id="328461">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="328463">
        <label>TrigNavStructure/BaseHolder.h</label>
        <link refid="df/d37/BaseHolder_8h_source"/>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328465" relation="include">
        </childnode>
        <childnode refid="328466" relation="include">
        </childnode>
      </node>
      <node id="328467">
        <label>stdint.h</label>
      </node>
      <node id="328485">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="328478">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328476" relation="include">
        </childnode>
        <childnode refid="328479" relation="include">
        </childnode>
      </node>
      <node id="328476">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="328472">
        <label>TrigNavStructure/TriggerElementFactory.h</label>
        <link refid="d1/dc0/TriggerElementFactory_8h_source"/>
        <childnode refid="328465" relation="include">
        </childnode>
        <childnode refid="328466" relation="include">
        </childnode>
        <childnode refid="328470" relation="include">
        </childnode>
      </node>
      <node id="328464">
        <label>string</label>
      </node>
      <node id="328471">
        <label>map</label>
      </node>
      <node id="328468">
        <label>boost/variant.hpp</label>
      </node>
      <node id="328479">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="328456">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx</label>
        <link refid="TrigNavStructure.cxx"/>
        <childnode refid="328457" relation="include">
        </childnode>
        <childnode refid="328458" relation="include">
        </childnode>
        <childnode refid="328459" relation="include">
        </childnode>
        <childnode refid="328460" relation="include">
        </childnode>
        <childnode refid="328461" relation="include">
        </childnode>
        <childnode refid="328462" relation="include">
        </childnode>
        <childnode refid="328469" relation="include">
        </childnode>
      </node>
      <node id="328466">
        <label>TrigNavStructure/Types.h</label>
        <link refid="d5/d81/TrigNavStructure_2Types_8h_source"/>
        <childnode refid="328467" relation="include">
        </childnode>
        <childnode refid="328468" relation="include">
        </childnode>
      </node>
      <node id="328473">
        <label>TrigNavStructure/TrigHolderStructure.h</label>
        <link refid="df/ded/TrigHolderStructure_8h_source"/>
        <childnode refid="328474" relation="include">
        </childnode>
        <childnode refid="328471" relation="include">
        </childnode>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328468" relation="include">
        </childnode>
        <childnode refid="328475" relation="include">
        </childnode>
        <childnode refid="328466" relation="include">
        </childnode>
        <childnode refid="328463" relation="include">
        </childnode>
        <childnode refid="328470" relation="include">
        </childnode>
      </node>
      <node id="328470">
        <label>TrigNavStructure/TriggerElement.h</label>
        <link refid="d7/d71/TriggerElement_8h_source"/>
        <childnode refid="328471" relation="include">
        </childnode>
        <childnode refid="328465" relation="include">
        </childnode>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328467" relation="include">
        </childnode>
        <childnode refid="328458" relation="include">
        </childnode>
        <childnode refid="328466" relation="include">
        </childnode>
      </node>
      <node id="328484">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="328476" relation="include">
        </childnode>
        <childnode refid="328478" relation="include">
        </childnode>
        <childnode refid="328485" relation="include">
        </childnode>
      </node>
      <node id="328465">
        <label>vector</label>
      </node>
      <node id="328457">
        <label>sstream</label>
      </node>
      <node id="328458">
        <label>iostream</label>
      </node>
      <node id="328462">
        <label>TrigNavStructure/TypelessHolder.h</label>
        <link refid="df/d30/TypelessHolder_8h_source"/>
        <childnode refid="328463" relation="include">
        </childnode>
      </node>
      <node id="328483">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="328477">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328457" relation="include">
        </childnode>
        <childnode refid="328476" relation="include">
        </childnode>
        <childnode refid="328478" relation="include">
        </childnode>
        <childnode refid="328480" relation="include">
        </childnode>
        <childnode refid="328483" relation="include">
        </childnode>
      </node>
      <node id="328481">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="328475">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="328464" relation="include">
        </childnode>
        <childnode refid="328476" relation="include">
        </childnode>
        <childnode refid="328477" relation="include">
        </childnode>
        <childnode refid="328484" relation="include">
        </childnode>
      </node>
      <node id="328459">
        <label>algorithm</label>
      </node>
      <node id="328474">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3/de9/TrigNavStructure_8cxx_1ad15e34a56b4af93d819d86813401f77a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="21" bodyend="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>need<sp/>it<sp/>for<sp/>advance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;boost/cstdint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/TypelessHolder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/TrigNavStructure.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>MLOG(x)<sp/><sp/><sp/>if<sp/>(m_log-&gt;level()&lt;=MSG::x+m_msgLvlOffset)<sp/>*m_log<sp/>&lt;&lt;<sp/>(m_msgLvlOffset+MSG::x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>MLOG(x)<sp/><sp/><sp/>if<sp/>(m_log-&gt;level()&lt;=MSG::x)<sp/>*m_log<sp/>&lt;&lt;<sp/>MSG::x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">HLT;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(<sp/>std::ostream&amp;<sp/>s,<sp/>const<sp/>std::vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>s&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i:v){s<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;}<sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">std::string<sp/>TrigNavStructure::m_unspecifiedLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>TrigNavStructure::m_unspecifiedTE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">TrigNavStructure::~TrigNavStructure()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.reset();</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>METHODS<sp/>FOR<sp/>NAVIGATION<sp/>BUILDING</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">TrigNavStructure::getInitialNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.empty()<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.produce(0);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().front();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">TrigNavStructure::getInitialNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.empty()<sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().front();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a7d9af1a3c226fb3aa776e1d71901b537" kindref="member" tooltip="gets RoI node (attached to initial)">TrigNavStructure::addRoINode</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>initial<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a361e11326ab8f3751ede118edd058196" kindref="member" tooltip="queries if node is an initial one">isInitialNode</ref>(initial)<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.produce(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>seeds,<sp/>seeededBy<sp/>relations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>initial,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>initial-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad3b3893fa11f9103e28a8a0d7f099b74" kindref="member" tooltip="gets all RoI type nodes seeding indirectly this TriggerElement">TrigNavStructure::getRoINodes</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>somenode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>somenode-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delegates<sp/>all<sp/>work<sp/>to<sp/>the<sp/>more<sp/>generic<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a75a745d3b075ae38e18c75eae3f566db" kindref="member" tooltip="adds nodes seeded form the one given as an argument,">TrigNavStructure::addNode</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>seednode,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>list;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>list.push_back(seednode);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a75a745d3b075ae38e18c75eae3f566db" kindref="member" tooltip="adds nodes seeded form the one given as an argument,">addNode</ref>(list,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a75a745d3b075ae38e18c75eae3f566db" kindref="member" tooltip="adds nodes seeded form the one given as an argument,">TrigNavStructure::addNode</ref>(<sp/>std::vector&lt;TriggerElement*<sp/>&gt;&amp;<sp/>seeds,<sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ghost,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nofwd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.produce(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>ghost,<sp/>nofwd);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*<sp/>&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>seeds.begin();<sp/>it<sp/>!=<sp/>seeds.end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relate<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>seednode<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>seednode,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>seednode-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>previous<sp/>Features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;getPreviousFeatures().insert(te-&gt;getPreviousFeatures().end(),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seednode-&gt;getPreviousFeatures().begin(),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seednode-&gt;getPreviousFeatures().end());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>RoI<sp/>relations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">isRoINode</ref>(seednode)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>seednode,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seednode-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>itbegin<sp/>=<sp/>seednode-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>).begin();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>itend<sp/><sp/><sp/>=<sp/>seednode-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>).end();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/>;<sp/>itbegin<sp/>!=<sp/>itend;<sp/>++itbegin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(<sp/>*itbegin,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*itbegin)-&gt;relate(<sp/>te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">TrigNavStructure::getDirectPredecessors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te)<sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">TrigNavStructure::getDirectSuccessors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a667a5a985a39d0e214f07000da6d5e17" kindref="member" tooltip="returns successor of given type beeing seeded from this TE">TrigNavStructure::getSuccessor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>==<sp/>id<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>found(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">TrigNavStructure::getDirectSuccessors</ref>(te).begin()<sp/>;<sp/>it<sp/>!=<sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">TrigNavStructure::getDirectSuccessors</ref>(te).end()<sp/>;<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a667a5a985a39d0e214f07000da6d5e17" kindref="member" tooltip="returns successor of given type beeing seeded from this TE">getSuccessor</ref>(*it,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>PRETTY<sp/>PRINTING</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad53aa4090286e454f093c8388a2bfb0a" kindref="member" tooltip="pretty printing of the navigational structure (heavy)">TrigNavStructure::printASCIIArt</ref><sp/>(std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>initialNode<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">getInitialNode</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>initialNode<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!te<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>te<sp/>=<sp/>initialNode;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te<sp/>==<sp/>initialNode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>all<sp/>TEs<sp/>which<sp/>are<sp/>not<sp/>seeded<sp/>by<sp/>anything<sp/>but<sp/>are<sp/>not<sp/>initial<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;&amp;<sp/>allTEs<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;::const_iterator<sp/>allIt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(allIt<sp/>=<sp/>allTEs.begin();<sp/>allIt<sp/>!=<sp/>allTEs.end();<sp/>++allIt)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*allIt)-&gt;getRelated(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>*allIt<sp/>!=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">getInitialNode</ref>()<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad53aa4090286e454f093c8388a2bfb0a" kindref="member" tooltip="pretty printing of the navigational structure (heavy)">printASCIIArt</ref>(str,<sp/>*allIt);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pretty<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>offset;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;id:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dec<sp/>&lt;&lt;<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;active:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;(te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1aa1014a6dcf9da0fd26301b9ee6d6bb7b" kindref="member" tooltip="get state of the TriggerElement">getActiveState</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;(te-&gt;getErrorState()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ptr:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hex<sp/>&lt;&lt;<sp/>te<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#seeds:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dec<sp/>&lt;&lt;<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>all<sp/>ptrs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>seedIt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>seedIt<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(te).begin();<sp/><sp/>seedIt<sp/>!=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(te).end();<sp/>++seedIt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>*seedIt<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#seededBy:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dec<sp/>&lt;&lt;<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#RoI:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dec<sp/>&lt;&lt;<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>).size()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#features:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>().size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fea:<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fea;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>std::string<sp/>str2;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>str2<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>str<sp/>+=<sp/>str2;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>TriggerElement*<sp/>&gt;::const_iterator<sp/>it<sp/>=<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref><sp/>).begin();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>TriggerElement*<sp/>&gt;::const_iterator<sp/>itEnd<sp/><sp/><sp/>=<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref><sp/>).end();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/>;<sp/>it<sp/>!=<sp/>itEnd;<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad53aa4090286e454f093c8388a2bfb0a" kindref="member" tooltip="pretty printing of the navigational structure (heavy)">printASCIIArt</ref>(str,<sp/>*it,<sp/>offset+1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>str2;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a5250b903e822670b8bfa72c8df2ffb15" kindref="member" tooltip="method serizlizes the navigation structure">TrigNavStructure::serializeTEs</ref>(<sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>output<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<ref refid="d1/da9/structHLTNavDetails_1_1FillSize" kindref="compound"></ref></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="d1/da9/structHLTNavDetails_1_1FillSize" kindref="compound">  ::HLTNavDetails::FillSize</ref><sp/>fs(output);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>fullList<sp/>=<sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>all;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>all.reserve(fullList.size());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>iter<sp/>=<sp/>fullList.begin();<sp/>iter<sp/>!=<sp/>fullList.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>(*iter)-&gt;transient()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all.push_back(<sp/>*iter<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reserve<sp/>space<sp/>(in<sp/>order<sp/>to<sp/>be<sp/>efficient<sp/>it<sp/>should<sp/>not<sp/>be<sp/>resized<sp/>any<sp/>more,<sp/>this<sp/>can<sp/>be<sp/>studied<sp/>probably<sp/>later<sp/>to<sp/>find<sp/>optimum)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>output.reserve(10*all.size());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SERIALZE<sp/>NAVIGATION<sp/>STRUCTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>(measured<sp/>in<sp/>elements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>output.push_back(all.size());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>helper<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::map&lt;TriggerElement*,<sp/>uint16_t&gt;<sp/>keys;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>previous<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>uint16_t<sp/>indexForTe<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>all.begin();<sp/>it<sp/>!=<sp/>all.end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>we<sp/>stream<sp/>pointer<sp/>as<sp/>it<sp/>(this<sp/>is<sp/>already<sp/>an<sp/>unique<sp/>key<sp/>for<sp/>this<sp/>TE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>output.push_back((unsigned<sp/>int)(*it));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>(*it)-&gt;serialize(output,<sp/>keys,<sp/>previous);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>keys[*it]<sp/>=<sp/><sp/>indexForTe;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>indexForTe++;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>DESERIALIZATION</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::deserializeTEs(std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSize)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.reset();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>inputIt<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>payloadSize<sp/>=<sp/>*inputIt++;<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>totalSize<sp/>&lt;<sp/>payloadSize<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>not<sp/>all<sp/>TEs<sp/>were<sp/>recorded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>of<sp/>the<sp/>navigation<sp/>payload<sp/>smaller<sp/>then<sp/>reported<sp/>size<sp/>used<sp/>to<sp/>save<sp/>TEs.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalSize<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>payloadSize<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>*inputIt++;<sp/></highlight><highlight class="comment">//<sp/>size<sp/>in<sp/>terms<sp/>of<sp/>number<sp/>of<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>previous<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>std::map&lt;uint16_t,<sp/>TriggerElement*<sp/>&gt;<sp/>keys;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.produce(TriggerElement::enquireId(inputIt));<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ae25428628c8cc1cecee804fb1ac0c95c" kindref="member" tooltip="deserialization">deserialize</ref>(inputIt,<sp/>keys,<sp/>previous);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>te;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keys<sp/>table<sp/>for<sp/>deserialization<sp/>of<sp/>other<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>keys[i]<sp/>=<sp/>te;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/><sp/>sameRoI<sp/>relations<sp/>(this<sp/>can&apos;t<sp/>be<sp/>done<sp/>by<sp/>TEs<sp/>deserialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>initialNode<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">getInitialNode</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>roiTEit;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>roiTEit<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(initialNode).begin();<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>roiTEit<sp/>!=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(initialNode).end();<sp/>++roiTEit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a7f1d70a41ff519b61641c11af8cca069" kindref="member" tooltip="rebuilds the sameRoIRelation between trigger elements (used internally by deserialize)...">fillSameRoIRelation</ref>((*roiTEit),<sp/>(*roiTEit));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else<sp/>this<sp/>is<sp/>empty<sp/>structure,<sp/>but<sp/>this<sp/>shoudl<sp/>not<sp/>bother<sp/>us<sp/>as<sp/>it<sp/>is<sp/>may<sp/>well<sp/>be<sp/>valid<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a7f1d70a41ff519b61641c11af8cca069" kindref="member" tooltip="rebuilds the sameRoIRelation between trigger elements (used internally by deserialize)...">TrigNavStructure::fillSameRoIRelation</ref><sp/>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>roi,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">isRoINode</ref>(te)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(roi,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>roi-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te)<sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>traverse<sp/>all<sp/>sub<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(te).begin();<sp/>it<sp/>!=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(te).end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a7f1d70a41ff519b61641c11af8cca069" kindref="member" tooltip="rebuilds the sameRoIRelation between trigger elements (used internally by deserialize)...">fillSameRoIRelation</ref>(roi,<sp/>*it);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>QUERIES</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aec41f8e98b6ee31924eafbfde0632424" kindref="member" tooltip="The query returns a vector of all TriggerElements that represent a LVL1 RoI threshold...">TrigNavStructure::getAllRoIThresholdTEs</ref>(<sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;&amp;<sp/>output<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="308"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>initNode<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" kindref="member" tooltip="gets initial node, if node is not there then it is created on fly">getInitialNode</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>first<sp/>layer<sp/>of<sp/>TEs<sp/>representing<sp/>the<sp/>RoIs<sp/>themselves<sp/>(not<sp/>the<sp/>thresholds!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>rois<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(initNode);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>roi_te<sp/>=<sp/>rois.begin();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi_te<sp/>!=<sp/>rois.end();<sp/>++roi_te)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>threshold-like<sp/>TEs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>tes<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">getDirectSuccessors</ref>(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*)(*roi_te)<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>te<sp/>=<sp/>tes.begin();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>te<sp/>!=<sp/>tes.end();<sp/>++te)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(<sp/>*te<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a311c58edad4dbe23f12bec046283c82d" kindref="member" tooltip="The query returning a collection of all TriggerElements if name is given.">TrigNavStructure::getAllOfType</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>te_id_type<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;&amp;<sp/>output,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activeOnly)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;TriggerElement*&gt;<sp/>&gt;<sp/>outputIt(<sp/>output<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>cases:<sp/>only<sp/>active<sp/>ones,<sp/>and<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>can<sp/>consider<sp/>sorting<sp/>the<sp/>TEs<sp/>according<sp/>to<sp/>the<sp/>activation<sp/>status<sp/>and<sp/>then<sp/>assume<sp/>that<sp/>collection<sp/>is<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>functor<sp/>can<sp/>be<sp/>used<sp/>as<sp/>in<sp/>copy_if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(activeOnly)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_copy_if<sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).begin(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).end(),<sp/>outputIt,<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa9dc5ca3156c52ea97de417e270ff030" kindref="member">isNotActive</ref><sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).begin(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).end(),<sp/>outputIt<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1afcabcd4847b6d6fabce69b6e4d8d836c" kindref="member" tooltip="The query returning a collection of all TriggerElements.">TrigNavStructure::getAll</ref><sp/>(<sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;&amp;<sp/>output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activeOnly)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;TriggerElement*&gt;<sp/>&gt;<sp/>outputIt(<sp/>output<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(activeOnly)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_copy_if<sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().begin(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().end(),<sp/>outputIt,<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa9dc5ca3156c52ea97de417e270ff030" kindref="member">isNotActive</ref><sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().begin(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().end(),<sp/>outputIt<sp/>);<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a8a6974de20b8dc486ffb64484dcb3ded" kindref="member" tooltip="The query counting a collection of all TriggerElement of a given type.">TrigNavStructure::countAllOfType</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>te_id_type<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activeOnly<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>activeOnly<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).size()</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>count_if(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).begin(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).end(),<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa9dc5ca3156c52ea97de417e270ff030" kindref="member">isNotActive</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).size();</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>deal<sp/>with<sp/>comples<sp/>TopoTEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>algorithm<sp/>is<sp/>realying<sp/>on<sp/>navigation<sp/>i.e.<sp/>does<sp/>not<sp/>check<sp/>anything<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RoIDescriptor<sp/>etc.<sp/>only<sp/>just<sp/>navigation<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>packs<sp/>all<sp/>the<sp/>RoINodes<sp/>in<sp/>to<sp/>one<sp/>vector<sp/>does<sp/>sort<sp/>on<sp/>it<sp/>and<sp/>the<sp/>unique<sp/>STL<sp/>algos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>size<sp/>of<sp/>temp<sp/>vector<sp/>is<sp/>unchanged<sp/>(all<sp/>were<sp/>unique)<sp/>the<sp/>there<sp/>are<sp/>no<sp/>common<sp/>RoIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>method<sp/>is<sp/>prepared<sp/>to<sp/>get<sp/>RoI<sp/>nodes<sp/>one<sp/>can<sp/>use<sp/>it<sp/>for<sp/>checking<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>TE<sp/>is<sp/>originating<sp/>from<sp/>given<sp/>RoI,<sp/>assume<sp/>noone<sp/>wil<sp/>lquery<sp/>it<sp/>with<sp/>initialNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>future<sp/>on<sp/>can<sp/>revise<sp/>this<sp/>algorithm<sp/>depending<sp/>on<sp/>usecases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>most<sp/>cases<sp/>the<sp/>NON<sp/>Topo<sp/>TEs<sp/>will<sp/>be<sp/>chcked<sp/>(only<sp/>one<sp/>RoI<sp/>for<sp/>each)<sp/>then<sp/>this<sp/>can<sp/>be<sp/>simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>RoI<sp/>nodes<sp/>will<sp/>not<sp/>be<sp/>used<sp/>here<sp/>then<sp/>security<sp/>checks<sp/>fro<sp/>that<sp/>can<sp/>be<sp/>abandonned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>however<sp/>this<sp/>algo<sp/>is<sp/>N<sp/>log(N)<sp/>in<sp/>current<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a778994c352935511fd177632cd6b6679" kindref="member" tooltip="does this 2 share RoI">TrigNavStructure::haveCommonRoI</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>){</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>vecRoINodes;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">isRoINode</ref>(te1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>vecRoINodes.push_back(te1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>&gt;<sp/>outputIt(<sp/>vecRoINodes<sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>).begin(),<sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>).end(),<sp/><sp/>outputIt);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">isRoINode</ref>(te2)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>vecRoINodes.push_back(te2);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>&gt;<sp/>outputIt(<sp/>vecRoINodes<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>).begin(),<sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca5f8d01b226871f6206006321d44286cb" kindref="member" tooltip="equilateral relation of all TEs rooted in one RoI">TriggerElement::sameRoIRelation</ref>).end(),<sp/><sp/>outputIt);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>(by<sp/>pointers,<sp/>it<sp/>is<sp/>OK<sp/>do<sp/>not<sp/>be<sp/>scared)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>sort(vecRoINodes.begin(),<sp/>vecRoINodes.end());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>adjacent_find(vecRoINodes.begin(),<sp/>vecRoINodes.end());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>==<sp/>vecRoINodes.end()<sp/>)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a0c84441607c72a8040dbd9bf39ea75f3" kindref="member" tooltip="inversion of haveCommonRoI">TrigNavStructure::haveDistinctRoI</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a778994c352935511fd177632cd6b6679" kindref="member" tooltip="does this 2 share RoI">haveCommonRoI</ref>(te1,<sp/>te2);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::haveAllCommonRoIs<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>vecRoINodes1<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad3b3893fa11f9103e28a8a0d7f099b74" kindref="member" tooltip="gets all RoI type nodes seeding indirectly this TriggerElement">getRoINodes</ref>(te1);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>vecRoINodes2<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad3b3893fa11f9103e28a8a0d7f099b74" kindref="member" tooltip="gets all RoI type nodes seeding indirectly this TriggerElement">getRoINodes</ref>(te2);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>sort(vecRoINodes1.begin(),<sp/>vecRoINodes1.end());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>sort(vecRoINodes2.begin(),<sp/>vecRoINodes2.end());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vecRoINodes1<sp/>==<sp/>vecRoINodes2;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>similar<sp/>to<sp/>haveCommonRoI<sp/>but<sp/>other<sp/>relation<sp/>is<sp/>queried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>is<sp/>simpler<sp/>(no<sp/>RoI<sp/>special<sp/>case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a03b8982034f27d2215d35f3f24d4eb24" kindref="member" tooltip="checks that there is any common predecessor of two TriggerElements">TrigNavStructure::haveCommonSeed</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>vecRoINodes;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>std::back_insert_iterator&lt;std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>&gt;<sp/>outputIt(<sp/>vecRoINodes<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>copy(te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).begin(),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).end(),<sp/><sp/>outputIt);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>copy(te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).begin(),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).end(),<sp/><sp/>outputIt);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>(by<sp/>pointers,<sp/>it<sp/>is<sp/>OK<sp/>do<sp/>not<sp/>be<sp/>scared)<sp/><sp/>&amp;<sp/>uniq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>sort(vecRoINodes.begin(),<sp/>vecRoINodes.end());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>TriggerElement*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>adjacent_find(vecRoINodes.begin(),<sp/>vecRoINodes.end());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>==<sp/>vecRoINodes.end()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>after<sp/>uniquing<sp/>we<sp/>still<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adb4367f028c31868015cf8889841dfbc" kindref="member">TrigNavStructure::haveDistinctSeed</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a03b8982034f27d2215d35f3f24d4eb24" kindref="member" tooltip="checks that there is any common predecessor of two TriggerElements">haveCommonSeed</ref>(te1,<sp/>te2);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1acb192f49358cf34be527342bdc3acaa3" kindref="member" tooltip="for sorting TriggerElements according to their id">TrigNavStructure::increasingOrderByTEId</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>&lt;<sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::decreasingOrderByTEId<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>&gt;<sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a8a6bb7b8505736eb054b5f5639d48062" kindref="member">TrigNavStructure::hasIdFromTheSet</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>ids<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>find(ids.begin(),<sp/>ids.end(),<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>())<sp/>!=<sp/>ids.end()<sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a361e11326ab8f3751ede118edd058196" kindref="member" tooltip="queries if node is an initial one">TrigNavStructure::isInitialNode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref>).empty()<sp/>and<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">TrigNavStructure::isRoINode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref><sp/>).empty()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>this<sp/>s<sp/>initial<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>whoSeedsMe<sp/>=<sp/>*(te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">TriggerElement::seededByRelation</ref><sp/>).begin());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a361e11326ab8f3751ede118edd058196" kindref="member" tooltip="queries if node is an initial one">isInitialNode</ref>(whoSeedsMe)<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">TrigNavStructure::isTerminalNode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref><sp/>).empty()<sp/><sp/>)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a0a90add052e10055cd4ca644c54f214e" kindref="member" tooltip="check compatibility of 2 navigation structures">TrigNavStructure::isCompatibleTree</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>!=<sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a3b549590aa2392644ce33125f62058c8" kindref="member" tooltip="reset internals. Needed because of TriggerStore (or TriggerFactory ...) can be used...">getId</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>distinc<sp/>Id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te1)<sp/>&amp;&amp;<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te2)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>more<sp/>checks<sp/>needs<sp/>to<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te1)<sp/>||<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" kindref="member" tooltip="queries if node is terminal (no more TriggerElement are seeded by it)">isTerminalNode</ref>(te2)<sp/><sp/>)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>of<sp/>both<sp/>is<sp/>terminal<sp/>while<sp/>another<sp/>is<sp/>not<sp/>(case<sp/>when<sp/>both<sp/>are<sp/>terminal<sp/>is<sp/>covered<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>subchecks<sp/>otherwise<sp/>(both<sp/>nonterminal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>folow<sp/>seeds<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).size()<sp/>!=<sp/><sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).size()<sp/>)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>seededByTe1<sp/>=<sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).begin();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>seededByTe2<sp/>=<sp/>te2-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).begin();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>seededByTe1<sp/>!=<sp/>te1-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">TriggerElement::seedsRelation</ref>).end();<sp/>++seededByTe1,<sp/>++seededByTe2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a0a90add052e10055cd4ca644c54f214e" kindref="member" tooltip="check compatibility of 2 navigation structures">isCompatibleTree</ref>(*seededByTe1,<sp/>*seededByTe2)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>grrr,wrrr<sp/>recursive<sp/>call<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>I<sp/>should<sp/>probably<sp/>check<sp/>as<sp/>well<sp/>the<sp/>Features<sp/>attached<sp/>to<sp/>the<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a4e25f0499260f4b71dddeee555db7ef9" kindref="member" tooltip="propagates deactivation of TE state This finction should be used after Trigger is...">TrigNavStructure::propagateDeactivation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">TrigNavStructure</ref>*<sp/>nav)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>basic<sp/>checks<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>nav-&gt;<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().size()<sp/>&gt;<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().size()<sp/>)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;::const_iterator<sp/>old<sp/>=<sp/>nav-&gt;<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().begin();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>TriggerElement*<sp/>&gt;::iterator<sp/>me<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().begin();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>(*me)-&gt;setActiveState((*old)-&gt;getActiveState());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>++me;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>++old;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>old<sp/>!=<sp/>nav-&gt;<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.listOfProduced().end()<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a854128f34ec3cef89659dbc3ab847be1" kindref="member" tooltip="For Algorithms: return all the possible n-tuples of TE* objects (te0, te1..., ten)...">TrigNavStructure::combine</ref>(std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>types,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;TriggerElement*&gt;<sp/>&gt;&amp;<sp/>output,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxResults,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyActive)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>empty<sp/>anyways,<sp/>but<sp/>just<sp/>in<sp/>case...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;TriggerElement*&gt;<sp/>&gt;<sp/>input;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/>&gt;<sp/><sp/>newIdxs;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;unsigned<sp/>int&gt;::iterator<sp/>type<sp/>=<sp/>types.begin();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>!=<sp/><sp/>types.end();<sp/>++type)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>previous<sp/>iteration&apos;s<sp/>output<sp/>as<sp/>the<sp/>input<sp/>for<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;TriggerElement*&gt;<sp/>&gt;<sp/>input<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/>&gt;<sp/><sp/>currentIdxs<sp/>=<sp/>newIdxs;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>old<sp/>n-tuples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>newIdxs.clear();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-populate<sp/>output<sp/>with<sp/>the<sp/>(n+1)-tuples.<sp/>If<sp/>error<sp/>return<sp/>false<sp/>immediately...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a4513556ade1b9ea77fec6509329266ff" kindref="member" tooltip="Helper method for &amp;quot;combine&amp;quot;: add one &amp;quot;level&amp;quot; of multiplicity...">addOneLevel</ref>(input,<sp/>currentIdxs,<sp/>*type,<sp/>output,<sp/>newIdxs,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxResults,<sp/>onlyActive))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a4513556ade1b9ea77fec6509329266ff" kindref="member" tooltip="Helper method for &amp;quot;combine&amp;quot;: add one &amp;quot;level&amp;quot; of multiplicity...">TrigNavStructure::addOneLevel</ref>(std::vector&lt;<sp/>std::vector&lt;TriggerElement*&gt;<sp/>&gt;&amp;<sp/>currentCombs,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>currentIdxs,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;TriggerElement*&gt;<sp/>&gt;&amp;<sp/>newCombs,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>newIdxs,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxResults,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyActive)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>list<sp/>of<sp/>TEs<sp/>of<sp/>the<sp/>desired<sp/>type<sp/>from<sp/>the<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>newTEs;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a311c58edad4dbe23f12bec046283c82d" kindref="member" tooltip="The query returning a collection of all TriggerElements if name is given.">getAllOfType</ref>(type,<sp/>newTEs,<sp/>onlyActive);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentCombs.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>newTEs.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;<sp/>cbs;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbs.push_back(newTEs[j]);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newCombs.push_back(cbs);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>auxiliary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/>ti;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ti.push_back(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(type,<sp/>j));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newIdxs.push_back(ti);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>existing<sp/>combinations,<sp/>adding<sp/>the<sp/>newTEs<sp/>one<sp/>by<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>currentCombs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>comb<sp/>=<sp/>currentCombs[i];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>auxiliary<sp/>data<sp/>that<sp/>stores<sp/>the<sp/>type<sp/>and<sp/>index<sp/>of<sp/>each<sp/>TE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;index&quot;<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>TE<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>TEs<sp/>returned<sp/>by<sp/>getallOfType<sp/>-<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>assumed<sp/>to<sp/>stay<sp/>the<sp/>same<sp/>between<sp/>calls<sp/>of<sp/>addOneLevel<sp/>within<sp/>the<sp/>same<sp/>combine()<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;&amp;<sp/>ti<sp/>=<sp/>currentIdxs[i];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>auxiliary<sp/>data<sp/>is<sp/>used<sp/>to<sp/>avoid<sp/>double-counting:<sp/>we<sp/>make<sp/>sure<sp/>that<sp/>if<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TEs<sp/>of<sp/>the<sp/>same<sp/>type<sp/>appear<sp/>in<sp/>the<sp/>n-tuple,<sp/>they<sp/>are<sp/>always<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>indices<sp/>in<sp/>the<sp/>getAllOfType<sp/>vector<sp/>increases<sp/>with<sp/>position<sp/>in<sp/>the<sp/>n-tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I.E<sp/>if<sp/>we<sp/>have<sp/>TEs<sp/>(e0,<sp/>m1,<sp/>e1,<sp/>e2)<sp/>and<sp/>e0,<sp/>e1<sp/>and<sp/>e2<sp/>are<sp/>of<sp/>the<sp/>same<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>take<sp/>the<sp/>combination<sp/>such<sp/>that<sp/>e0<sp/>comes<sp/>before<sp/>e1<sp/>and<sp/>e1<sp/>before<sp/>e2<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>getAllOfType<sp/>vector<sp/>of<sp/>&quot;e&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>implement<sp/>this,<sp/>go<sp/>through<sp/>the<sp/>auxiliary<sp/>data<sp/>first<sp/>and<sp/>get<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>last<sp/>TE<sp/>of<sp/>the<sp/>current<sp/>type<sp/>that<sp/>is<sp/>already<sp/>in<sp/>the<sp/>ntuple:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>comb.size();<sp/>j<sp/>&gt;<sp/>0;<sp/>j--)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ti[j<sp/>-<sp/>1].first<sp/>==<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>ti[j<sp/>-<sp/>1].second;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>instead<sp/>of<sp/>considering<sp/>all<sp/>the<sp/>TEs<sp/>in<sp/>newTEs,<sp/>only<sp/>loop<sp/>over<sp/>those<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>&gt;<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>first<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>newTEs.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>=<sp/>newTEs[j];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>if<sp/>the<sp/>TE<sp/>overlaps<sp/>with<sp/>any<sp/>of<sp/>the<sp/>TEs<sp/>in<sp/>the<sp/>existing<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" kindref="member" tooltip="Check overlap between trigger elements (pointer equality or RoI overlap).">overlaps</ref>(te,<sp/>comb))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>new<sp/>TE<sp/>to<sp/>the<sp/>current<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comb.push_back(te);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>current<sp/>combination<sp/>to<sp/>the<sp/>list<sp/>for<sp/>the<sp/>next<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newCombs.push_back(comb);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>current<sp/>combination<sp/>for<sp/>the<sp/>next<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comb.pop_back();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>auxiliary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ti.push_back(std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;(type,<sp/>j));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newIdxs.push_back(ti);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ti.pop_back();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>limit<sp/>is<sp/>exceeded,<sp/>return<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxResults<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>newCombs.size()<sp/>&gt;=<sp/>maxResults)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" kindref="member" tooltip="Check overlap between trigger elements (pointer equality or RoI overlap).">TrigNavStructure::overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>teVec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>te2<sp/>=<sp/>teVec.begin();<sp/>te2<sp/>!=<sp/><sp/>teVec.end();<sp/>++te2)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" kindref="member" tooltip="Check overlap between trigger elements (pointer equality or RoI overlap).">overlaps</ref>(te1,<sp/>*te2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" kindref="member" tooltip="Check overlap between trigger elements (pointer equality or RoI overlap).">TrigNavStructure::overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(te1<sp/>==<sp/>te2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a778994c352935511fd177632cd6b6679" kindref="member" tooltip="does this 2 share RoI">haveCommonRoI</ref>(te1,<sp/>te2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a7ae7547c73e9ffad7870bc3e6d32ba89" kindref="member" tooltip="gets the TEs whose predecessors were used to built a given topological TE">TrigNavStructure::getTopologicallySpannedBy</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>types,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;&amp;<sp/>children,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activeOnly<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">getDirectPredecessors</ref>(te).size()<sp/>!=<sp/>types.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>types.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>child<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a667a5a985a39d0e214f07000da6d5e17" kindref="member" tooltip="returns successor of given type beeing seeded from this TE">getSuccessor</ref>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">getDirectPredecessors</ref>(te)[i],<sp/>types[i]));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(child!=0)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(activeOnly<sp/>&amp;&amp;<sp/>!child-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1aa1014a6dcf9da0fd26301b9ee6d6bb7b" kindref="member" tooltip="get state of the TriggerElement">getActiveState</ref>())<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.clear();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>children.push_back(child);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>children.clear();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a9fb1d4548091143938611eed17b5d278" kindref="member" tooltip="gets all features from the sourceTE and copies a reference (FeatureAccessHelper)...">TrigNavStructure::copyAllFeatures</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>sourceTE,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>destTE)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_features<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>back<sp/>all<sp/>featureAccessHelpers<sp/>from<sp/>source<sp/>to<sp/>destiny<sp/>TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;<sp/>TriggerElement::FeatureAccessHelper<sp/>&gt;::const_iterator<sp/>it<sp/>=<sp/>sourceTE-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>().begin();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>sourceTE-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>().end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>destTE-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1ab8133c4624015a6be64e059174fb512f" kindref="member" tooltip="add helper for new feature">addFeature</ref>(*it);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>n_features++;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_features;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>very<sp/>important<sp/>RESET</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a23f79a5e2e5b4c5e5d0d5523d3465083" kindref="member" tooltip="resets all the navigation, goes to the factory and asks to withdraw all produced...">TrigNavStructure::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;resetting&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" kindref="member" tooltip="factory of trigger elements">m_factory</ref>.reset();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" kindref="member" tooltip="structure for feature holders">m_holderstorage</ref>.reset();</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">sub_index_type<sp/>TrigNavStructure::subType(class_id_type<sp/>clid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>sti_or_label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" kindref="member" tooltip="structure for feature holders">m_holderstorage</ref>.getSubTypeIndex(clid,sti_or_label);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">std::string<sp/>TrigNavStructure::label(class_id_type<sp/>clid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>sti_or_label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" kindref="member" tooltip="structure for feature holders">m_holderstorage</ref>.getLabel(clid,sti_or_label);</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1a39a7a11f23cb6aba63f0e47b63aedc23" kindref="member" tooltip="typeless feature access metod">TrigNavStructure::getFeature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/>class_id_type<sp/>clid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>index_or_label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>TriggerElement::FeatureVec<sp/>features;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>single<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cache_rec<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursively<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getFeatureAccessors(te,<sp/>clid,index_or_label,single,features,cache_rec,<sp/>recursively);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>&amp;&amp;<sp/>!features.empty()){</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>features.front();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref>();<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0a01b892f2170773ba260d1aa990e34" kindref="member" tooltip="recursive search for features the function is similar to the above butif th features...">TrigNavStructure::getFeatureRecursively</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>startTE,<sp/>class_id_type<sp/>clid,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>index_or_label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*&amp;<sp/>sourceTE)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>TriggerElement::FeatureVec<sp/>features;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>single<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cache_rec<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursively<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getFeatureAccessors(startTE,<sp/>clid,index_or_label,single,features,cache_rec,<sp/>recursively,sourceTE);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>&amp;&amp;<sp/>!features.empty()){</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>features.front();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref>();<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::getFeatureAccessorsSingleTE(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/>class_id_type<sp/>clid,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>index_or_label,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>only_single_feature,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriggerElement::FeatureVec&amp;<sp/>features,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_cache_recording,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*&amp;<sp/>source,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>sourcelabel<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_VERBOSE(&quot;getFeatureAccessorsSingleTE:<sp/>looking<sp/>for:&quot;<sp/>&lt;&lt;<sp/>(only_single_feature<sp/>?<sp/>&quot;one<sp/>object&quot;<sp/>:<sp/>&quot;many<sp/>objects&quot;<sp/>)<sp/>&lt;&lt;<sp/>&quot;<sp/>of<sp/>CLID:<sp/>&quot;<sp/>&lt;&lt;<sp/>clid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>label:<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/>&quot;\&quot;&quot;<sp/>&lt;&lt;<sp/>&quot;<sp/>starting<sp/>from<sp/>TE:<sp/>&quot;<sp/>&lt;&lt;<sp/>te-&gt;getId());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//remove<sp/>unused<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>(void)(with_cache_recording);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>().size(),<sp/>it;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>the<sp/>feature<sp/>access<sp/>helper<sp/>in<sp/>order<sp/>depending<sp/>of<sp/>type<sp/>of<sp/>request<sp/>(i.e.<sp/>if<sp/>single<sp/>featyure<sp/>needed<sp/>then<sp/>loop<sp/>from<sp/>back,<sp/>if<sp/>all<sp/>then<sp/>loop<sp/>from<sp/>the<sp/>front)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>(<sp/>only_single_feature<sp/>?<sp/>size-1<sp/>:<sp/>0<sp/>);<sp/>it<sp/>!=<sp/>(only_single_feature<sp/>?<sp/>-1<sp/>:<sp/>size<sp/>);<sp/>only_single_feature<sp/>?<sp/>it--:<sp/>it++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fea<sp/>=<sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1abd88d0d19121eda7603e842a47968d62" kindref="member" tooltip="returns all features which ara attached to this TE">getFeatureAccessHelpers</ref>().at(it);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ATH_MSG_VERBOSE(&quot;getFeatureAccessors:<sp/>in<sp/>a<sp/>loop<sp/>over<sp/>FeatureAccessHelpers<sp/>got<sp/>ObjectIndex<sp/>&quot;<sp/>&lt;&lt;<sp/>fea);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matchFeature(fea,clid,index_or_label)){</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sourcelabel<sp/>=<sp/>label(clid,fea.getIndex().subTypeIndex());</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>te;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>features.push_back(fea);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(&quot;getFeatureAccessors:<sp/>matching<sp/>feature<sp/>found<sp/>in<sp/>te:<sp/>&quot;<sp/>&lt;&lt;<sp/>*te<sp/>&lt;&lt;<sp/>&quot;<sp/>index:<sp/>&quot;<sp/>&lt;&lt;<sp/>fea);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>the<sp/>ending<sp/>(depends<sp/>on<sp/>the<sp/>&quot;single&quot;<sp/>flag)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>only_single_feature<sp/>)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>loop<sp/>over<sp/>feature<sp/>access<sp/>helpers<sp/>of<sp/>this<sp/>TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::getFeatureAccessors(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/>class_id_type<sp/>clid,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>index_or_label,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>only_single_feature,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriggerElement::FeatureVec&amp;<sp/>features,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_cache_recording,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>travel_backward_recursively,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*&amp;<sp/>source,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>sourcelabel<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>singleTEstatus<sp/>=<sp/>getFeatureAccessorsSingleTE(te,clid,index_or_label,only_single_feature,features,with_cache_recording,source,sourcelabel);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!singleTEstatus){</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MLOG(WARNING)<sp/>&lt;&lt;<sp/>&quot;getFeatureAccessorsSingleTE()<sp/>returned<sp/>false&quot;<sp/>&lt;&lt;<sp/>endreq;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>travel_backward_recursively<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>digging<sp/>deeper<sp/>if<sp/>this<sp/>is<sp/>an<sp/>RoI<sp/>node<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" kindref="member" tooltip="queries if node is an RoI type one">isRoINode</ref>(te)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>if<sp/>a<sp/>feature(s)<sp/>is/are<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>features.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recurse<sp/>deeper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursion_status<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>predecessor:<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">getDirectPredecessors</ref>(te)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>TriggerElement::FeatureVec<sp/>features_in_branch;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>recursion_status<sp/>=<sp/>recursion_status<sp/>&amp;&amp;<sp/>getFeatureAccessors(<sp/>predecessor,<sp/>clid,<sp/>index_or_label,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only_single_feature,<sp/>features_in_branch,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with_cache_recording,<sp/>travel_backward_recursively,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source,<sp/>sourcelabel);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>features.insert(features.end(),<sp/><sp/>features_in_branch.begin(),<sp/>features_in_branch.end());</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>only_single_feature<sp/>&amp;&amp;<sp/><sp/>(<sp/>features.size()<sp/>&gt;<sp/>1<sp/>||<sp/>recursion_status<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MLOG(DEBUG)<sp/>&lt;&lt;<sp/>&quot;getFeatureAccessors:<sp/>looking<sp/>for<sp/>object<sp/>of<sp/>CLID:<sp/>&quot;<sp/>&lt;&lt;<sp/>clid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>label:<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/>&quot;\&quot;&quot;<sp/>&lt;&lt;<sp/>&quot;<sp/>found<sp/>several<sp/>objects<sp/>matching<sp/>criteria<sp/>while<sp/>can<sp/>only<sp/>return<sp/>back<sp/>one,<sp/>this<sp/>is<sp/>ambiguous&quot;<sp/>&lt;&lt;<sp/>endreq;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">getDirectPredecessors</ref>(te).size()<sp/>&gt;<sp/>1<sp/>)<sp/></highlight><highlight class="comment">//<sp/>mark<sp/>bifurcation<sp/>point<sp/>as<sp/>to<sp/>where<sp/>one<sp/>can<sp/>start<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>te;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrigNavStructure::matchFeature(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref>&amp;<sp/>fea,<sp/>class_id_type<sp/>clid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_or_label_type&amp;<sp/>index_or_label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>always<sp/>require<sp/>the<sp/>CLID<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fea.<ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper_1ac7c82a5161490126e1b08b334cc360f6" kindref="member" tooltip="Class ID of object.">getCLID</ref>()<sp/>!=<sp/>clid)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_or_label.which()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subtype<sp/>index<sp/>case:<sp/>if<sp/>argument<sp/>is<sp/>invalid_sub_index<sp/>we<sp/>always<sp/>match,<sp/>else<sp/>require<sp/>exact<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>boost::get&lt;sub_index_type&gt;(index_or_label)<sp/>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>invalid_sub_index<sp/>||<sp/>index<sp/>==<sp/>fea.<ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper_1a0913495e5649fb557666ab8a460aa839" kindref="member" tooltip="index in the external ojects array">getIndex</ref>().subTypeIndex());</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_or_label.which()<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//label<sp/>case:<sp/>if<sp/>argument<sp/>is<sp/>&quot;&quot;<sp/>we<sp/>always<sp/>match,<sp/>else<sp/>require<sp/>exact<sp/>match<sp/>(via)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>label<sp/>=<sp/>boost::get&lt;std::string&gt;(index_or_label);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(label.empty()){</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>label<sp/>=<sp/>(label<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>label;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sub<sp/>=<sp/>subType(clid,label);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub<sp/>==<sp/>invalid_sub_index)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchFeature(fea,clid,sub);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d7d/classHLT_1_1BaseHolder" kindref="compound">BaseHolder</ref>*<sp/>TrigNavStructure::getHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound" tooltip="the FeatureAccessHelper is a class used to keep track of features attached to this...">TriggerElement::FeatureAccessHelper</ref>&amp;<sp/>fea)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" kindref="member" tooltip="structure for feature holders">m_holderstorage</ref>.getHolderForFeature(fea);</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx"/>
  </compounddef>
</doxygen>
