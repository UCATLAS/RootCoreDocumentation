<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d7c/classConstDataList" kind="class" prot="public">
    <compoundname>ConstDataList</compoundname>
    <includes refid="db/ded/ConstDataList_8h" local="no">ConstDataList.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>DL</declname>
        <defname>DL</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Private helpers.</header>
      <description><para><anchor id="_1amgrpe5a69a01ae6824427c974a9ce34af1a7"/> </para></description>
      <memberdef kind="friend" id="d3/d7c/classConstDataList_1a3ecef4b58caf361cf45043385e92a021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DataModel_detail::ElementProxy&lt; ConstDataList &gt;</definition>
        <argsstring></argsstring>
        <name>DataModel_detail::ElementProxy&lt; ConstDataList &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="592" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d3/d7c/classConstDataList_1a1119a539ef95e66a83ed73e65ce4acb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void test2_assignelement1</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="593" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3170" bodyend="3181"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a9cab0a21f18b658b037eea72cd026e52" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::assignElement</definition>
        <argsstring>(typename BaseContainer::iterator pos, value_type newElem)</argsstring>
        <name>assignElement</name>
        <param>
          <type>typename BaseContainer::iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref></type>
          <declname>newElem</declname>
        </param>
        <briefdescription>
<para>Handle element assignment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in the container to assign. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to assign.</para></parameterdescription>
</parameteritem>
</parameterlist>
The old element is freed if this container owns elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="603" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="667" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ab48e73b3a4380f0dfc636b94161ef40c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::assignBaseElement</definition>
        <argsstring>(typename BaseContainer::iterator pos, typename BaseContainer::value_type newElem)</argsstring>
        <name>assignBaseElement</name>
        <param>
          <type>typename BaseContainer::iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>typename BaseContainer::value_type</type>
          <declname>newElem</declname>
        </param>
        <briefdescription>
<para>Handle element assignment from a base pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in the container to assign. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to assign.</para></parameterdescription>
</parameteritem>
</parameterlist>
The old element is freed if this container owns elements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in the container to assign. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to assign.</para></parameterdescription>
</parameteritem>
</parameterlist>
The old element is freed if this container owns elements. Auxiliary data are copied if appropriate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="615" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="685" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1abcabcc64578b9ac35ddd4e8f72f934e7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::to_my_iterator</definition>
        <argsstring>(typename DL::iterator it)</argsstring>
        <name>to_my_iterator</name>
        <param>
          <type>typename DL::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Convert an iterator of the base <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> to a <computeroutput><ref refid="d3/d7c/classConstDataList_1a974b2c9af8f296c8ce652ed4760d6f35" kindref="member">ConstDataList::iterator</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>The base <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> iterator to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="632" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="714" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1abf74fa2467875e701a44da65888d8488" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">ElementProxy</ref></type>
        <definition>ConstDataList&lt; DL &gt;::ElementProxy ConstDataList&lt; DL &gt;::to_element_proxy</definition>
        <argsstring>(typename BaseContainer::iterator i)</argsstring>
        <name>to_element_proxy</name>
        <param>
          <type>typename BaseContainer::iterator</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Convert an iterator of the base <computeroutput>vector</computeroutput> an <computeroutput>ElementProxy</computeroutput> for the <computeroutput><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>The base <computeroutput>vector</computeroutput> iterator to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="640" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="728" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ad1c33e64cc816ff08924314c15cb946a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DL::iterator</type>
        <definition>DL::iterator ConstDataList&lt; DL &gt;::to_base_iterator</definition>
        <argsstring>(iterator it)</argsstring>
        <name>to_base_iterator</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Convert a <computeroutput><ref refid="de/db1/classConstDataVector_1abf241232ecaa158cfe092713d2699d5f" kindref="member">ConstDataVector::iterator</ref></computeroutput> to an iterator of the base <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="de/db1/classConstDataVector_1abf241232ecaa158cfe092713d2699d5f" kindref="member">ConstDataVector::iterator</ref></computeroutput> to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="624" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="700" bodyend="703"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors, destructors, assignment.</header>
      <description><para><anchor id="_1amgrpb39bb9cb1bc18cddc74e7f363d4e2167"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1afb1e74a8172dcb25956590ce0eacb962" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConstDataList&lt; DL &gt;::ConstDataList</definition>
        <argsstring>(SG::OwnershipPolicy ownPolicy=SG::OWN_ELEMENTS)</argsstring>
        <name>ConstDataList</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::OWN_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements. To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="149" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a39b996815adf60a0a13cfb3751f3dd4c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConstDataList&lt; DL &gt;::ConstDataList</definition>
        <argsstring>(size_type n, SG::OwnershipPolicy ownPolicy=SG::OWN_ELEMENTS)</argsstring>
        <name>ConstDataList</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::OWN_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Sized constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that unlike the standard list constructor, you can&apos;t specify an initial value here. The container will be initialized with 0&apos;s.</para><para>By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements. To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="164" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ac87c178f5612029de23e929e1dab7954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ConstDataList&lt; DL &gt;::ConstDataList</definition>
        <argsstring>(InputIterator first, InputIterator last, SG::OwnershipPolicy ownPolicy=SG::VIEW_ELEMENTS)</argsstring>
        <name>ConstDataList</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member">SG::OwnershipPolicy</ref></type>
          <declname>ownPolicy</declname>
          <defval>SG::VIEW_ELEMENTS</defval>
        </param>
        <briefdescription>
<para>Constructor from iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the new container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the new container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ownPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The ownership mode for the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
By default, a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will own its elements (and take ownership of the pointers passed to this constructor). To avoid this, pass <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> for <emphasis>ownPolicy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="179" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ad9251f196b1aebb16e047d7280b1823c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
        <definition>ConstDataList&lt; DL &gt; &amp; ConstDataList&lt; DL &gt;::operator=</definition>
        <argsstring>(const ConstDataList &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref> from which to assign. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This object.</para></simplesect>
This is a `shallow&apos; copy; after the completion of this, the <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will not own its elements. Any elements it owned prior to this call will be released.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ac0c08c41c7ebc0b2c523523e85e7c3a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::assign</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>assign</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Assign from iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Any existing owned elements will be released. The <computeroutput>DataList&apos;s</computeroutput> ownership policy determines whether it will take ownership of the new elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="207" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="109" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Element access.</header>
      <description><para><anchor id="_1amgrp03f08060dbcda9a05f3dd6a98ff9f981"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1acfdf1abac9c271dedf043a5921b09449" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">ElementProxy</ref></type>
        <definition>ConstDataList&lt; DL &gt;::ElementProxy ConstDataList&lt; DL &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>Access the first element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the first element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a proxy object rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="224" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a32b3ec7e4346932f507bcd8a94bb7939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">ElementProxy</ref></type>
        <definition>ConstDataList&lt; DL &gt;::ElementProxy ConstDataList&lt; DL &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Access the last element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the last element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a proxy object rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="235" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="148" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterator creation.</header>
      <description><para><anchor id="_1amgrp04fea93d7622927e954392dcd5690674"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a1edb94e7a0cdb6c5be73eced7327537e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return an <computeroutput>iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return an <computeroutput>iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="265" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a16dc5885f7ce298aa50957e33b33cb7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" kindref="member">reverse_iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::reverse_iterator ConstDataList&lt; DL &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a <computeroutput>reverse_iterator</computeroutput> pointing past the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a69f1437665f9f391e66741f7e6e3df2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" kindref="member">reverse_iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::reverse_iterator ConstDataList&lt; DL &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a <computeroutput>reverse_iterator</computeroutput> pointing at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>reverse_iterator</computeroutput>.</para></simplesect>
Note that dereferencing the iterator will yield a proxy rather than a reference; the proxy will handle deleting an owned element if it&apos;s assigned to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="289" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="225" bodyend="228"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Insertion operations.</header>
      <description><para><anchor id="_1amgrpc4ff45e64b9f41cc82677be76808116c"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1aeea2c88b84cbd273e03fb618b50bca73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::push_front</definition>
        <argsstring>(value_type pElem)</argsstring>
        <name>push_front</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add an element at the beginning of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="308" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::push_back</definition>
        <argsstring>(value_type pElem)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add an element to the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="321" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a9fb7c36dbe43b9b18df9f0c01b72b710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::insert</definition>
        <argsstring>(iterator position, value_type pElem)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref></type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
<para>Add a new element to the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator before which the element will be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pElem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator that points to the inserted data.</para></simplesect>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="336" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a797d5d530929d4de6213cddfaf647129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::insert</definition>
        <argsstring>(iterator position, InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Add a group of new elements to the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator before which the element will be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the range to put in the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the range to put in the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
The container&apos;s ownership policy will determine if it takes ownership of the new element.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="352" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="311" bodyend="318"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Erasure operations.</header>
      <description><para><anchor id="_1amgrp5dd35913d37b538bffc58eac1d7946e3"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1aabafc4d3f83f205d63dab57c10792fbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::erase</definition>
        <argsstring>(iterator position)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Remove element at a given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the next element (or <computeroutput><ref refid="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" kindref="member">end()</ref></computeroutput>).</para></simplesect>
If the container owns its elements, then the pointed-to element will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="369" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1af61ef0b84f1177c6d81e7face9e52fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>ConstDataList&lt; DL &gt;::iterator ConstDataList&lt; DL &gt;::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Remove a range of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first element to be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing one past the last element to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the element pointed to by <emphasis>last</emphasis> prior to erasing (or <computeroutput><ref refid="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" kindref="member">end()</ref></computeroutput>).</para></simplesect>
If the container owns its elements, then the removed elements will be deleted. Any duplicates will be removed in this process, but don&apos;t rely on this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="383" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="354" bodyend="359"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Swap and sort.</header>
      <description><para><anchor id="_1amgrp48740572230bf871bbbe3f4450b8e26c"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a655f54075595ed86221b36b68a19d567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::swap</definition>
        <argsstring>(ConstDataList &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap this collection with another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection with which to swap.</para></parameterdescription>
</parameteritem>
</parameterlist>
Ownership is swapped along with the collection content.</para><para>Note: this method may only be called using the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. The <emphasis>rhs</emphasis> must also be referenced using the most-derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="402" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a12cfc85b3bf78b3e09b1c42646a722f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::iter_swap</definition>
        <argsstring>(iterator a, iterator b)</argsstring>
        <name>iter_swap</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Swap the referents of two <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first iterator for the swap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second iterator for the swap/ </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="410" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="390" bodyend="394"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>List operations.</header>
      <description><para><anchor id="_1amgrp543a41302df2bfd847db57ca041c7b35"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a492b529115f5d654c41943b178d3ae57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::splice</definition>
        <argsstring>(iterator position, ConstDataList &amp;l)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Insert contents of another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list.</para></parameterdescription>
</parameteritem>
</parameterlist>
The elements of <emphasis>l</emphasis> are inserted in constant time in front of the element referenced by <emphasis>position</emphasis>. <emphasis>l</emphasis> becomes an empty list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="428" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1aad90d48e222ba238ae112c88a1ab8c21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::splice</definition>
        <argsstring>(iterator position, ConstDataList &amp;l, iterator i)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Insert element from another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to move.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes the element in list <emphasis>l</emphasis> referenced by <emphasis>i</emphasis> and inserts it into the current list before <emphasis>position</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="440" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a127d3469b64aa1f0566cb50851d1b954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::splice</definition>
        <argsstring>(iterator position, ConstDataList &amp;l, iterator first, iterator last)</argsstring>
        <name>splice</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Insert range from another list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the element to insert before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the start of range in <emphasis>l</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator referencing the end of range in <emphasis>l</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes elements in the range [<emphasis>first</emphasis>, <emphasis>last</emphasis> ) and inserts them before <emphasis>position</emphasis> in constant time.</para><para>Undefined if <emphasis>position</emphasis> is in [<emphasis>first</emphasis>, <emphasis>last</emphasis> ). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="457" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="467" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a73653a365812f88e4ee5cd6eef1941c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::remove</definition>
        <argsstring>(const value_type &amp;value)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Remove all elements equal to value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
Removes every element in the list equal to <emphasis>value</emphasis>. Remaining elements stay in list order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="467" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1aae112b3acc86d27dfd222bd9ada73c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::merge</definition>
        <argsstring>(ConstDataList &amp;l)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Merge sorted lists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Sorted list to merge.</para></parameterdescription>
</parameteritem>
</parameterlist>
Assumes that both <emphasis>l</emphasis> and this list are sorted according to <ref refid="d3/d7c/classConstDataList_1a750bfd459a188b4a9ec969dc840d0af6" kindref="member">operator&lt;()</ref>. Merges elements of <emphasis>l</emphasis> into this list in sorted order, leaving <emphasis>l</emphasis> empty when complete. Elements in this list precede elements in <emphasis>l</emphasis> that are equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="479" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="491" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a9d8161a3ce773260f6ad01da1c4dd583" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename COMPARE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::merge</definition>
        <argsstring>(ConstDataList &amp;l, COMPARE predicate)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>COMPARE</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Merge sorted lists according to comparison function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Sorted list to merge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function defining a sort order (which must be strictly weak ordering).</para></parameterdescription>
</parameteritem>
</parameterlist>
Assumes that both <emphasis>l</emphasis> and this <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> are sorted according to COMPARE predicate. Merges elements of <emphasis>l</emphasis> into this list in sorted order, leaving <emphasis>l</emphasis> empty when complete. Elements in this list precede elements in <emphasis>x</emphasis> that are equivalent according to StrictWeakOrdering(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="495" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="513" bodyend="516"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non-standard operations.</header>
      <description><para><anchor id="_1amgrp67b3645f65a6afd377578740fa3b4ed2"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a439d1898975457653b5e0e07f83d8de9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::swapElement</definition>
        <argsstring>(iterator pos, value_type newElem, reference oldElem)</argsstring>
        <name>swapElement</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref></type>
          <declname>newElem</declname>
        </param>
        <param>
          <type>reference</type>
          <declname>oldElem</declname>
        </param>
        <briefdescription>
<para>Swap one element out of the container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The element in the container to swap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>New element to put in the container. May be 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldElem</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to receive the element removed from the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Reference <emphasis>oldElem</emphasis> is initialized with element <emphasis>pos</emphasis> of the collection (no bounds checking). Then element <emphasis>index</emphasis> is set to <computeroutput>newElem</computeroutput>. If the collection owns its elements, then it will take ownership of <emphasis>newElem</emphasis> and release (without deleting) the element returned through <emphasis>oldElem</emphasis>.</para><para>Note: this method may only be called using the most derived <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> in the hierarchy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="522" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="542" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a5ecbdc336fe36cffafe71d3f54735901" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DL *</type>
        <definition>const DL * ConstDataList&lt; DL &gt;::asDataList</definition>
        <argsstring>() const </argsstring>
        <name>asDataList</name>
        <briefdescription>
<para>Return a pointer to this object, as a const <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Return a pointer to this object, as a const <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="528" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ad8df5a10d717e6ed3e686581fb8f2bf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConstDataList&lt; DL &gt;::resortAux</definition>
        <argsstring>(iterator beg, iterator end)</argsstring>
        <name>resortAux</name>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Reset indices / reorder aux data after elements have been permuted. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the range of elements to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the range of elements to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a no-op for <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="538" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="573" bodyend="575"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Relational operators.</header>
      <description><para><anchor id="_1amgrp2dfb2a28709c2d057d20a41ab65c066f"/> </para></description>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a750bfd459a188b4a9ec969dc840d0af6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator&lt;</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List ordering relation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff <emphasis>x</emphasis> is lexicographically less than <emphasis>y</emphasis>.</para></simplesect>
This is a total ordering relation. It is linear in the size of the lists. Comparisons are done on the pointer values of the elements.</para><para>See <computeroutput>std::lexicographical_compare()</computeroutput> for how the determination is made. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="558" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="594" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ac38ddeff504d2d2581cbfa6ec3cfb8cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator&gt;</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="561" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="603" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1ad92f2e272b4d06b801f66474b5e33c6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator&lt;=</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="564" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="612" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a9d17dec912b0e58ad3671df9f405bdb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator&gt;=</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="567" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1affdee6e680364931593625b26f90ab6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator==</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List equality comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff the size and elements of the lists are equal.</para></simplesect>
This is an equivalence relation. It is linear in the size of the lists. Lists are considered equivalent if their sizes are equal, and if corresponding elements compare equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="579" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="d3/d7c/classConstDataList_1a4a7a9341453b16d3391a69eb51a22595" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstDataList&lt; DL &gt;::operator!=</definition>
        <argsstring>(const ConstDataList &amp;b) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator==. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="582" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="648" bodyend="651"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" prot="public" static="no">
        <type>DL::size_type</type>
        <definition>typedef DL::size_type ConstDataList&lt; DL &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Basic types, forwarded from the base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a9036c65257aed5b63c02463ac37df9a3" prot="public" static="no">
        <type>DL::difference_type</type>
        <definition>typedef DL::difference_type ConstDataList&lt; DL &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1add936ac8711961c765219ab9dbb908d1" prot="public" static="no">
        <type>DL::allocator_type</type>
        <definition>typedef DL::allocator_type ConstDataList&lt; DL &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a19cbcdf7e7675e8d1bdd1d03f5496090" prot="public" static="no">
        <type>DL::base_value_type</type>
        <definition>typedef DL::base_value_type ConstDataList&lt; DL &gt;::base_value_type</definition>
        <argsstring></argsstring>
        <name>base_value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a87f4420e82087b7319835a299b08608b" prot="public" static="no">
        <type>DL::BaseContainer</type>
        <definition>typedef DL::BaseContainer ConstDataList&lt; DL &gt;::BaseContainer</definition>
        <argsstring></argsstring>
        <name>BaseContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a2070c5ac5732290c26c7e1642009a650" prot="public" static="no">
        <type>DL::DVL_BASE</type>
        <definition>typedef DL::DVL_BASE ConstDataList&lt; DL &gt;::DVL_BASE</definition>
        <argsstring></argsstring>
        <name>DVL_BASE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a3717be48197bc3ffebba314e992b5b31" prot="public" static="no">
        <type>DL::const_iterator</type>
        <definition>typedef DL::const_iterator ConstDataList&lt; DL &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a38cbe58d11c3596ab32a19f68bde3bc2" prot="public" static="no">
        <type>DL::const_reverse_iterator</type>
        <definition>typedef DL::const_reverse_iterator ConstDataList&lt; DL &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" prot="public" static="no">
        <type>DL::const_value_type</type>
        <definition>typedef DL::const_value_type ConstDataList&lt; DL &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These types get modified so that the base&apos;s <computeroutput>const_value_type</computeroutput> becomes our <computeroutput>value_type</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a206ca26e2f53a19d358a7bd714b17a48" prot="public" static="no">
        <type>DL::const_value_type</type>
        <definition>typedef DL::const_value_type ConstDataList&lt; DL &gt;::const_value_type</definition>
        <argsstring></argsstring>
        <name>const_value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a5c07288f349a4f76458835c1c6d9aaa0" prot="public" static="no">
        <type>DL::const_value_type &amp;</type>
        <definition>typedef DL::const_value_type&amp; ConstDataList&lt; DL &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a52fc77360f68de84b59d8958a653c335" prot="public" static="no">
        <type>DL::const_value_type const &amp;</type>
        <definition>typedef DL::const_value_type const&amp; ConstDataList&lt; DL &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a66a3c13c39e02d953109b285b2baa9ab" prot="public" static="no">
        <type>DL::const_value_type *</type>
        <definition>typedef DL::const_value_type* ConstDataList&lt; DL &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="91" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a5a558a661883d6fc7dafd205322f7647" prot="public" static="no">
        <type>DL::const_value_type const *</type>
        <definition>typedef DL::const_value_type const* ConstDataList&lt; DL &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1af84acc7a30d354ac6bd80f1f65d1431e" prot="public" static="no">
        <type><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound">DataModel_detail::ElementProxy</ref>&lt; <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &gt;</type>
        <definition>typedef DataModel_detail::ElementProxy&lt;ConstDataList&gt; ConstDataList&lt; DL &gt;::ElementProxy</definition>
        <argsstring></argsstring>
        <name>ElementProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This type is used to proxy lvalue accesses to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> elements, in order to handle ownership. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="99" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a974b2c9af8f296c8ce652ed4760d6f35" prot="public" static="no">
        <type><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">DataModel_detail::iterator</ref>&lt; <ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref> &gt;</type>
        <definition>typedef DataModel_detail::iterator&lt;ConstDataList&gt; ConstDataList&lt; DL &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>The iterator for this type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="102" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; ConstDataList&lt; DL &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <computeroutput>reverse_iterator</computeroutput>. Note that lvalue references here will yield an <computeroutput>ElementProxy</computeroutput>, not a <computeroutput>reference</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d3/d7c/classConstDataList_1a2800438170494904c77ffedf0168a180" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool ConstDataList&lt; DL &gt;::has_virtual</definition>
        <argsstring></argsstring>
        <name>has_virtual</name>
        <initializer> DL::has_virtual</initializer>
        <briefdescription>
<para>This needs to be forwarded from the base as well. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> adapter that acts like it holds const pointers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" bodystart="71" bodyend="644"/>
    <listofallmembers>
      <member refid="d3/d7c/classConstDataList_1add936ac8711961c765219ab9dbb908d1" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>allocator_type</name></member>
      <member refid="d3/d7c/classConstDataList_1a5ecbdc336fe36cffafe71d3f54735901" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>asDataList</name></member>
      <member refid="d3/d7c/classConstDataList_1ac0c08c41c7ebc0b2c523523e85e7c3a2" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>assign</name></member>
      <member refid="d3/d7c/classConstDataList_1ab48e73b3a4380f0dfc636b94161ef40c" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>assignBaseElement</name></member>
      <member refid="d3/d7c/classConstDataList_1a9cab0a21f18b658b037eea72cd026e52" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>assignElement</name></member>
      <member refid="d3/d7c/classConstDataList_1a32b3ec7e4346932f507bcd8a94bb7939" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>back</name></member>
      <member refid="d3/d7c/classConstDataList_1a19cbcdf7e7675e8d1bdd1d03f5496090" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>base_value_type</name></member>
      <member refid="d3/d7c/classConstDataList_1a87f4420e82087b7319835a299b08608b" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>BaseContainer</name></member>
      <member refid="d3/d7c/classConstDataList_1a1edb94e7a0cdb6c5be73eced7327537e" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>begin</name></member>
      <member refid="d3/d7c/classConstDataList_1a3717be48197bc3ffebba314e992b5b31" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>const_iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1a5a558a661883d6fc7dafd205322f7647" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>const_pointer</name></member>
      <member refid="d3/d7c/classConstDataList_1a52fc77360f68de84b59d8958a653c335" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>const_reference</name></member>
      <member refid="d3/d7c/classConstDataList_1a38cbe58d11c3596ab32a19f68bde3bc2" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>const_reverse_iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1a206ca26e2f53a19d358a7bd714b17a48" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>const_value_type</name></member>
      <member refid="d3/d7c/classConstDataList_1afb1e74a8172dcb25956590ce0eacb962" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>ConstDataList</name></member>
      <member refid="d3/d7c/classConstDataList_1a39b996815adf60a0a13cfb3751f3dd4c" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>ConstDataList</name></member>
      <member refid="d3/d7c/classConstDataList_1ac87c178f5612029de23e929e1dab7954" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>ConstDataList</name></member>
      <member refid="d3/d7c/classConstDataList_1a3ecef4b58caf361cf45043385e92a021" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>DataModel_detail::ElementProxy&lt; ConstDataList &gt;</name></member>
      <member refid="d3/d7c/classConstDataList_1a9036c65257aed5b63c02463ac37df9a3" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>difference_type</name></member>
      <member refid="d3/d7c/classConstDataList_1a2070c5ac5732290c26c7e1642009a650" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>DVL_BASE</name></member>
      <member refid="d3/d7c/classConstDataList_1af84acc7a30d354ac6bd80f1f65d1431e" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>ElementProxy</name></member>
      <member refid="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>end</name></member>
      <member refid="d3/d7c/classConstDataList_1aabafc4d3f83f205d63dab57c10792fbe" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>erase</name></member>
      <member refid="d3/d7c/classConstDataList_1af61ef0b84f1177c6d81e7face9e52fe7" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>erase</name></member>
      <member refid="d3/d7c/classConstDataList_1acfdf1abac9c271dedf043a5921b09449" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>front</name></member>
      <member refid="d3/d7c/classConstDataList_1a2800438170494904c77ffedf0168a180" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>has_virtual</name></member>
      <member refid="d3/d7c/classConstDataList_1a9fb7c36dbe43b9b18df9f0c01b72b710" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>insert</name></member>
      <member refid="d3/d7c/classConstDataList_1a797d5d530929d4de6213cddfaf647129" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>insert</name></member>
      <member refid="d3/d7c/classConstDataList_1a12cfc85b3bf78b3e09b1c42646a722f1" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>iter_swap</name></member>
      <member refid="d3/d7c/classConstDataList_1a974b2c9af8f296c8ce652ed4760d6f35" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1aae112b3acc86d27dfd222bd9ada73c67" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>merge</name></member>
      <member refid="d3/d7c/classConstDataList_1a9d8161a3ce773260f6ad01da1c4dd583" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>merge</name></member>
      <member refid="d3/d7c/classConstDataList_1a4a7a9341453b16d3391a69eb51a22595" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator!=</name></member>
      <member refid="d3/d7c/classConstDataList_1a750bfd459a188b4a9ec969dc840d0af6" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator&lt;</name></member>
      <member refid="d3/d7c/classConstDataList_1ad92f2e272b4d06b801f66474b5e33c6a" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator&lt;=</name></member>
      <member refid="d3/d7c/classConstDataList_1ad9251f196b1aebb16e047d7280b1823c" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator=</name></member>
      <member refid="d3/d7c/classConstDataList_1affdee6e680364931593625b26f90ab6b" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator==</name></member>
      <member refid="d3/d7c/classConstDataList_1ac38ddeff504d2d2581cbfa6ec3cfb8cf" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator&gt;</name></member>
      <member refid="d3/d7c/classConstDataList_1a9d17dec912b0e58ad3671df9f405bdb5" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>operator&gt;=</name></member>
      <member refid="d3/d7c/classConstDataList_1a66a3c13c39e02d953109b285b2baa9ab" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>pointer</name></member>
      <member refid="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>push_back</name></member>
      <member refid="d3/d7c/classConstDataList_1aeea2c88b84cbd273e03fb618b50bca73" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>push_front</name></member>
      <member refid="d3/d7c/classConstDataList_1a16dc5885f7ce298aa50957e33b33cb7f" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>rbegin</name></member>
      <member refid="d3/d7c/classConstDataList_1a5c07288f349a4f76458835c1c6d9aaa0" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>reference</name></member>
      <member refid="d3/d7c/classConstDataList_1a73653a365812f88e4ee5cd6eef1941c2" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>remove</name></member>
      <member refid="d3/d7c/classConstDataList_1a69f1437665f9f391e66741f7e6e3df2f" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>rend</name></member>
      <member refid="d3/d7c/classConstDataList_1ad8df5a10d717e6ed3e686581fb8f2bf6" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>resortAux</name></member>
      <member refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>reverse_iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>size_type</name></member>
      <member refid="d3/d7c/classConstDataList_1a492b529115f5d654c41943b178d3ae57" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>splice</name></member>
      <member refid="d3/d7c/classConstDataList_1aad90d48e222ba238ae112c88a1ab8c21" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>splice</name></member>
      <member refid="d3/d7c/classConstDataList_1a127d3469b64aa1f0566cb50851d1b954" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>splice</name></member>
      <member refid="d3/d7c/classConstDataList_1a655f54075595ed86221b36b68a19d567" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>swap</name></member>
      <member refid="d3/d7c/classConstDataList_1a439d1898975457653b5e0e07f83d8de9" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>swapElement</name></member>
      <member refid="d3/d7c/classConstDataList_1a1119a539ef95e66a83ed73e65ce4acb9" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>test2_assignelement1</name></member>
      <member refid="d3/d7c/classConstDataList_1ad1c33e64cc816ff08924314c15cb946a" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>to_base_iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1abf74fa2467875e701a44da65888d8488" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>to_element_proxy</name></member>
      <member refid="d3/d7c/classConstDataList_1abcabcc64578b9ac35ddd4e8f72f934e7" prot="private" virt="non-virtual"><scope>ConstDataList</scope><name>to_my_iterator</name></member>
      <member refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" prot="public" virt="non-virtual"><scope>ConstDataList</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
