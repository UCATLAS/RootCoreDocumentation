<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d59/classSG_1_1AuxElement_1_1Decorator" kind="class" prot="public">
    <compoundname>SG::AuxElement::Decorator</compoundname>
    <includes refid="d1/d6f/AuxElement_8h" local="no">AuxElement.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a1bf6e0e31c4a1804c0cba65218f04a9d" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::reference_type SG::AuxElement::Decorator&lt; T &gt;::reference_type</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <briefdescription>
<para>Type referencing an item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="575" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a84ffc32ffaf9a34da8778e62b9e8ad11" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d1/def/classT" kindref="compound">element_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::element_type SG::AuxElement::Decorator&lt; T &gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Type the user sees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="579" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a0f7d4ab6df4e5f83520b721ff612f5a1" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a0f7d4ab6df4e5f83520b721ff612f5a1" kindref="member">container_pointer_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::container_pointer_type SG::AuxElement::Decorator&lt; T &gt;::container_pointer_type</definition>
        <argsstring></argsstring>
        <name>container_pointer_type</name>
        <briefdescription>
<para>Pointer into the container holding this item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="583" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af98a0b9300b13797ca282c62a5146749" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_container_pointer_type</type>
        <definition>typedef AuxDataTraits&lt;T&gt;::const_container_pointer_type SG::AuxElement::Decorator&lt; T &gt;::const_container_pointer_type</definition>
        <argsstring></argsstring>
        <name>const_container_pointer_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="585" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1aae189d0c219f058a67df8e97a9d47dae" prot="private" static="no" mutable="no">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>SG::auxid_t SG::AuxElement::Decorator&lt; T &gt;::m_auxid</definition>
        <argsstring></argsstring>
        <name>m_auxid</name>
        <briefdescription>
<para>The cached <computeroutput>auxid</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="676" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1afa6e316a90a40126e2b0c2add0e72232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::Decorator&lt; T &gt;::Decorator</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Decorator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="594" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a6c5fe40000883f282dafd19627a7dbee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::Decorator&lt; T &gt;::Decorator</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname)</argsstring>
        <name>Decorator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of its associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="604" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="523" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a2585c46b897b0e024a750f463b41c5b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>AuxElement::Decorator&lt; T &gt;::reference_type SG::AuxElement::Decorator&lt; T &gt;::operator()</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which to fetch the variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="615" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="541" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af8a0644cae60d6dd721f698b7a20dc29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>AuxElement::Decorator&lt; T &gt;::reference_type SG::AuxElement::Decorator&lt; T &gt;::operator()</definition>
        <argsstring>(const AuxVectorData &amp;container, size_t index) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the desired element.</para></parameterdescription>
</parameteritem>
</parameterlist>
This allows retrieving aux data by container / index. Looping over the index via this method will be faster then looping over the elements of the container.</para><para>If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="632" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a362b8685449d03d66b2e4fe1855bfad4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::Decorator&lt; T &gt;::set</definition>
        <argsstring>(const AuxElement &amp;e, const element_type &amp;x) const </argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">element_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Set the variable for one element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which to fetch the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable value to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="640" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="578" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a8476cd5dddeba1e8cd1e164433eac738" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_container_pointer_type</type>
        <definition>AuxElement::Decorator&lt; T &gt;::const_container_pointer_type SG::AuxElement::Decorator&lt; T &gt;::getDataArray</definition>
        <argsstring>(const AuxVectorData &amp;container) const </argsstring>
        <name>getDataArray</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the start of the auxiliary data array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="651" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="596" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af0a86a045a4f9bafb7d2730eee5465aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::Decorator&lt; T &gt;::isAvailable</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>isAvailable</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Test to see if this variable exists in the store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the container which to test the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="658" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="611" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a4e11aa4895268934bfe18517573b4c6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::Decorator&lt; T &gt;::isAvailableWritable</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>isAvailableWritable</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Test to see if this variable exists in the store and is writable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the container which to test the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="665" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af6c7b07821b05d812404ba87076ed95f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>SG::auxid_t SG::AuxElement::Decorator&lt; T &gt;::auxid</definition>
        <argsstring>() const </argsstring>
        <name>auxid</name>
        <briefdescription>
<para>Return the aux id for this variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="671" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="636" bodyend="639"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class to provide type-safe access to aux data. </para>    </briefdescription>
    <detaileddescription>
<para>This is like <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput>, except that it only `decorates&apos; the container. What this means is that this object can operate on a const container and return a non-const reference. However, if the container is locked, this will only work if either this is a reference to a new variable, in which case it is marked as a decoration, or it is a reference to a variable already marked as a decoration.</para><para>This is written as a separate class in order to be able to cache the name -&gt; auxid lookup.</para><para>You might use this something like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>need<sp/>to<sp/>do<sp/>this<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Myclass::Decorator&lt;int&gt;<sp/>vint1<sp/>(</highlight><highlight class="stringliteral">&quot;myInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Myclass*<sp/>m<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>vint1<sp/>(*m)<sp/>=<sp/>123;</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="571" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="570" bodyend="677"/>
    <listofallmembers>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af6c7b07821b05d812404ba87076ed95f" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>auxid</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af98a0b9300b13797ca282c62a5146749" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>const_container_pointer_type</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a0f7d4ab6df4e5f83520b721ff612f5a1" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>container_pointer_type</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1afa6e316a90a40126e2b0c2add0e72232" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>Decorator</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a6c5fe40000883f282dafd19627a7dbee" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>Decorator</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a84ffc32ffaf9a34da8778e62b9e8ad11" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>element_type</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a8476cd5dddeba1e8cd1e164433eac738" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>getDataArray</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af0a86a045a4f9bafb7d2730eee5465aa" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>isAvailable</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a4e11aa4895268934bfe18517573b4c6f" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>isAvailableWritable</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1aae189d0c219f058a67df8e97a9d47dae" prot="private" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>m_auxid</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a2585c46b897b0e024a750f463b41c5b4" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>operator()</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1af8a0644cae60d6dd721f698b7a20dc29" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>operator()</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a1bf6e0e31c4a1804c0cba65218f04a9d" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>reference_type</name></member>
      <member refid="d3/d59/classSG_1_1AuxElement_1_1Decorator_1a362b8685449d03d66b2e4fe1855bfad4" prot="public" virt="non-virtual"><scope>SG::AuxElement::Decorator</scope><name>set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
