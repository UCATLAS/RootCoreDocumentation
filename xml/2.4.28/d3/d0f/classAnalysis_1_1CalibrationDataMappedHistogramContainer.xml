<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kind="class" prot="public">
    <compoundname>Analysis::CalibrationDataMappedHistogramContainer</compoundname>
    <basecompoundref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" prot="public" virt="non-virtual">Analysis::CalibrationDataHistogramContainer</basecompoundref>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="no">CalibrationDataContainer.h</includes>
    <innerclass refid="dc/d12/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1_1Bin" prot="public">Analysis::CalibrationDataMappedHistogramContainer::Bin</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a42ca02ed849d2aa060986309c1765253" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Analysis::CalibrationDataMappedHistogramContainer::m_mapped</definition>
        <argsstring></argsstring>
        <name>m_mapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mapped variables. These have to be specified when creating the object, for there is no way to transmit this information otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="383" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3ef7287b6ed4d684fa1e58753cf560d7" prot="private" static="no" mutable="yes">
        <type>unsigned int</type>
        <definition>unsigned int Analysis::CalibrationDataMappedHistogramContainer::m_beginMapped</definition>
        <argsstring></argsstring>
        <name>m_beginMapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>starting position of mapped variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="386" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ab02351078f53a434c3f8f7077991f350" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="dc/d12/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1_1Bin" kindref="compound">Bin</ref> &gt;</type>
        <definition>std::vector&lt;Bin&gt; Analysis::CalibrationDataMappedHistogramContainer::m_bins</definition>
        <argsstring></argsstring>
        <name>m_bins</name>
        <briefdescription>
<para>don&apos;t persistify </para>        </briefdescription>
        <detaileddescription>
<para>calibration bins </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="389" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ae91774f6631ea5f3a550e0cb486f5433" prot="private" static="no" mutable="yes">
        <type>unsigned int</type>
        <definition>unsigned int Analysis::CalibrationDataMappedHistogramContainer::m_lastBin</definition>
        <argsstring></argsstring>
        <name>m_lastBin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="391" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a7ed27a1567f6029dbadba8dda112532c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataMappedHistogramContainer::CalibrationDataMappedHistogramContainer</definition>
        <argsstring>(const char *name=&quot;default&quot;)</argsstring>
        <name>CalibrationDataMappedHistogramContainer</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;default&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a702b1add685808715cd4f8e53b2f5e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CalibrationDataMappedHistogramContainer::~CalibrationDataMappedHistogramContainer</definition>
        <argsstring>()</argsstring>
        <name>~CalibrationDataMappedHistogramContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="997" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataMappedHistogramContainer::getResult</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result, TObject *obj=0, bool extrapolate=false) const </argsstring>
        <name>getResult</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75">getResult</reimplements>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested result (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that extrapolation applies (should only be relevant when using eigenvector variations) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="328" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1122" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataMappedHistogramContainer::getStatUncertainty</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result) const </argsstring>
        <name>getStatUncertainty</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f">getStatUncertainty</reimplements>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration statistical uncertainty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested statistical uncertainty </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) Note the changed signature compared to <ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996" kindref="member">getUncertainty()</ref>, <ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7" kindref="member">getResult()</ref> etc.: this is because the statistical uncertainty computation always needs the result object, and only in case of the function interface also the covariance matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="329" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1156" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataMappedHistogramContainer::getUncertainty</definition>
        <argsstring>(const std::string &amp;unc, const CalibrationDataVariables &amp;x, UncertaintyResult &amp;result, TObject *obj=0) const </argsstring>
        <name>getUncertainty</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651">getUncertainty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UncertaintyResult &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration uncertainty due to the given source. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unc</parametername>
</parameternamelist>
<parameterdescription>
<para>uncertainty specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested uncertainty (for both positive and negative variation, if available) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested uncertainty information (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="331" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1181" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a7403408165b275b85a8bba0c734b3afa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Analysis::CalibrationDataMappedHistogramContainer::isInterpolated</definition>
        <argsstring>() const </argsstring>
        <name>isInterpolated</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa27c1f4b1ddb92cd704f1b4b7263196e">isInterpolated</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether histogram interpolation is used or not. Not applicable here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="334" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a69dca1710e279b6f78576cd733cf8207" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int CalibrationDataMappedHistogramContainer::getTagWeightAxis</definition>
        <argsstring>() const </argsstring>
        <name>getTagWeightAxis</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a6869298988a937ac1f9c2d44ad2db111">getTagWeightAxis</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether this calibration object is one for &quot;continuous&quot; calibration (this has some subtle consequences for the treatment of bin-to-bin correlations). The return value will be -1 in case this is not a &quot;continuous&quot; calibration object, and the axis number (0 for <ref refid="d3/d24/structX" kindref="compound">X</ref>, 1 for <ref refid="de/d29/structY" kindref="compound">Y</ref>, 2 for <ref refid="de/d0e/structZ" kindref="compound">Z</ref>) otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="340" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1221" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5e4813f3dd8ffa75dc71174f263727ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataMappedHistogramContainer::setMappedVariables</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;variables)</argsstring>
        <name>setMappedVariables</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set (by hand) the variables that will be mapped onto a single histogram axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="343" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1238" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6b3f7fe32978b072e4ae52742126a4c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; CalibrationDataMappedHistogramContainer::getMappedVariables</definition>
        <argsstring>() const </argsstring>
        <name>getMappedVariables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List which variables get mapped onto a single histogram axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="346" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1247" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3751647ec41f3454062fae0523ebe61c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; CalibrationDataMappedHistogramContainer::getBinBoundaries</definition>
        <argsstring>(unsigned int vartype) const </argsstring>
        <name>getBinBoundaries</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a8d8a72c1c8ce4362afa87837a42dca97">getBinBoundaries</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>vartype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the bin boundaries for the specified variable type (which should be a CalibrationParametrization enum). An empty vector will be returned if the specified variable is not actually used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="350" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1326" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ab3e324311f9e498814c2ee618fd2f530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CalibrationDataMappedHistogramContainer::addBin</definition>
        <argsstring>(const Bin &amp;bin)</argsstring>
        <name>addBin</name>
        <param>
          <type>const <ref refid="dc/d12/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1_1Bin" kindref="compound">Bin</ref> &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add mapping bin. The return value is the bin number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="374" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1256" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a4649c15211b1155ef749cf5dc5b83b07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CalibrationDataMappedHistogramContainer::getNMappedBins</definition>
        <argsstring>() const </argsstring>
        <name>getNMappedBins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the number of mapped bins </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="377" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1267" bodyend="1273"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1aa55e82d9cdf367e768aefa9d416289bd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Int_t</type>
        <definition>Int_t CalibrationDataMappedHistogramContainer::findBin</definition>
        <argsstring>() const </argsstring>
        <name>findBin</name>
        <briefdescription>
<para>don&apos;t persistify </para>        </briefdescription>
        <detaileddescription>
<para>find the bin number corresponding to the input variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="394" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1298" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ae3a875ad0786e75ef38609e0a1fafbbb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Int_t</type>
        <definition>Int_t CalibrationDataMappedHistogramContainer::findMappedBin</definition>
        <argsstring>(double *x) const </argsstring>
        <name>findMappedBin</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="395" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1277" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ad8554080b69f001ff8a39059ee5feb48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataMappedHistogramContainer::checkBounds</definition>
        <argsstring>()</argsstring>
        <name>checkBounds</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a80a632089bdb5b729d444a6828f30342">checkBounds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check the bounds of validity for this calibration object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="398" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1060" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5a5bf51ecd07792d2dcaca6b13f35f38" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CalibrationDataMappedHistogramContainer::computeVariableTypes</definition>
        <argsstring>() const </argsstring>
        <name>computeVariableTypes</name>
        <reimplements refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa56fe5c2dd947d40310f98d5efcac8c0">computeVariableTypes</reimplements>
        <briefdescription>
<para>decode the &apos;uncertainty&apos; objects&apos; names to determine the relevant variable types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="401" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1003" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3186187bf019e044edb911cc227e68d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataMappedHistogramContainer::ClassDef</definition>
        <argsstring>(CalibrationDataMappedHistogramContainer, 1)</argsstring>
        <name>ClassDef</name>
        <reimplements refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a18dfc962fdddabf2f2df983a5f6caeb5">ClassDef</reimplements>
        <param>
          <type><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kindref="compound">CalibrationDataMappedHistogramContainer</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="403"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the class holding information for histogram-based calibration results, in cases where &apos;irregular&apos; binning is used (e.g., if the binning in one variable depends on another variable), or where the dimensionality becomes too high for even 3D histograms (so that a mapping is needed to use THx).</para><para>Using this class instead of the &apos;regular&apos; histogram container will imply a performance penalty, as bin numberings are not assumed to feature any regularity. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2943">
        <label>Analysis::CalibrationDataMappedHistogramContainer</label>
        <link refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer"/>
        <childnode refid="2944" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2945">
        <label>Analysis::CalibrationDataContainer</label>
        <link refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer"/>
      </node>
      <node id="2944">
        <label>Analysis::CalibrationDataHistogramContainer</label>
        <link refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer"/>
        <childnode refid="2945" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2946">
        <label>Analysis::CalibrationDataMappedHistogramContainer</label>
        <link refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer"/>
        <childnode refid="2947" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2948">
        <label>Analysis::CalibrationDataContainer</label>
        <link refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer"/>
      </node>
      <node id="2947">
        <label>Analysis::CalibrationDataHistogramContainer</label>
        <link refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer"/>
        <childnode refid="2948" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="323" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="323" bodyend="404"/>
    <listofallmembers>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ab3e324311f9e498814c2ee618fd2f530" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>addBin</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a47d7af6a742617c1506d43af378623ab" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>CalibrationDataContainer</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1af6784495fc7fc147aa405fdb42f76f3a" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>CalibrationDataHistogramContainer</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a7ed27a1567f6029dbadba8dda112532c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>CalibrationDataMappedHistogramContainer</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>CalibrationParametrization</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ad8554080b69f001ff8a39059ee5feb48" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>checkBounds</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3186187bf019e044edb911cc227e68d2" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>ClassDef</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>computeVariables</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5a5bf51ecd07792d2dcaca6b13f35f38" prot="private" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>computeVariableTypes</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1aa55e82d9cdf367e768aefa9d416289bd" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>findBin</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ae3a875ad0786e75ef38609e0a1fafbbb" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>findMappedBin</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3751647ec41f3454062fae0523ebe61c" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getBinBoundaries</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a4959b7f8b61f37d7c66cab4d40ea9d0e" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a37ad38f667a6dfe665992c36f9bac3d6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getComment</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a771621aac5a4b31d383caa301fe06441" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getEigenvectorReduction</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getHadronisation</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getLowerBound</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6b3f7fe32978b072e4ae52742126a4c1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getMappedVariables</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a4649c15211b1155ef749cf5dc5b83b07" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getNMappedBins</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getResult</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getStatUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getSystUncertainty</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a69dca1710e279b6f78576cd733cf8207" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getTagWeightAxis</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a21290fdfb4cb6602b864f59edf2e58f5" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getUncertainties</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getUpperBound</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>getVariableTypes</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad3bfbdca48da85a5bc6cb3c14454753d" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>isBinCorrelated</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a7403408165b275b85a8bba0c734b3afa" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>isInterpolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>isNearlyEqual</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a52f3008b10ef9492a72dfc0561b29cf7" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>isRangeRestricted</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a6692756d72938733763b332d4f2ea1bc" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>kAbsEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a727a6dbf44b189ed73773d3e692020f8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>kEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1aed960f926233b847692fb49a78262ce8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>kPt</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a2014afaa5916df1cff6ff67d152b770c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>kTagWeight</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>listUncertainties</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3ef7287b6ed4d684fa1e58753cf560d7" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_beginMapped</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_binBoundaries</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ab02351078f53a434c3f8f7077991f350" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_bins</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ae91774f6631ea5f3a550e0cb486f5433" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_lastBin</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ab50cbcbe1af6430107cfaa5fd4dad440" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_lowerBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a55be48882b6ae5331906159e27f40148" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_lowerBoundsExtrapolated</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a42ca02ed849d2aa060986309c1765253" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_mapped</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_objResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_objSystematics</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ac653ff185b74bc5be5576770bd0a3da0" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_upperBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_upperBoundsExtrapolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_variables</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>m_vars</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a5557c916b13fe0ccec9a3a6fedf7bcfe" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>restrictToRange</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abd0830b7c9111a0987747c395e6938e4" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setComment</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a966fb27de925a6af5df0b17e63e03026" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setHadronisation</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a566c34b79b398930a96e8ab443417783" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setInterpolated</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5e4813f3dd8ffa75dc71174f263727ea" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setMappedVariables</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02419acd65b92507438f38a8c80ccfc1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setUncertainty</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a45ecd61fdc3d11b2e53a5ff13fe0ca71" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>setUncorrelated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>typeFromString</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af1127c28e97354324bbef28b27ad3f1a" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>~CalibrationDataContainer</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ae8451700122ef7645a689d67d1bf05fd" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>~CalibrationDataHistogramContainer</name></member>
      <member refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a702b1add685808715cd4f8e53b2f5e01" prot="public" virt="virtual"><scope>Analysis::CalibrationDataMappedHistogramContainer</scope><name>~CalibrationDataMappedHistogramContainer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
