<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d3/d0e/AuxTypeRegistry_8cxx" kind="file">
    <compoundname>AuxTypeRegistry.cxx</compoundname>
    <includes refid="db/d7f/AuxTypeRegistry_8h" local="yes">AthContainers/AuxTypeRegistry.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="de/d1a/normalizedTypeinfoName_8h" local="yes">AthContainers/normalizedTypeinfoName.h</includes>
    <includes refid="da/d8e/foreach_8h" local="yes">AthContainers/tools/foreach.h</includes>
    <includes refid="d0/d16/ElementLinkBase_8h" local="yes">AthLinks/ElementLinkBase.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">sstream</includes>
    <includes local="no">cstring</includes>
    <incdepgraph>
      <node id="71388">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="71390">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="71353" relation="include">
        </childnode>
        <childnode refid="71355" relation="include">
        </childnode>
        <childnode refid="71362" relation="include">
        </childnode>
        <childnode refid="71363" relation="include">
        </childnode>
      </node>
      <node id="71391">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="71395">
        <label>AthContainers/normalizedTypeinfoName.h</label>
        <link refid="de/d1a/normalizedTypeinfoName_8h"/>
        <childnode refid="71360" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
      </node>
      <node id="71361">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="71363">
        <label>functional</label>
      </node>
      <node id="71359">
        <label>limits</label>
      </node>
      <node id="71386">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="71356">
        <label>iterator</label>
      </node>
      <node id="71373">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="71360" relation="include">
        </childnode>
        <childnode refid="71374" relation="include">
        </childnode>
      </node>
      <node id="71392">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="71350" relation="include">
        </childnode>
        <childnode refid="71393" relation="include">
        </childnode>
        <childnode refid="71394" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
        <childnode refid="71360" relation="include">
        </childnode>
      </node>
      <node id="71369">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="71370" relation="include">
        </childnode>
        <childnode refid="71357" relation="include">
        </childnode>
      </node>
      <node id="71375">
        <label>stdint.h</label>
      </node>
      <node id="71366">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="71351" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
      </node>
      <node id="71397">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="71348">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxTypeRegistry.cxx</label>
        <link refid="AuxTypeRegistry.cxx"/>
        <childnode refid="71349" relation="include">
        </childnode>
        <childnode refid="71392" relation="include">
        </childnode>
        <childnode refid="71395" relation="include">
        </childnode>
        <childnode refid="71396" relation="include">
        </childnode>
        <childnode refid="71398" relation="include">
        </childnode>
        <childnode refid="71399" relation="include">
        </childnode>
        <childnode refid="71400" relation="include">
        </childnode>
        <childnode refid="71401" relation="include">
        </childnode>
      </node>
      <node id="71352">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="71353" relation="include">
        </childnode>
        <childnode refid="71362" relation="include">
        </childnode>
        <childnode refid="71363" relation="include">
        </childnode>
      </node>
      <node id="71358">
        <label>cmath</label>
      </node>
      <node id="71399">
        <label>cassert</label>
      </node>
      <node id="71394">
        <label>stdexcept</label>
      </node>
      <node id="71389">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="71360">
        <label>string</label>
      </node>
      <node id="71364">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="71351" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
      </node>
      <node id="71381">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="71378">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="71396">
        <label>AthContainers/tools/foreach.h</label>
        <link refid="da/d8e/foreach_8h"/>
        <childnode refid="71397" relation="include">
        </childnode>
      </node>
      <node id="71387">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="71372">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="71373" relation="include">
        </childnode>
        <childnode refid="71359" relation="include">
        </childnode>
        <childnode refid="71375" relation="include">
        </childnode>
        <childnode refid="71376" relation="include">
        </childnode>
      </node>
      <node id="71350">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="71351" relation="include">
        </childnode>
        <childnode refid="71352" relation="include">
        </childnode>
      </node>
      <node id="71398">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="71375" relation="include">
        </childnode>
      </node>
      <node id="71353">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="71354" relation="include">
        </childnode>
        <childnode refid="71355" relation="include">
        </childnode>
        <childnode refid="71356" relation="include">
        </childnode>
        <childnode refid="71351" relation="include">
        </childnode>
        <childnode refid="71357" relation="include">
        </childnode>
        <childnode refid="71358" relation="include">
        </childnode>
        <childnode refid="71359" relation="include">
        </childnode>
        <childnode refid="71360" relation="include">
        </childnode>
        <childnode refid="71361" relation="include">
        </childnode>
      </node>
      <node id="71365">
        <label>typeinfo</label>
      </node>
      <node id="71376">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="71374">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="71380">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="71349">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="71350" relation="include">
        </childnode>
        <childnode refid="71364" relation="include">
        </childnode>
        <childnode refid="71366" relation="include">
        </childnode>
        <childnode refid="71367" relation="include">
        </childnode>
        <childnode refid="71382" relation="include">
        </childnode>
        <childnode refid="71384" relation="include">
        </childnode>
        <childnode refid="71351" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
        <childnode refid="71370" relation="include">
        </childnode>
        <childnode refid="71390" relation="include">
        </childnode>
        <childnode refid="71391" relation="include">
        </childnode>
      </node>
      <node id="71370">
        <label>vector</label>
      </node>
      <node id="71355">
        <label>utility</label>
      </node>
      <node id="71377">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="71400">
        <label>sstream</label>
      </node>
      <node id="71385">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="71368">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="71384">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="71385" relation="include">
        </childnode>
        <childnode refid="71386" relation="include">
        </childnode>
        <childnode refid="71387" relation="include">
        </childnode>
        <childnode refid="71388" relation="include">
        </childnode>
        <childnode refid="71389" relation="include">
        </childnode>
      </node>
      <node id="71357">
        <label>cstdlib</label>
      </node>
      <node id="71393">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="71351">
        <label>cstddef</label>
      </node>
      <node id="71367">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="71364" relation="include">
        </childnode>
        <childnode refid="71368" relation="include">
        </childnode>
        <childnode refid="71369" relation="include">
        </childnode>
        <childnode refid="71371" relation="include">
        </childnode>
        <childnode refid="71377" relation="include">
        </childnode>
        <childnode refid="71365" relation="include">
        </childnode>
        <childnode refid="71370" relation="include">
        </childnode>
        <childnode refid="71354" relation="include">
        </childnode>
        <childnode refid="71375" relation="include">
        </childnode>
        <childnode refid="71379" relation="include">
        </childnode>
        <childnode refid="71380" relation="include">
        </childnode>
        <childnode refid="71381" relation="include">
        </childnode>
      </node>
      <node id="71379">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="71383">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="71371">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="71368" relation="include">
        </childnode>
        <childnode refid="71372" relation="include">
        </childnode>
        <childnode refid="71377" relation="include">
        </childnode>
        <childnode refid="71370" relation="include">
        </childnode>
        <childnode refid="71378" relation="include">
        </childnode>
      </node>
      <node id="71354">
        <label>algorithm</label>
      </node>
      <node id="71401">
        <label>cstring</label>
      </node>
      <node id="71362">
        <label>memory</label>
      </node>
      <node id="71382">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="71366" relation="include">
        </childnode>
        <childnode refid="71367" relation="include">
        </childnode>
        <childnode refid="71383" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d3/d0e/AuxTypeRegistry_8cxx_1a25e4050fe0da07c1eac07dec71690cf5" prot="public" static="no">
        <name>ADD_FACTORY</name>
        <param><defname>T</defname></param>
        <initializer>addFactory(typeid(<ref refid="d1/def/classT" kindref="compound">T</ref>), new AuxTypeVectorFactory&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxTypeRegistry.cxx" line="590"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d7f/AuxTypeRegistry_8h" kindref="compound" tooltip="Handle mappings between names and auxid_t.">AthContainers/AuxTypeRegistry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1a/normalizedTypeinfoName_8h" kindref="compound" tooltip="Convert a type_info to a normalized string representation (matching the names used...">AthContainers/normalizedTypeinfoName.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/d8e/foreach_8h" kindref="compound" tooltip="foreach helper for standalone build.">AthContainers/tools/foreach.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthLinks/ElementLinkBase.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">AuxTypeRegistry&amp;<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">AuxTypeRegistry::instance</ref>()</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AuxTypeRegistry<sp/>auxTypeRegistry;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxTypeRegistry;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">AuxTypeRegistry::getAuxID</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>clsname<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref><sp/>(name,<sp/>clsname,<sp/>ti,<sp/>&amp;AuxTypeRegistry::makeFactoryNull);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">AuxTypeRegistry::findAuxID</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>clsname<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="65"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>upgrading_lock_t<sp/>lock<sp/>(const_cast&lt;mutex_t&amp;&gt;(m_mutex));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>key_t<sp/>key<sp/>(name,<sp/>clsname);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>id_map_t::const_iterator<sp/>i<sp/>=<sp/>m_auxids.find<sp/>(key);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>m_auxids.end())<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_auxid;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">IAuxTypeVector*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">AuxTypeRegistry::makeVector</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="85"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>assert<sp/>(factory<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a41bb2ee5de5b7c173a9b87dbe7762b7a" kindref="member" tooltip="Create a vector object of this type.">create</ref><sp/>(size,<sp/>capacity);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">IAuxTypeVector*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">AuxTypeRegistry::makeVector</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="103"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>assert<sp/>(factory<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a41bb2ee5de5b7c173a9b87dbe7762b7a" kindref="member" tooltip="Create a vector object of this type.">create</ref><sp/>(size,<sp/>capacity);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">AuxTypeRegistry::getName</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="115"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>lock_t<sp/>lock<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">AuxTypeRegistry::getName</ref><sp/>(lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="128"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxid<sp/>&gt;=<sp/>m_types.size())</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_types[auxid].m_name;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a91aca01cd796c7e7f61ddf09d56c45a1" kindref="member" tooltip="Return the class name associated with an aux data item (may be blank).">AuxTypeRegistry::getClassName</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="141"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>lock_t<sp/>lock(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a91aca01cd796c7e7f61ddf09d56c45a1" kindref="member" tooltip="Return the class name associated with an aux data item (may be blank).">getClassName</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a91aca01cd796c7e7f61ddf09d56c45a1" kindref="member" tooltip="Return the class name associated with an aux data item (may be blank).">AuxTypeRegistry::getClassName</ref><sp/>(lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxid<sp/>&gt;=<sp/>m_types.size())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_types[auxid].m_clsname;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">AuxTypeRegistry::getType</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>lock_t<sp/>lock<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">AuxTypeRegistry::getType</ref><sp/>(lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="180"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxid<sp/>&gt;=<sp/>m_types.size())</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_types[auxid].m_ti;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">AuxTypeRegistry::getTypeName</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="194"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>lock_t<sp/>lock<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">AuxTypeRegistry::getTypeName</ref><sp/>(lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="209"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxid<sp/>&gt;=<sp/>m_types.size())</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" kindref="member" tooltip="Convert a type_info to a normalized string representation (matching the names used...">normalizedTypeinfoName</ref><sp/>(*m_types[auxid].m_ti);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">AuxTypeRegistry::getVecType</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="221"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">AuxTypeRegistry::getVecType</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="237"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">AuxTypeRegistry::getVecTypeName</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="252"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" kindref="member" tooltip="Convert a type_info to a normalized string representation (matching the names used...">normalizedTypeinfoName</ref><sp/>(*factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">std::string<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">AuxTypeRegistry::getVecTypeName</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="270"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" kindref="member" tooltip="Convert a type_info to a normalized string representation (matching the names used...">normalizedTypeinfoName</ref><sp/>(*factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a1429d97078f8731031ddeae38654039e" kindref="member" tooltip="Return size of an element in the STL vector.">AuxTypeRegistry::getEltSize</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="283"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a1429d97078f8731031ddeae38654039e" kindref="member" tooltip="Return size of an element in the STL vector.">AuxTypeRegistry::getEltSize</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="299"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a9184409636833f5bc1b0a920957fe319" kindref="member" tooltip="Copy an element between vectors.">AuxTypeRegistry::copy</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_index)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(dst,<sp/>dst_index,<sp/>src,<sp/>src_index);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a9184409636833f5bc1b0a920957fe319" kindref="member" tooltip="Copy an element between vectors.">AuxTypeRegistry::copy</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_index)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(dst,<sp/>dst_index,<sp/>src,<sp/>src_index);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">AuxTypeRegistry::copyForOutput</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_index)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(dst,<sp/>dst_index,<sp/>src,<sp/>src_index);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>would<sp/>be<sp/>cleaner,<sp/>safer,<sp/>and<sp/>more<sp/>flexible<sp/>to<sp/>add<sp/>a<sp/>new<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interface<sp/>for<sp/>this.<sp/><sp/>But<sp/>that<sp/>would<sp/>require<sp/>a<sp/>full<sp/>rebuild,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>upgrading_lock_t<sp/>lock<sp/>(m_mutex);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isEL[auxid])<sp/>applyELThinning<sp/>(reinterpret_cast&lt;char*&gt;(dst)<sp/>+<sp/>dst_index<sp/>*<sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isELVec[auxid])<sp/>applyELVecThinning<sp/>(reinterpret_cast&lt;char*&gt;(dst)<sp/>+<sp/>dst_index<sp/>*<sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">AuxTypeRegistry::copyForOutput</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_index)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(dst,<sp/>dst_index,<sp/>src,<sp/>src_index);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>would<sp/>be<sp/>cleaner,<sp/>safer,<sp/>and<sp/>more<sp/>flexible<sp/>to<sp/>add<sp/>a<sp/>new<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interface<sp/>for<sp/>this.<sp/><sp/>But<sp/>that<sp/>would<sp/>require<sp/>a<sp/>full<sp/>rebuild,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isEL[auxid])<sp/>applyELThinning<sp/>(reinterpret_cast&lt;char*&gt;(dst)<sp/>+<sp/>dst_index<sp/>*<sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isELVec[auxid])<sp/>applyELVecThinning<sp/>(reinterpret_cast&lt;char*&gt;(dst)<sp/>+<sp/>dst_index<sp/>*<sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5ff58673f48fe3db1a1654bcce6a33ea" kindref="member" tooltip="Swap an element between vectors.">AuxTypeRegistry::swap</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aindex,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bindex)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1af71b66184a8c3660589a7d21e915391e" kindref="member" tooltip="Swap an element between vectors.">swap</ref><sp/>(a,<sp/>aindex,<sp/>b,<sp/>bindex);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5ff58673f48fe3db1a1654bcce6a33ea" kindref="member" tooltip="Swap an element between vectors.">AuxTypeRegistry::swap</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aindex,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bindex)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1af71b66184a8c3660589a7d21e915391e" kindref="member" tooltip="Swap an element between vectors.">swap</ref><sp/>(a,<sp/>aindex,<sp/>b,<sp/>bindex);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a26344bbacb847a9e7290ad4881cfc966" kindref="member" tooltip="Clear an element within a vector.">AuxTypeRegistry::clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(auxid);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a347599cb7f89af31af8b2495d817969a" kindref="member" tooltip="Clear an element within a vector (static method).">clear</ref><sp/>(dst,<sp/>dst_index);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a26344bbacb847a9e7290ad4881cfc966" kindref="member" tooltip="Clear an element within a vector.">AuxTypeRegistry::clear</ref><sp/>(lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_index)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a347599cb7f89af31af8b2495d817969a" kindref="member" tooltip="Clear an element within a vector (static method).">clear</ref><sp/>(dst,<sp/>dst_index);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAuxTypeVectorFactory*</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">AuxTypeRegistry::getFactory</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="489"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>lock_t<sp/>lock<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>ti);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAuxTypeVectorFactory*</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">AuxTypeRegistry::getFactory</ref><sp/>(lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="507"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFactoryLocked<sp/>(ti);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAuxTypeVectorFactory*</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">AuxTypeRegistry::getFactory</ref><sp/>(upgrading_lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="524"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFactoryLocked<sp/>(ti);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">AuxTypeRegistry::addFactory</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAuxTypeVectorFactory*<sp/>factory)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>upgrading_lock_t<sp/>lock<sp/>(m_mutex);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(lock,<sp/>ti,<sp/>factory);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">AuxTypeRegistry::addFactory</ref><sp/>(upgrading_lock_t&amp;<sp/>lock,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAuxTypeVectorFactory*<sp/>factory)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>ti_map_t::iterator<sp/>it<sp/>=<sp/>m_factories.find<sp/>(&amp;ti);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_factories.end())<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second-&gt;isDynamic()<sp/>&amp;&amp;<sp/>!factory-&gt;isDynamic())<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replacing<sp/>a<sp/>dynamic<sp/>factory<sp/>with<sp/>a<sp/>non-dynamic<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>don&apos;t<sp/>delete<sp/>the<sp/>old<sp/>one,<sp/>since<sp/>it<sp/>might<sp/>still<sp/>be<sp/>referenced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>push<sp/>it<sp/>on<sp/>a<sp/>vector<sp/>to<sp/>remember<sp/>it<sp/>so<sp/>we<sp/>can<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_oldFactories.push_back<sp/>(it-&gt;second);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second<sp/>=<sp/>factory;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>factory;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>m_factories[&amp;ti]<sp/>=<sp/>factory;</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">AuxTypeRegistry::AuxTypeRegistry()</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>have<sp/>factories<sp/>registered<sp/>for<sp/>common<sp/>C++<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FACTORY(T)<sp/>addFactory(typeid(T),<sp/>new<sp/>AuxTypeVectorFactory&lt;T&gt;)</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::string);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;char&gt;);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;unsigned<sp/>char&gt;);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;int&gt;);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;unsigned<sp/>int&gt;);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;float&gt;);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>ADD_FACTORY<sp/>(std::vector&lt;double&gt;);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ADD_FACTORY</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">AuxTypeRegistry::~AuxTypeRegistry()</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_FOREACH<sp/>(ti_map_t::value_type&amp;<sp/>p,<sp/>m_factories)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>p.second;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_FOREACH<sp/>(const<sp/>IAuxTypeVectorFactory*<sp/>p,<sp/>m_oldFactories)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>p;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">SG::<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref></highlight></codeline>
<codeline lineno="650"><highlight class="normal">AuxTypeRegistry::<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref><sp/>(const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>clsname,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::type_info&amp;<sp/>ti,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAuxTypeVectorFactory*<sp/>(AuxTypeRegistry::*makeFactory)<sp/>()<sp/>const)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>upgrading_lock_t<sp/>lock<sp/>(m_mutex);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>key_t<sp/>key<sp/>(name,<sp/>clsname);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>id_map_t::iterator<sp/>i<sp/>=<sp/>m_auxids.find<sp/>(key);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>m_auxids.end())<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>typeinfo_t&amp;<sp/>m<sp/>=<sp/>m_types[i-&gt;second];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>all<sp/>rights,<sp/>these<sp/>two<sp/>tests<sp/>should<sp/>be<sp/>redundant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>there<sp/>are<sp/>cases<sp/>where<sp/>we<sp/>see<sp/>distinct<sp/>@c<sp/>type_info<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>same<sp/>type.<sp/><sp/>This<sp/>is<sp/>usually<sp/>associated<sp/>with<sp/>dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>loaded<sp/>`too<sp/>early,&apos;<sp/>during<sp/>python<sp/>configuration<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>a<sp/>C++<sp/>standard<sp/>violation<sp/>for<sp/>this<sp/>to<sp/>ever<sp/>happen,<sp/>but<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>clear<sp/>that<sp/>it&apos;s<sp/>feasible<sp/>to<sp/>actually<sp/>eliminate<sp/>the<sp/>possibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>happening.<sp/><sp/>So<sp/>if<sp/>the<sp/>@c<sp/>type_info<sp/>instances<sp/>differ,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>still<sp/>accept<sp/>the<sp/>match<sp/>as<sp/>long<sp/>as<sp/>the<sp/>names<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;ti<sp/>==<sp/>m.m_ti<sp/>||<sp/>strcmp(ti.name(),<sp/>m.m_ti-&gt;name())<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>upgrade<sp/>a<sp/>dynamic<sp/>factory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.m_factory-&gt;isDynamic())<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAuxTypeVectorFactory*<sp/>fac2<sp/>=<sp/>(*this.*makeFactory)();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fac2)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(lock,<sp/>ti,<sp/>fac2);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.m_factory<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>ti);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*m.m_ti<sp/>!=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d4/d24/classSG_1_1AuxTypePlaceholder" kindref="compound">SG::AuxTypePlaceholder</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/d74/classSG_1_1ExcAuxTypeMismatch" kindref="compound" tooltip="Exception --- Type mismatch for aux variable.">SG::ExcAuxTypeMismatch</ref><sp/>(i-&gt;second,<sp/>ti,<sp/>*m.m_ti);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fall<sp/>through,<sp/>get<sp/>a<sp/>new<sp/>auxid<sp/>and<sp/>real<sp/>type<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>auxid<sp/>needed<sp/>so<sp/>a<sp/>new<sp/>data<sp/>vector<sp/>is<sp/>created<sp/>in<sp/>the<sp/>AuxStore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAuxTypeVectorFactory*<sp/>fac<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>ti);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fac<sp/>||<sp/>fac-&gt;isDynamic())<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>IAuxTypeVectorFactory*<sp/>fac2<sp/>=<sp/>(*this.*makeFactory)();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fac2)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(lock,<sp/>ti,<sp/>fac2);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fac<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>ti);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fac)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_auxid;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>m_types.size();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>m_types.resize<sp/>(auxid+1);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>m_auxids[key]<sp/>=<sp/>auxid;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>typeinfo_t&amp;<sp/>t<sp/>=<sp/>m_types[auxid];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>t.m_name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>t.m_clsname<sp/>=<sp/>clsname;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>t.m_ti<sp/>=<sp/>&amp;ti;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>t.m_factory<sp/>=<sp/>fac;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>setELFlags<sp/>(lock,<sp/>auxid);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxid;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAuxTypeVectorFactory*</highlight></codeline>
<codeline lineno="720"><highlight class="normal">AuxTypeRegistry::getFactoryLocked<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>ti)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="721"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ti_map_t::const_iterator<sp/>it<sp/>=<sp/>m_factories.find<sp/>(&amp;ti);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_factories.end())</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AuxTypeRegistry::setELFlags<sp/>(upgrading_lock_t&amp;<sp/></highlight><highlight class="comment">/*lock*/</highlight><highlight class="normal">,<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>m_isEL.resize<sp/>(auxid+1);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>m_isELVec.resize<sp/>(auxid+1);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>std::string<sp/>tname<sp/>=<sp/><sp/><ref refid="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" kindref="member" tooltip="Convert a type_info to a normalized string representation (matching the names used...">normalizedTypeinfoName</ref><sp/>(*m_types[auxid].m_ti);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>pat1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ElementLink&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>pat2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;ElementLink&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tname.substr<sp/>(0,<sp/>pat1.size())<sp/>==<sp/>pat1)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isEL[auxid]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tname.substr<sp/>(0,<sp/>pat2.size())<sp/>==<sp/>pat2)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isELVec[auxid]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AuxTypeRegistry::applyELThinning<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AuxTypeRegistry::applyELThinning<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="df/d13/classElementLinkBase" kindref="compound" tooltip="A base class holding the container independent part of ElementLink.">ElementLinkBase</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(dst)-&gt;thin();</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="766"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AuxTypeRegistry::applyELVecThinning<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AuxTypeRegistry::applyELVecThinning<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)</highlight></codeline>
<codeline lineno="780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>std::vector&lt;ElementLinkBase&gt;&amp;<sp/>v<sp/>=<sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;ElementLinkBase&gt;*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(dst);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sz;<sp/>i++)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>v[i].thin();</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxTypeRegistry.cxx"/>
  </compounddef>
</doxygen>
