<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/dc1/classxAOD_1_1TrigPassBits__v1" kind="class" prot="public">
    <compoundname>xAOD::TrigPassBits_v1</compoundname>
    <basecompoundref refid="dc/db0/classSG_1_1AuxElement" prot="public" virt="non-virtual">SG::AuxElement</basecompoundref>
    <includes refid="de/d58/TrigPassBits__v1_8h" local="no">TrigPassBits_v1.h</includes>
      <sectiondef kind="user-defined">
      <header>Helper functions for easier usage</header>
      <description><para><anchor id="_1amgrpc1b448dac77540517015167b49ef9908"/> </para></description>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::reset</definition>
        <argsstring>(const CONT *container, uint32_t containerKey=0xffff)</argsstring>
        <name>reset</name>
        <param>
          <type>const CONT *</type>
          <declname>container</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>containerKey</declname>
          <defval>0xffff</defval>
        </param>
        <briefdescription>
<para>Function configuring and resetting the object for a new target. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used to initialise or reset the object, to describe a target container. It sets up all the internal variables of the object so that subsequent maskPassing/isPassing calls would succeed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the container that this object should describe </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>containerKey</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> unique key describing the target container. (The sub-type index from the trigger navigation.) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.icc" bodystart="25" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJ</type>
          </param>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::markPassing</definition>
        <argsstring>(const OBJ *obj, const CONT *container, bool passed=true)</argsstring>
        <name>markPassing</name>
        <param>
          <type>const OBJ *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const CONT *</type>
          <declname>container</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>passed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Mark one of the elements of the target container as passing/failing. </para>        </briefdescription>
        <detaileddescription>
<para>Tried to use const references in the arguments, but then the function overload broke. So instead of providing template and non-template functions with slightly different names, decided to use pointers in the interface instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose state should be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container that the object is part of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passed</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;passing state&quot; of the specified object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.icc" bodystart="52" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aaf88d3d6628072c6e35dfd6c04c2b6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::markPassing</definition>
        <argsstring>(size_t index, bool passed=true)</argsstring>
        <name>markPassing</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>passed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Mark one of the elements of the target container as passing/failing. </para>        </briefdescription>
        <detaileddescription>
<para>Non-template function for marking an element with the specified index as passing/non-passing. Performs fewer checks than the template function, so should be used with care.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the object to set the state of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passed</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;passing state&quot; of the object with the specified index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/Root/TrigPassBits_v1.cxx" bodystart="23" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJ</type>
          </param>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool xAOD::TrigPassBits_v1::isPassing</definition>
        <argsstring>(const OBJ *obj, const CONT *container) const </argsstring>
        <name>isPassing</name>
        <param>
          <type>const OBJ *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const CONT *</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Check if an element of a container is passing/failing. </para>        </briefdescription>
        <detaileddescription>
<para>The same comment applied as for the <computeroutput>markPassing</computeroutput> function. In order to avoid clashes with the non-template function, I had to use pointer arguments for the function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The objects whose state we should check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container that the object is part of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The &quot;passing state&quot; of the object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.icc" bodystart="82" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1ad3be6ccb0643f76508ccaeb7e31dc610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::TrigPassBits_v1::isPassing</definition>
        <argsstring>(size_t index) const </argsstring>
        <name>isPassing</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Check if an element of a container is passing/failing. </para>        </briefdescription>
        <detaileddescription>
<para>Non-template function for checking the state of an object with a given index inside the container.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the object to check the state of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The &quot;passing state&quot; of the object with the specified index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/Root/TrigPassBits_v1.cxx" bodystart="63" bodyend="86"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Raw data accessors</header>
      <description><para><anchor id="_1amgrpff2a238e1082479320e6781fd2eb8aae"/> </para></description>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t xAOD::TrigPassBits_v1::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>The size of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="64"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8ba96aecc568d354b9baf92a86fc9892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::setSize</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>setSize</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the size of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="66"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; uint32_t &gt; &amp;</type>
        <definition>const std::vector&lt; uint32_t &gt;&amp; xAOD::TrigPassBits_v1::passBits</definition>
        <argsstring>() const </argsstring>
        <name>passBits</name>
        <briefdescription>
<para>The internal bitmap created with the hypo decisions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a3b66899807ab062d63159bcc9b9514eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::setPassBits</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;value)</argsstring>
        <name>setPassBits</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the internal bitmap directly (not recommended). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8aa554d42ae743e95e43b7633f23b4b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t xAOD::TrigPassBits_v1::containerKey</definition>
        <argsstring>() const </argsstring>
        <name>containerKey</name>
        <briefdescription>
<para>Hashed <ref refid="dd/d59/namespaceSG" kindref="compound">SG</ref> key of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="74"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a38bf3385c1b40e3a2c55aaae979637d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::setContainerKey</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>setContainerKey</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the hashed <ref refid="dd/d59/namespaceSG" kindref="compound">SG</ref> key of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a68618b5d674a66efa03936118e0634a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t xAOD::TrigPassBits_v1::containerClid</definition>
        <argsstring>() const </argsstring>
        <name>containerClid</name>
        <briefdescription>
<para>CLID of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="79"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1afaabc84dadc7ecf137a72baadefbb47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TrigPassBits_v1::setContainerClid</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>setContainerClid</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the CLID of the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1ae83a6c89f6358a54acf8145d7ce992bc" prot="private" static="no" mutable="yes">
        <type>const void *</type>
        <definition>const void* xAOD::TrigPassBits_v1::m_container</definition>
        <argsstring></argsstring>
        <name>m_container</name>
        <reimplements refid="dc/db0/classSG_1_1AuxElement_1ac93b1b9dbe66ad0e02eb767cc3860ce9">m_container</reimplements>
        <briefdescription>
<para>Transient pointer to the target container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aee2dfec74b0f55d94aaa3d0b6ccc8bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::TrigPassBits_v1::TrigPassBits_v1</definition>
        <argsstring>()</argsstring>
        <name>TrigPassBits_v1</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/Root/TrigPassBits_v1.cxx" bodystart="11" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> describing which elements in a container passed a trigger chain</para><para>This type allows us to attach simple pass/fail information to the containers that we reconstructed in Fex algorithms, in Hypo algorithms. In this case we can&apos;t just decorate the original objects, as we may want to evaluate a lot of hypotheses on the exact same objects.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt; </para><simplesectsep/><para>Tomasz Bold &lt;<ulink url="mailto:Tomasz.Bold@cern.ch">Tomasz.Bold@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>704009 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-10-28 09:32:05 +0100 (Wed, 28 Oct 2015) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="21385">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="21383">
        <label>xAOD::TrigPassBits_v1</label>
        <link refid="d9/dc1/classxAOD_1_1TrigPassBits__v1"/>
        <childnode refid="21384" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21384">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="21385" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21399">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="21400">
        <label>Internal::hash_code_base&lt;Value , Value , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="21395">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="21404">
        <label>SG::AuxElementData</label>
        <link refid="dc/dfb/classSG_1_1AuxElementData"/>
        <childnode refid="21389" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21398">
        <label>SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="21399" relation="public-inheritance">
        </childnode>
        <childnode refid="21400" relation="public-inheritance">
        </childnode>
        <childnode refid="21401" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21393">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="21394">
        <label>DataLinkBase</label>
        <link refid="dd/d9d/classDataLinkBase"/>
      </node>
      <node id="21388">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="21391">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="21392">
        <label>DataLink&lt; SG::IConstAuxStore &gt;</label>
        <link refid="da/da2/classDataLink"/>
        <childnode refid="21393" relation="public-inheritance">
        </childnode>
        <childnode refid="21394" relation="public-inheritance">
        </childnode>
        <childnode refid="21395" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="21391" relation="usage">
          <edgelabel>m_object</edgelabel>
        </childnode>
      </node>
      <node id="21386">
        <label>xAOD::TrigPassBits_v1</label>
        <link refid="d9/dc1/classxAOD_1_1TrigPassBits__v1"/>
        <childnode refid="21387" relation="public-inheritance">
        </childnode>
        <childnode refid="21403" relation="usage">
          <edgelabel>m_container</edgelabel>
        </childnode>
      </node>
      <node id="21390">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="21391" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21397">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="21398" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21401">
        <label>Internal::map_base&lt;Value , Value , Internal::identity&lt; Value &gt; , unique_keys, hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="21402">
        <label>SG::AuxVectorData::Cache</label>
        <childnode refid="21403" relation="usage">
          <edgelabel>m_cache</edgelabel>
        </childnode>
      </node>
      <node id="21396">
        <label>mutex</label>
      </node>
      <node id="21387">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="21388" relation="public-inheritance">
        </childnode>
        <childnode refid="21389" relation="usage">
          <edgelabel>m_container</edgelabel>
        </childnode>
        <childnode refid="21404" relation="usage">
          <edgelabel>m_privateData</edgelabel>
          <edgelabel>s_privatePlaceholder</edgelabel>
        </childnode>
      </node>
      <node id="21403">
        <label>void</label>
      </node>
      <node id="21389">
        <label>SG::AuxVectorData</label>
        <link refid="db/dd6/classSG_1_1AuxVectorData"/>
        <childnode refid="21390" relation="usage">
          <edgelabel>m_store</edgelabel>
        </childnode>
        <childnode refid="21392" relation="usage">
          <edgelabel>m_constStoreLink</edgelabel>
        </childnode>
        <childnode refid="21391" relation="usage">
          <edgelabel>m_constStore</edgelabel>
        </childnode>
        <childnode refid="21396" relation="usage">
          <edgelabel>m_mutex</edgelabel>
        </childnode>
        <childnode refid="21397" relation="usage">
          <edgelabel>s_emptySet</edgelabel>
        </childnode>
        <childnode refid="21402" relation="usage">
          <edgelabel>m_cache</edgelabel>
          <edgelabel>m_constCache</edgelabel>
          <edgelabel>m_decorCache</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/xAODTrigger/versions/TrigPassBits_v1.h" bodystart="32" bodyend="89"/>
    <listofallmembers>
      <member refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a7aaa8e9eb54091ab7ee43bb7c73918e4" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1acd13909ea46d99e1b502834f133a159c" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5279e0349d690c26121f60b5a8778322" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1fc119dd13bd2c74f2ce4f2ba19c8898" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afa20cbd90cdb931e16c2751709e35271" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af85b897bffef87879e0ed6a58428a60b" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6c8fc3d315a5ec0633e7ae6a2b26a432" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac8345167ba85a0788d804a39b8325a36" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>clearCache</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a71044a012a37af1bb0b6fab3d3ea1230" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>clearDecorations</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a45f6f3563f9c8f088e4b840f81103588" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>container</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a68618b5d674a66efa03936118e0634a8" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>containerClid</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8aa554d42ae743e95e43b7633f23b4b3" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>containerKey</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>getAuxIDs</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>getConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>getStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>hasNonConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>hasStore</name></member>
      <member refid="df/dca/classSG_1_1IAuxElement_1afdd6ee3469014a690d257119d34ec598" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>IAuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>index</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af727b22ab51f1d848fc3cf59065b99ea" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>isAvailable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a864fc1dab026cbcf20b2c7e3904b89a4" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>isAvailableWritable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5c56e0b548ba0f0fa6eba200defaa44d" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>isAvailableWritableAsDecoration</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>isPassing</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1ad3be6ccb0643f76508ccaeb7e31dc610" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>isPassing</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1ae83a6c89f6358a54acf8145d7ce992bc" prot="private" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>m_container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad2eaf2e38536e93c05aebaf1218516a2" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a164f94b3ddbbc773ba8beefdb7cb8677" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>makePrivateStore</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>markPassing</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aaf88d3d6628072c6e35dfd6c04c2b6f2" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>markPassing</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1ecd49ad16cba61c3131046d8e068650" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>operator=</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>passBits</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>releasePrivateStore</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>reset</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a3079709e44e8ac7452c05454f4994ce9" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setConstStore</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1afaabc84dadc7ecf137a72baadefbb47e" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setContainerClid</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a38bf3385c1b40e3a2c55aaae979637d9" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setContainerKey</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a68b13428943609fd2b56c35c9dec85b3" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setNonConstStore</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a3b66899807ab062d63159bcc9b9514eb" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setPassBits</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8ba96aecc568d354b9baf92a86fc9892" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setSize</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9cc58e245a417833f297e836d9559a32" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4bdca4ef5f1df892b5dc9742644444b8" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6a154ec406bc6531a348a80e679da31f" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>SG::AuxVectorBase</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4573c8a5a16556f7a1826c502a8a1577" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>SG::AuxVectorBase_test</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>size</name></member>
      <member refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aee2dfec74b0f55d94aaa3d0b6ccc8bd7" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>TrigPassBits_v1</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>usingPrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>usingStandaloneStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a0b6a5f12eb826137b6d218f5738bb0b1" prot="public" virt="non-virtual"><scope>xAOD::TrigPassBits_v1</scope><name>~AuxElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
