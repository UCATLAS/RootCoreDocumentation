<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/dc8/pointer__list__test_8cxx" kind="file">
    <compoundname>pointer_list_test.cxx</compoundname>
    <includes refid="df/d5b/pointer__list_8h" local="yes">CxxUtils/pointer_list.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstdlib</includes>
    <incdepgraph>
      <node id="113742">
        <label>iterator</label>
      </node>
      <node id="113740">
        <label>CxxUtils/pointer_list.h</label>
        <link refid="df/d5b/pointer__list_8h"/>
        <childnode refid="113741" relation="include">
        </childnode>
        <childnode refid="113742" relation="include">
        </childnode>
        <childnode refid="113743" relation="include">
        </childnode>
      </node>
      <node id="113739">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx</label>
        <link refid="pointer_list_test.cxx"/>
        <childnode refid="113740" relation="include">
        </childnode>
        <childnode refid="113746" relation="include">
        </childnode>
        <childnode refid="113744" relation="include">
        </childnode>
        <childnode refid="113747" relation="include">
        </childnode>
      </node>
      <node id="113744">
        <label>cassert</label>
      </node>
      <node id="113741">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="113746">
        <label>vector</label>
      </node>
      <node id="113747">
        <label>cstdlib</label>
      </node>
      <node id="113743">
        <label>CxxUtils/pointer_list.icc</label>
        <link refid="d1/d99/pointer__list_8icc"/>
        <childnode refid="113744" relation="include">
        </childnode>
        <childnode refid="113745" relation="include">
        </childnode>
      </node>
      <node id="113745">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d9/dc8/pointer__list__test_8cxx_1a6a8b35317f04d81888e491a8b71465d6" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t toerase[]</definition>
        <argsstring>[]</argsstring>
        <name>toerase</name>
        <initializer> {
  0, 1, 5, 14, 15, 16, 17, 20, 29, 30, 31, 500
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dc8/pointer__list__test_8cxx_1a6fa588fc6d88c39d34c29467f792d5b6" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t n_toerase</definition>
        <argsstring></argsstring>
        <name>n_toerase</name>
        <initializer> sizeof (toerase) / sizeof (toerase[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="24" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1a084cac932020de8529a4e1800e7427cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testerase</definition>
        <argsstring>(pointer_list&lt;&gt; &amp;l, size_t nerase, std::vector&lt; int &gt; &amp;v)</argsstring>
        <name>testerase</name>
        <param>
          <type><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref>&lt;&gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nerase</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="27" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1ac159f47e5b9d414db20b5f912ed688fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testit1</definition>
        <argsstring>(pointer_list&lt;&gt; &amp;l, size_t n)</argsstring>
        <name>testit1</name>
        <param>
          <type><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref>&lt;&gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="61" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1ab8ad194e8443e9cb61c788dcceb3d08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testit</definition>
        <argsstring>(int n, pointer_list&lt;&gt;::pool_type &amp;pool)</argsstring>
        <name>testit</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref>&lt;&gt;::pool_type &amp;</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="133" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc8/pointer__list__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" line="161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx" bodystart="160" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d5b/pointer__list_8h" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">CxxUtils/pointer_list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CxxUtils;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>toerase[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>0,<sp/>1,<sp/>5,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>20,<sp/>29,<sp/>30,<sp/>31,<sp/>500</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_toerase<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(toerase)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(toerase[0]);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testerase<sp/>(<ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">pointer_list&lt;&gt;</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nerase,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nerase<sp/>&gt;=<sp/>n_toerase)<sp/>std::abort();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" kindref="member" tooltip="The current size of the container. O(1).">size</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>it<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::advance<sp/>(it,<sp/>toerase[nerase]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a6d6f01e5893dbe81e3bcb243783c3f8c" kindref="member" tooltip="Erase one element. O(n).">erase</ref><sp/>(it);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>assert<sp/>(l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" kindref="member" tooltip="The current size of the container. O(1).">size</ref>()<sp/>==<sp/>sz-1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>end<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a3755fcb76a4052c866e9a0b402e869a7" kindref="member" tooltip="Iterator at the end of the container.">end</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;=<sp/>nerase;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>toerase[j]+j)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skip)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(*it<sp/>==<sp/>&amp;v[i]);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>assert<sp/>(it<sp/>==<sp/>end);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testit1<sp/>(<ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">pointer_list&lt;&gt;</ref>&amp;<sp/>l,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>assert<sp/>(l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" kindref="member" tooltip="The current size of the container. O(1).">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>assert<sp/>(l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aabc1382cca7d249203c993f1676690fc" kindref="member" tooltip="Test to see if the container is empty.">empty</ref>());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v<sp/>(n);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" kindref="member" tooltip="Add a new element to the end of the container. O(1).">push_back</ref><sp/>(&amp;v[i]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" kindref="member" tooltip="The current size of the container. O(1).">size</ref>()<sp/>==<sp/>i+1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>beg<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>end<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a3755fcb76a4052c866e9a0b402e869a7" kindref="member" tooltip="Iterator at the end of the container.">end</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(beg<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*beg<sp/>==<sp/>&amp;v[i]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>++beg;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>assert<sp/>(beg<sp/>==<sp/>end);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert<sp/>(i<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aabc1382cca7d249203c993f1676690fc" kindref="member" tooltip="Test to see if the container is empty.">empty</ref>());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>beg<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*++beg<sp/>==<sp/>&amp;v[1]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*beg<sp/>==<sp/>&amp;v[1]);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>beg<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*beg++<sp/>==<sp/>&amp;v[0]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*beg<sp/>==<sp/>&amp;v[1]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_toerase;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toerase[i]<sp/>&gt;=<sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" kindref="member" tooltip="The current size of the container. O(1).">size</ref>())</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>testerase<sp/>(l,<sp/>i,<sp/>v);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testit<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound" tooltip="Very simple allocator for use with pointer_list.">pointer_list&lt;&gt;::pool_type</ref>&amp;<sp/>pool)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">pointer_list&lt;&gt;</ref><sp/>l<sp/>(pool);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>testit1<sp/>(l,<sp/>n);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>if<sp/>we<sp/>clear<sp/>and<sp/>refill,<sp/>we<sp/>don&apos;t<sp/>allocate<sp/>more<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inuse<sp/>=<sp/>pool.<ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a8fe3059d4e568e9cbff5cd49746fe52a" kindref="member" tooltip="Return the current number of allocated chunks.">nchunks</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a576e42bb370de83f7c35adb55196ddba" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>testit1<sp/>(l,<sp/>n);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert<sp/>(pool.<ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a8fe3059d4e568e9cbff5cd49746fe52a" kindref="member" tooltip="Return the current number of allocated chunks.">nchunks</ref>()<sp/>==<sp/>inuse);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound" tooltip="Very simple allocator for use with pointer_list.">pointer_list&lt;&gt;::pool_type</ref><sp/>pool;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>testit<sp/>(0,<sp/>pool);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>testit<sp/>(1,<sp/>pool);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>testit<sp/>(5,<sp/>pool);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>testit<sp/>(14,<sp/>pool);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>testit<sp/>(15,<sp/>pool);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>testit<sp/>(16,<sp/>pool);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>testit<sp/>(17,<sp/>pool);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>testit<sp/>(29,<sp/>pool);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>testit<sp/>(30,<sp/>pool);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>testit<sp/>(31,<sp/>pool);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>testit<sp/>(1000,<sp/>pool);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound" tooltip="Very simple allocator for use with pointer_list.">pointer_list&lt;&gt;::pool_type</ref><sp/>pool;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v<sp/>(35);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound" tooltip="A fast way to store a variable-sized collection of pointers.">pointer_list&lt;&gt;</ref><sp/>l<sp/>(pool);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" kindref="member" tooltip="Add a new element to the end of the container. O(1).">push_back</ref><sp/>(&amp;v[i]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>pos<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::advance<sp/>(pos,<sp/>15);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a6d6f01e5893dbe81e3bcb243783c3f8c" kindref="member" tooltip="Erase one element. O(n).">erase</ref><sp/>(pos);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>pos<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::advance<sp/>(pos,<sp/>14);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a6d6f01e5893dbe81e3bcb243783c3f8c" kindref="member" tooltip="Erase one element. O(n).">erase</ref><sp/>(pos);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>l.<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" kindref="member" tooltip="Add a new element to the end of the container. O(1).">push_back</ref><sp/>(&amp;v[14]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>pos<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" kindref="member" tooltip="Iterator at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound" tooltip="Forward iterator over the list.">pointer_list&lt;&gt;::iterator</ref><sp/>end<sp/>=<sp/>l.<ref refid="d1/d88/classCxxUtils_1_1pointer__list_1a3755fcb76a4052c866e9a0b402e869a7" kindref="member" tooltip="Iterator at the end of the container.">end</ref>();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*pos<sp/>==<sp/>&amp;v[j]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>++pos;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/pointer_list_test.cxx"/>
  </compounddef>
</doxygen>
