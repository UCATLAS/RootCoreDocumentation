<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d83/namespaceRCU" kind="namespace">
    <compoundname>RCU</compoundname>
    <innerclass refid="d5/d7c/classRCU_1_1ExceptionMsg" prot="public">RCU::ExceptionMsg</innerclass>
    <innerclass refid="db/d42/structRCU_1_1Message" prot="public">RCU::Message</innerclass>
    <innerclass refid="d9/da0/classRCU_1_1UnitTestDir" prot="public">RCU::UnitTestDir</innerclass>
    <innernamespace refid="d8/da5/namespaceRCU_1_1Check">RCU::Check</innernamespace>
    <innernamespace refid="df/d02/namespaceRCU_1_1Shell">RCU::Shell</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" prot="public" static="no">
        <name>MessageType</name>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955ea882902888e75d9ddb501e6fc7b24b7dd" prot="public">
          <name>MESSAGE_REGULAR</name>
          <briefdescription>
<para>description: print a regular message </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955ea1edabba6e7dbbed7408efb733e989bee" prot="public">
          <name>MESSAGE_WARNING</name>
          <briefdescription>
<para>description: print a warning </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955eafa35b6ca894da0c54255e12a0aad265d" prot="public">
          <name>MESSAGE_ERROR</name>
          <briefdescription>
<para>description: print an error </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955ea3dbce95f8f4d8689e5df8f96f551a200" prot="public">
          <name>MESSAGE_EXCEPTION</name>
          <briefdescription>
<para>description: send out an exception </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955ea018bd98bb2d91f01ea292ea19a1bad85" prot="public">
          <name>MESSAGE_ABORT</name>
          <briefdescription>
<para>description: print and abort </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955ea1d604967fcc3a6e26acb00777c572d1e" prot="public">
          <name>MESSAGE_UNSPECIFIED</name>
          <briefdescription>
<para>description: unspecified message type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/MessageType.h" line="24" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/MessageType.h" bodystart="23" bodyend="42"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d83/namespaceRCU_1a33d1aab649b47e38f72a19729a0ccbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::check_root_version</definition>
        <argsstring>()</argsstring>
        <name>check_root_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: check whether we are using a consistent root version guarantee: strong failures: version missmatch </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/CheckRootVersion.cxx" line="34"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1abbcbf76aea12380b31878ea3872e7c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::disable_root_version_check</definition>
        <argsstring>()</argsstring>
        <name>disable_root_version_check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: disable the root version check guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/CheckRootVersion.cxx" line="55"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1ad6b11c00605f529a1cde4fdc548dc128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::hadd</definition>
        <argsstring>(std::string output_file, std::vector&lt; std::string &gt; input_files, unsigned max_files)</argsstring>
        <name>hadd</name>
        <param>
          <type>std::string</type>
          <declname>output_file</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>input_files</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: perform the hadd functionality guarantee: basic failures: out of memory III failures: i/o errors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/hadd.cxx" line="32"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1ac0d5d6a5fff1c4171252fea0ca4de8eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::hadd_core</definition>
        <argsstring>(std::string output_file, std::vector&lt; std::string &gt; input_files, unsigned max_files)</argsstring>
        <name>hadd_core</name>
        <param>
          <type>std::string</type>
          <declname>output_file</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>input_files</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_files</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: perform the core hadd functionality guarantee: basic failures: out of memory III failures: i/o errors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/hadd.cxx" line="51"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1a87852c5888aefa40fff4a7a7bc493cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RCU::locate</definition>
        <argsstring>(const std::string &amp;locations)</argsstring>
        <name>locate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>locations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: find the file with the given name from a list of locations separated by &quot;::&quot;. the list may contain either files or URLs starting with &quot;http://&quot;. URLs will be downloaded into the data/ directory, where they will stay permanently. returns: the path in the local filesystem guarantee: strong failures: out of memory III failures: inconsistent file names failures: download errors rationale: depending on where you are executing your code, you may or may not have access to /cvmfs where important data files are kept. this mechanism allows to pick it up from various alternate places. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Locate.cxx" line="29"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1a86e1ef8c19f37c37bba0edc445540c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const char *msg)</argsstring>
        <name>send_message</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="29"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1af392ba4cb2469048233c97efb98fe5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const std::string &amp;msg)</argsstring>
        <name>send_message</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="43"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1af1113f30c8047adbd55d70a7952545f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const TString &amp;msg)</argsstring>
        <name>send_message</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const TString &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="51"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1ad4bdee95724528f85c9da6a83ccaa2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message_abort</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const char *msg)</argsstring>
        <name>send_message_abort</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="59"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1ad4ba456f931eae366777efa92df5edae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message_abort</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const std::string &amp;msg)</argsstring>
        <name>send_message_abort</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="75"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1a5d207c85a5395d068aeb2dce01de0ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::send_message_abort</definition>
        <argsstring>(const char *package, const char *file, unsigned line, MessageType type, const TString &amp;msg)</argsstring>
        <name>send_message_abort</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="d9/d83/namespaceRCU_1aead8fc78ddc262a6e40e8eb6bf71955e" kindref="member">MessageType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const TString &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/PrintMsg.cxx" line="83"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1aea9c76ac79711b2f15e7823b72a63a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RCU::ranLoadPackages</definition>
        <argsstring>()</argsstring>
        <name>ranLoadPackages</name>
        <briefdescription>
<para>whether load_packages.C has been run </para>        </briefdescription>
        <detaileddescription>
<para>This is mostly meant for the EventLoop PROOF driver, which need to know whether to run this again or not. <simplesect kind="par"><title>Guarantee</title><para>no-fail  this is the method that should be called to check this, as the exact mechanism for checking this may change </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/ranLoadPackages.cxx" line="27"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1a9b4f6416213f8a4bb0288c43860203bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RCU::SetDirectory</definition>
        <argsstring>(TObject *object, TDirectory *directory)</argsstring>
        <name>SetDirectory</name>
        <param>
          <type>TObject *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>TDirectory *</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: set the directory this object is associated with returns: whether the object type actively knows its directory, otherwise this is a no-op guarantee: strong failures: directory add errors requires: object != 0 rationale: this is mainly meant to allow calling SetDirectory(0) on arbitrary objects, but it also tries to do the right thing when adding objects to a directory. For the most part it is a workaround for TH1 objects keeping track of which directory they belong to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/RootUtils.cxx" line="29"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1ab1c54d25ffc26bd9784946bcda604b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RCU::substitute</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;pattern, const std::string &amp;with)</argsstring>
        <name>substitute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: substitute all occurences of &quot;pattern&quot; with &quot;with&quot; in the string &quot;str&quot; returns: the substituted string guarantee: out of memory II requires: !pattern.empty() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/StringUtil.cxx" line="26"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1aa110e4059664bce7be1f3d8ba4f3308d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RCU::match_expr</definition>
        <argsstring>(const boost::regex &amp;expr, const std::string &amp;str)</argsstring>
        <name>match_expr</name>
        <param>
          <type>const boost::regex &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether we can match the entire string with the regular expression guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/StringUtil.cxx" line="39"/>
      </memberdef>
      <memberdef kind="function" id="d9/d83/namespaceRCU_1afd6cf303e6328f2fcaae645f40855a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RCU::glob_to_regexp</definition>
        <argsstring>(const std::string &amp;glob)</argsstring>
        <name>glob_to_regexp</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>glob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: a string that is the regular expression equivalent of the given glob expression guarantee: strong failures: out of memory II rationale: I am returning a TString instead of an std::string, so that this can be passed directly into regexp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/StringUtil.cxx" line="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module defines a variety of assert style macros. The interface in this module is indended for experts only. This module is considered to be in the pre-alpha stage. This module defines a variety of assert style macros for different situations, i.e. macros that test whether a particular condition has been met and that trigger an error if the condition is not met. The exact error behavior depends on the configuration options as well as the macro called. The main distinction is the purpose of the test: RCU_REQUIRE: checks on the arguments to a function RCU_PROVIDE: checks on the results of a function RCU_ASSERT: checks that happen in the middle of a function RCU_INVARIANT: checks that happen in the invariant test These can be further modified using postfixes: _SLOW: tests that are in the critical path of a program _SOFT: tests that are expected to fail in correctly implemented programs, i.e. should trigger an exception 2: tests that have a textual description of the condition 0: tests that always fail Furthermore there are also invariant tests in here (calling MyClass::testInvariant()): RCU_READ_INVARIANT: an invariant is read, but not modified RCU_CHANGE_INVARIANT: an invariant is read and modified RCU_NEW_INVARIANT: an invariant has been newly established RCU_DESTROY_INVARIANT: an invariant is about to be decomissioned</para><para>This module provides a lot of global definitions, forward declarations and includes that are used by all modules. As such it doesn&apos;t fall into the user vs. expert classification.</para><para>This module defines macros for reporting errors. The interface in this module is indended for experts only. This module is considered to be in the pre-alpha stage.</para><para>This module defines a class that manages a temporary directory for unit tests. The interface provided in this module is intended for experts only. The module is considered to be in the pre-alpha stage. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="26"/>
  </compounddef>
</doxygen>
