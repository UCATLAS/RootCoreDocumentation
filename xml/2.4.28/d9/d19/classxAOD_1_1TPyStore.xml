<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d19/classxAOD_1_1TPyStore" kind="class" prot="public">
    <compoundname>xAOD::TPyStore</compoundname>
    <basecompoundref refid="dd/dae/classxAOD_1_1TStore" prot="public" virt="non-virtual">xAOD::TStore</basecompoundref>
    <includes refid="dd/d87/TPyStore_8h" local="no">TPyStore.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d19/classxAOD_1_1TPyStore_1a13f4f913263da6aecef1a97ea6d02f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::TPyStore::TPyStore</definition>
        <argsstring>()</argsstring>
        <name>TPyStore</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TPyStore.cxx" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d9/d19/classxAOD_1_1TPyStore_1a51f5ae57006fcd447f31bd163ff47091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TPyStore::contains</definition>
        <argsstring>(const std::string &amp;key, const std::string &amp;type) const </argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Function checking if an object with a given key and type is available. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used in the same manner as <ref refid="dd/dae/classxAOD_1_1TStore_1aeb956b1b9725283d6f084b957ab21460" kindref="member">TStore::contains</ref>&lt;...&gt;(...), but instead of providing a type, one gives it a type name.</para><para>Note that only types that have a proper ROOT dictionary can be used. Unlike C++, which allows one to insert any type of object into <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">TStore</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key of the object that we&apos;re looking for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type name of the object we&apos;re trying to access </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the object is acessible, <computeroutput>kFALSE</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TPyStore.cxx" bodystart="30" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="d9/d19/classxAOD_1_1TPyStore_1a745ec44aaea6c351cbb45c703a254d01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TPyStore::isConst</definition>
        <argsstring>(const std::string &amp;key, const std::string &amp;type) const </argsstring>
        <name>isConst</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Function checking if an object with a given key and type is constant. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used in the same manner as <ref refid="dd/dae/classxAOD_1_1TStore_1a18539215d917e253624d98674205d0e2" kindref="member">TStore::isConst</ref>&lt;...&gt;(...), but instead of providing a type, one gives it a type name.</para><para>Note that only types that have a proper ROOT dictionary can be used. Unlike C++, which allows one to insert any type of object into <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">TStore</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key of the object that we&apos;re looking for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type name of the object we&apos;re trying to access </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the object is acessible, <computeroutput>kFALSE</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TPyStore.cxx" bodystart="66" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="d9/d19/classxAOD_1_1TPyStore_1a21976430173672379a0f2e47db87f149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TPyStore::record</definition>
        <argsstring>(void *obj, const std::string &amp;key, const std::string &amp;type)</argsstring>
        <name>record</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Record an object into the store in a typeless way. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used in the same manner as <ref refid="dd/dae/classxAOD_1_1TStore_1a96c78b3019dbf418a93c65c9fe31e9e8" kindref="member">TStore::record</ref>&lt;...&gt;(...), but instead of providing a type, one gives it a type name and a typeless pointer.</para><para>Note that only types that have a proper ROOT dictionary can be used. Unlike C++, which allows one to insert any type of object into <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">TStore</ref>.</para><para>Also note that this function doesn&apos;t take ownership of the recorded object. In Python all the objects created by the interpreter are managed by the interpreter. So this code is not supposed to delete them, otherwise all hell breaks loose.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object to be put into the store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the object in the store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type name of the object we are inserting </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The usual <ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">xAOD::TReturnCode</ref> types </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TPyStore.cxx" bodystart="107" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d9/d19/classxAOD_1_1TPyStore_1a5859c9f14f8efc5b7b0a158be4350ec0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TPyStore::dump</definition>
        <argsstring>() const </argsstring>
        <name>dump</name>
        <briefdescription>
<para>Print the contents of the store using a Python friendly function. </para>        </briefdescription>
        <detaileddescription>
<para>This is just a convenience function, to make it easier to print the contents of such objects in Python. Since the base class&apos;s <ref refid="dd/dae/classxAOD_1_1TStore_1ad541bef55ceb3442f0b9cc652de99b7f" kindref="member">print()</ref> function has a special meaning in Python. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TPyStore.cxx" bodystart="123" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Python interface to <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref></para><para>In order to make it possible to record objects that are created in Python, into an <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref> object (to be able to pass it to some tools that expect the object to be in the event for instance), this class extends the <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref> object with some non-template functions. Functions that are inconvenient to use from C++, but which allow for much more flexibility in PyROOT.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>659468 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-04-08 16:31:56 +0200 (Wed, 08 Apr 2015) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="20154">
        <label>xAOD::TStore</label>
        <link refid="dd/dae/classxAOD_1_1TStore"/>
      </node>
      <node id="20153">
        <label>xAOD::TPyStore</label>
        <link refid="d9/d19/classxAOD_1_1TPyStore"/>
        <childnode refid="20154" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="20156">
        <label>xAOD::TStore</label>
        <link refid="dd/dae/classxAOD_1_1TStore"/>
      </node>
      <node id="20155">
        <label>xAOD::TPyStore</label>
        <link refid="d9/d19/classxAOD_1_1TPyStore"/>
        <childnode refid="20156" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TPyStore.h" bodystart="31" bodyend="50"/>
    <listofallmembers>
      <member refid="dd/dae/classxAOD_1_1TStore_1a6aa618d5b10aaacebe720a0caf638f5f" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>clear</name></member>
      <member refid="d9/d19/classxAOD_1_1TPyStore_1a51f5ae57006fcd447f31bd163ff47091" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aeb956b1b9725283d6f084b957ab21460" prot="public" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a9b25f88a5e5ec80acc9d22a53f589972" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae6556cf35db8825b4143c8c6ea5945d0" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a6ed70ddc5db4f43d3e6a9bfc959336f1" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>contains</name></member>
      <member refid="d9/d19/classxAOD_1_1TPyStore_1a5859c9f14f8efc5b7b0a158be4350ec0" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>dump</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a4a7bb4492a62c0a94bc4dfb4514db973" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>getConstObject</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa4044ac928ea18fe6cde037cfcb8742d" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>getName</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1af0287550846fc6e0c69c1f65e57ca2a0" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>getName</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a9f1866019afad21c8b030cf1935a11b2" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>getObject</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a171f8adc5fae0914d7a9b1b93717b4a4" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>HashedKeys_t</name></member>
      <member refid="d9/d19/classxAOD_1_1TPyStore_1a745ec44aaea6c351cbb45c703a254d01" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>isConst</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a18539215d917e253624d98674205d0e2" prot="public" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>isConst</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae82c20f718265be2e220ff526ded80a8" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>isConst</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa445eab190ca1b872e1f5c5a773cbfc3" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>m_keys</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1acf6486d15c58f899901c161845787f4c" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>m_objects</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa9208fba017f226b07b8a78cee796457" prot="protected" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>Objects_t</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ad541bef55ceb3442f0b9cc652de99b7f" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>print</name></member>
      <member refid="d9/d19/classxAOD_1_1TPyStore_1a21976430173672379a0f2e47db87f149" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a96c78b3019dbf418a93c65c9fe31e9e8" prot="public" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a5d63f2f6b52e946913986acaa95bc9e1" prot="public" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a91d4380a4194ca93b2f5d37a470f1b09" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a725c949e0ece2bdfe9f35abdba35b0fb" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a23d2019acc3f5971630f50226c22c9a5" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ac3f9ae8ab7d62d1172a9b7dd40dff5b3" prot="protected" virt="non-virtual" ambiguityscope="xAOD::TStore::"><scope>xAOD::TPyStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a911277bb809260c13517533dc6b30104" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>remove</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a87fc04f8d3237bf94dfed5215a0316e5" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>remove</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae0da93791cc45f8ec3de2c3e96f9b809" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>retrieve</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a4f5366f44f31f1963cd6b50dfae2b7dd" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>retrieve</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a27c51530809f2f293efbe83bc21412c6" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>setActive</name></member>
      <member refid="d9/d19/classxAOD_1_1TPyStore_1a13f4f913263da6aecef1a97ea6d02f81" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>TPyStore</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ad77b6c7a3c0e676966d149e1733adfa9" prot="public" virt="non-virtual"><scope>xAOD::TPyStore</scope><name>TStore</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a7484805c0564e8de2f6e9c54583c8ae5" prot="public" virt="virtual"><scope>xAOD::TPyStore</scope><name>~TStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
