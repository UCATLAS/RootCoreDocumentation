<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d63/WhiteBoardSvc_8cxx" kind="file">
    <compoundname>WhiteBoardSvc.cxx</compoundname>
    <includes refid="df/dde/WhiteBoardSvc_8h" local="no">EventLoopAlgs/WhiteBoardSvc.h</includes>
    <includes local="no">memory</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="dc/db3/Worker_8h" local="no">EventLoop/Worker.h</includes>
    <includes refid="dd/d46/MetaData_8h" local="no">SampleHandler/MetaData.h</includes>
    <includes refid="db/d35/MetaVector_8h" local="no">SampleHandler/MetaVector.h</includes>
    <incdepgraph>
      <node id="129755">
        <label>EventLoopAlgs/Global.h</label>
        <link refid="dd/dcb/EventLoopAlgs_2EventLoopAlgs_2Global_8h_source"/>
      </node>
      <node id="129767">
        <label>TList.h</label>
      </node>
      <node id="129759">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="129757" relation="include">
        </childnode>
      </node>
      <node id="129770">
        <label>SampleHandler/Meta.h</label>
        <link refid="d8/d85/Meta_8h_source"/>
        <childnode refid="129768" relation="include">
        </childnode>
        <childnode refid="129771" relation="include">
        </childnode>
        <childnode refid="129758" relation="include">
        </childnode>
      </node>
      <node id="129771">
        <label>string</label>
      </node>
      <node id="129764">
        <label>map</label>
      </node>
      <node id="129757">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="129772">
        <label>SampleHandler/MetaVector.h</label>
        <link refid="db/d35/MetaVector_8h_source"/>
        <childnode refid="129768" relation="include">
        </childnode>
        <childnode refid="129765" relation="include">
        </childnode>
        <childnode refid="129770" relation="include">
        </childnode>
        <childnode refid="129760" relation="include">
        </childnode>
      </node>
      <node id="129765">
        <label>vector</label>
      </node>
      <node id="129754">
        <label>EventLoopAlgs/WhiteBoardSvc.h</label>
        <link refid="df/dde/WhiteBoardSvc_8h_source"/>
        <childnode refid="129755" relation="include">
        </childnode>
        <childnode refid="129756" relation="include">
        </childnode>
        <childnode refid="129760" relation="include">
        </childnode>
      </node>
      <node id="129761">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="129766">
        <label>Rtypes.h</label>
      </node>
      <node id="129769">
        <label>SampleHandler/MetaData.h</label>
        <link refid="dd/d46/MetaData_8h_source"/>
        <childnode refid="129768" relation="include">
        </childnode>
        <childnode refid="129770" relation="include">
        </childnode>
        <childnode refid="129760" relation="include">
        </childnode>
      </node>
      <node id="129763">
        <label>EventLoop/Worker.h</label>
        <link refid="dc/db3/Worker_8h_source"/>
        <childnode refid="129757" relation="include">
        </childnode>
        <childnode refid="129764" relation="include">
        </childnode>
        <childnode refid="129762" relation="include">
        </childnode>
        <childnode refid="129765" relation="include">
        </childnode>
        <childnode refid="129766" relation="include">
        </childnode>
        <childnode refid="129767" relation="include">
        </childnode>
        <childnode refid="129768" relation="include">
        </childnode>
      </node>
      <node id="129756">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="129757" relation="include">
        </childnode>
        <childnode refid="129758" relation="include">
        </childnode>
        <childnode refid="129759" relation="include">
        </childnode>
      </node>
      <node id="129758">
        <label>TNamed.h</label>
      </node>
      <node id="129753">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/Root/WhiteBoardSvc.cxx</label>
        <link refid="WhiteBoardSvc.cxx"/>
        <childnode refid="129754" relation="include">
        </childnode>
        <childnode refid="129762" relation="include">
        </childnode>
        <childnode refid="129760" relation="include">
        </childnode>
        <childnode refid="129763" relation="include">
        </childnode>
        <childnode refid="129769" relation="include">
        </childnode>
        <childnode refid="129772" relation="include">
        </childnode>
      </node>
      <node id="129760">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="129761" relation="include">
        </childnode>
      </node>
      <node id="129768">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="129762">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d63/WhiteBoardSvc_8cxx_1a92d01a63e4e4def837f0aebbab83920f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::WhiteBoardSvc) namespace EL</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d5/dda/classEL_1_1WhiteBoardSvc" kindref="compound">EL::WhiteBoardSvc</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used</para><para>no invariant used </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/Root/WhiteBoardSvc.cxx" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/Root/WhiteBoardSvc.cxx" bodystart="27" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2012.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoopAlgs/WhiteBoardSvc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Worker.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">ClassImp<sp/>(<ref refid="d5/dda/classEL_1_1WhiteBoardSvc" kindref="compound">EL::WhiteBoardSvc</ref>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">namespace<sp/>EL</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>WhiteBoardSvc<sp/>*<ref refid="da/d9f/namespaceEL_1a636c17f169b8db2eaa592ececc506508" kindref="member">getWhiteBoardSvc</ref><sp/>(Worker<sp/>*worker)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE_SOFT<sp/>(worker<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>WhiteBoardSvc<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">WhiteBoardSvc*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(worker-&gt;getAlg<sp/>(</highlight><highlight class="stringliteral">&quot;WhiteBoardSvc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT2_SOFT<sp/>(result<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;whiteboard<sp/>service<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>testInvariant<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="44"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a74f347dd23285a127dd78701944983e9" kindref="member">WhiteBoardSvc ::</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a74f347dd23285a127dd78701944983e9" kindref="member">  WhiteBoardSvc</ref><sp/>()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a59b145b5b090b6698dcb75921709b825" kindref="member">WhiteBoardSvc ::</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a59b145b5b090b6698dcb75921709b825" kindref="member">  hasVar</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doHasVar<sp/>(name);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1af079b162326fdda08920166a069e98ba" kindref="member">WhiteBoardSvc ::</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1af079b162326fdda08920166a069e98ba" kindref="member">  getFloat</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doGetFloat<sp/>(name);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>getArray<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>std::size_t&amp;<sp/>size,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>values)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>tmpSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*tmpValues<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>doGetArray<sp/>(name,<sp/>tmpSize,<sp/>tmpValues);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>tmpSize;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>values<sp/>=<sp/>tmpValues;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>TObject<sp/>*WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>getTObject<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="92"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject<sp/>*result<sp/>=<sp/>doGetTObject<sp/>(name);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_PROVIDE<sp/>(result<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a0ddcadbfa6b1318b69d0aa3017334005" kindref="member">WhiteBoardSvc ::</ref></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a0ddcadbfa6b1318b69d0aa3017334005" kindref="member">  setFloat</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>doSetFloat<sp/>(name,<sp/>value);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>setArray<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>value)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>doSetArray<sp/>(name,<sp/>value.size(),<sp/>&amp;value[0]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>setArray<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*values)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>doSetArray<sp/>(name,<sp/>size,<sp/>values);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>setTObject<sp/>(TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swallow)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>doSetTObject<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>swallow);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a53b247aa1dc496faa08407b2d8061c63" kindref="member">WhiteBoardSvc ::</ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a53b247aa1dc496faa08407b2d8061c63" kindref="member">  GetName</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="139"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;WhiteBoardSvc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>doHasVar<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*name*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="148"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT0_NOIMP<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>override<sp/>WhiteBoardSvc::doHasVar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>doGetFloat<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="157"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>getTObject<sp/>(name);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;float&gt;</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>meta</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;float&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT2_SOFT<sp/>(meta<sp/>!=<sp/>0,<sp/>(</highlight><highlight class="stringliteral">&quot;variable<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>of<sp/>type<sp/>float&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>meta-&gt;<ref refid="da/d63/classSH_1_1MetaData_1ac01d5d00af4ecff4f8e8532f31085194" kindref="member" tooltip="the value contained">value</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>doGetArray<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>std::size_t&amp;<sp/>size,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>values)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="173"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>getTObject<sp/>(name);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d63/classSH_1_1MetaVector" kindref="compound" tooltip="This class defines a templatized version of the meta-data in vector form.">SH::MetaVector&lt;float&gt;</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>meta</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="de/d63/classSH_1_1MetaVector" kindref="compound" tooltip="This class defines a templatized version of the meta-data in vector form.">SH::MetaVector&lt;float&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT2_SOFT<sp/>(meta<sp/>!=<sp/>0,<sp/>(</highlight><highlight class="stringliteral">&quot;variable<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>of<sp/>type<sp/>float<sp/>array&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>meta-&gt;<ref refid="de/d63/classSH_1_1MetaVector_1ac225150b11be2efac935ab63fab9e089" kindref="member" tooltip="the value contained">value</ref>.size();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>values<sp/>=<sp/>&amp;meta-&gt;<ref refid="de/d63/classSH_1_1MetaVector_1ac225150b11be2efac935ab63fab9e089" kindref="member" tooltip="the value contained">value</ref>[0];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>TObject<sp/>*WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>doGetTObject<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*name*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="189"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT0_NOIMP<sp/>(</highlight><highlight class="stringliteral">&quot;function<sp/>WhiteBoardSvc::doGetTObject<sp/>not<sp/>overloaded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>doSetFloat<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::MetaData&lt;float&gt;<sp/>&gt;<sp/>meta<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;float&gt;</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>meta-&gt;SetName<sp/>(name.c_str());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>meta-&gt;<ref refid="de/d63/classSH_1_1MetaVector_1ac225150b11be2efac935ab63fab9e089" kindref="member" tooltip="the value contained">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>setTObject<sp/>(meta.release(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>doSetArray<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*values)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::MetaVector&lt;float&gt;<sp/>&gt;<sp/>meta<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d63/classSH_1_1MetaVector" kindref="compound" tooltip="This class defines a templatized version of the meta-data in vector form.">SH::MetaVector&lt;float&gt;</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>meta-&gt;SetName<sp/>(name.c_str());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>(values,<sp/>values+size).<ref refid="da/d9f/namespaceEL_1a93a00e079ee65057050040c24a1df35c" kindref="member">swap</ref><sp/>(meta-&gt;<ref refid="de/d63/classSH_1_1MetaVector_1ac225150b11be2efac935ab63fab9e089" kindref="member" tooltip="the value contained">value</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>setTObject<sp/>(meta.release(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WhiteBoardSvc<sp/>::</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>doSetTObject<sp/>(TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swallow)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swallow)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>object;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT0_NOIMP<sp/>(</highlight><highlight class="stringliteral">&quot;function<sp/>WhiteBoardSvc::doSetTObject<sp/>not<sp/>overloaded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/Root/WhiteBoardSvc.cxx"/>
  </compounddef>
</doxygen>
