<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d6e/UnitTestFixture_8cxx" kind="file">
    <compoundname>UnitTestFixture.cxx</compoundname>
    <includes refid="de/d95/UnitTestFixture_8h" local="no">EventLoop/UnitTestFixture.h</includes>
    <includes refid="dd/d3c/Driver_8h" local="no">EventLoop/Driver.h</includes>
    <includes refid="d9/d13/UnitTestAlg1_8h" local="no">EventLoop/UnitTestAlg1.h</includes>
    <includes refid="d6/dd1/UnitTestConfig_8h" local="no">EventLoop/UnitTestConfig.h</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="db/d77/DiskWriter_8h" local="no">SampleHandler/DiskWriter.h</includes>
    <includes refid="d2/d7b/MetaFields_8h" local="no">SampleHandler/MetaFields.h</includes>
    <includes refid="d2/da1/SampleHandler_8h" local="no">SampleHandler/SampleHandler.h</includes>
    <includes refid="dc/d9e/SampleLocal_8h" local="no">SampleHandler/SampleLocal.h</includes>
    <includes refid="d3/deb/SamplePtr_8h" local="no">SampleHandler/SamplePtr.h</includes>
    <includes local="no">TChain.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TH1.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TSystem.h</includes>
    <incdepgraph>
      <node id="128700">
        <label>sys/stat.h</label>
      </node>
      <node id="128726">
        <label>gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h_source"/>
        <childnode refid="128691" relation="include">
        </childnode>
        <childnode refid="128703" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128704" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128727" relation="include">
        </childnode>
      </node>
      <node id="128731">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="de/dce/gtest-typed-test_8h_source"/>
        <childnode refid="128693" relation="include">
        </childnode>
        <childnode refid="128718" relation="include">
        </childnode>
      </node>
      <node id="128739">
        <label>RootCore/Packages.h</label>
      </node>
      <node id="128722">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h_source"/>
        <childnode refid="128694" relation="include">
        </childnode>
        <childnode refid="128723" relation="include">
        </childnode>
        <childnode refid="128714" relation="include">
        </childnode>
        <childnode refid="128704" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128724" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
        <childnode refid="128726" relation="include">
        </childnode>
      </node>
      <node id="128732">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="db/d6e/gtest__pred__impl_8h_source"/>
      </node>
      <node id="128713">
        <label>iomanip</label>
      </node>
      <node id="128690">
        <label>limits</label>
      </node>
      <node id="128727">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="da/db0/internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="128725">
        <label>assert.h</label>
      </node>
      <node id="128723">
        <label>iterator</label>
      </node>
      <node id="128712">
        <label>float.h</label>
      </node>
      <node id="128734">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128682" relation="include">
        </childnode>
        <childnode refid="128683" relation="include">
        </childnode>
      </node>
      <node id="128692">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h_source"/>
        <childnode refid="128693" relation="include">
        </childnode>
        <childnode refid="128694" relation="include">
        </childnode>
        <childnode refid="128712" relation="include">
        </childnode>
        <childnode refid="128698" relation="include">
        </childnode>
        <childnode refid="128713" relation="include">
        </childnode>
        <childnode refid="128690" relation="include">
        </childnode>
        <childnode refid="128681" relation="include">
        </childnode>
        <childnode refid="128714" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128715" relation="include">
        </childnode>
        <childnode refid="128716" relation="include">
        </childnode>
        <childnode refid="128717" relation="include">
        </childnode>
        <childnode refid="128718" relation="include">
        </childnode>
      </node>
      <node id="128677">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128679" relation="include">
        </childnode>
        <childnode refid="128680" relation="include">
        </childnode>
        <childnode refid="128681" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128682" relation="include">
        </childnode>
      </node>
      <node id="128675">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128677" relation="include">
        </childnode>
        <childnode refid="128683" relation="include">
        </childnode>
      </node>
      <node id="128696">
        <label>stdlib.h</label>
      </node>
      <node id="128738">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
      </node>
      <node id="128686">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="128685" relation="include">
        </childnode>
      </node>
      <node id="128687">
        <label>string</label>
      </node>
      <node id="128681">
        <label>map</label>
      </node>
      <node id="128728">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h_source"/>
        <childnode refid="128722" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
      </node>
      <node id="128695">
        <label>stddef.h</label>
      </node>
      <node id="128711">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h_source"/>
        <childnode refid="128704" relation="include">
        </childnode>
      </node>
      <node id="128719">
        <label>gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h_source"/>
        <childnode refid="128720" relation="include">
        </childnode>
      </node>
      <node id="128691">
        <label>ostream</label>
      </node>
      <node id="128744">
        <label>SampleHandler/DiskWriter.h</label>
        <link refid="db/d77/DiskWriter_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
      </node>
      <node id="128721">
        <label>gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h_source"/>
        <childnode refid="128693" relation="include">
        </childnode>
        <childnode refid="128704" relation="include">
        </childnode>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128722" relation="include">
        </childnode>
        <childnode refid="128728" relation="include">
        </childnode>
      </node>
      <node id="128729">
        <label>gtest/gtest_prod.h</label>
        <link refid="d4/db1/gtest__prod_8h_source"/>
      </node>
      <node id="128683">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128684" relation="include">
        </childnode>
        <childnode refid="128686" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128688" relation="include">
        </childnode>
      </node>
      <node id="128752">
        <label>TH1.h</label>
      </node>
      <node id="128747">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128682" relation="include">
        </childnode>
        <childnode refid="128686" relation="include">
        </childnode>
        <childnode refid="128748" relation="include">
        </childnode>
      </node>
      <node id="128674">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="128699">
        <label>sys/types.h</label>
      </node>
      <node id="128717">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h_source"/>
        <childnode refid="128716" relation="include">
        </childnode>
      </node>
      <node id="128698">
        <label>string.h</label>
      </node>
      <node id="128710">
        <label>typeinfo</label>
      </node>
      <node id="128745">
        <label>SampleHandler/MetaFields.h</label>
        <link refid="d2/d7b/MetaFields_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
      </node>
      <node id="128682">
        <label>TObject.h</label>
      </node>
      <node id="128750">
        <label>TChain.h</label>
      </node>
      <node id="128715">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h_source"/>
        <childnode refid="128690" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
      </node>
      <node id="128707">
        <label>unistd.h</label>
      </node>
      <node id="128754">
        <label>TSystem.h</label>
      </node>
      <node id="128676">
        <label>vector</label>
      </node>
      <node id="128751">
        <label>TFile.h</label>
      </node>
      <node id="128672">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTestFixture.cxx</label>
        <link refid="UnitTestFixture.cxx"/>
        <childnode refid="128673" relation="include">
        </childnode>
        <childnode refid="128734" relation="include">
        </childnode>
        <childnode refid="128735" relation="include">
        </childnode>
        <childnode refid="128740" relation="include">
        </childnode>
        <childnode refid="128684" relation="include">
        </childnode>
        <childnode refid="128741" relation="include">
        </childnode>
        <childnode refid="128744" relation="include">
        </childnode>
        <childnode refid="128745" relation="include">
        </childnode>
        <childnode refid="128677" relation="include">
        </childnode>
        <childnode refid="128746" relation="include">
        </childnode>
        <childnode refid="128749" relation="include">
        </childnode>
        <childnode refid="128750" relation="include">
        </childnode>
        <childnode refid="128751" relation="include">
        </childnode>
        <childnode refid="128752" relation="include">
        </childnode>
        <childnode refid="128753" relation="include">
        </childnode>
        <childnode refid="128754" relation="include">
        </childnode>
      </node>
      <node id="128706">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h_source"/>
      </node>
      <node id="128704">
        <label>utility</label>
      </node>
      <node id="128724">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="d0/d03/gtest-linked__ptr_8h_source"/>
        <childnode refid="128696" relation="include">
        </childnode>
        <childnode refid="128725" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
      </node>
      <node id="128703">
        <label>sstream</label>
      </node>
      <node id="128746">
        <label>SampleHandler/SampleLocal.h</label>
        <link refid="dc/d9e/SampleLocal_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128747" relation="include">
        </childnode>
      </node>
      <node id="128685">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="128689">
        <label>gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h_source"/>
        <childnode refid="128690" relation="include">
        </childnode>
        <childnode refid="128691" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128716" relation="include">
        </childnode>
        <childnode refid="128719" relation="include">
        </childnode>
        <childnode refid="128715" relation="include">
        </childnode>
        <childnode refid="128721" relation="include">
        </childnode>
        <childnode refid="128726" relation="include">
        </childnode>
        <childnode refid="128729" relation="include">
        </childnode>
        <childnode refid="128730" relation="include">
        </childnode>
        <childnode refid="128731" relation="include">
        </childnode>
        <childnode refid="128732" relation="include">
        </childnode>
      </node>
      <node id="128743">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="128685" relation="include">
        </childnode>
      </node>
      <node id="128680">
        <label>iosfwd</label>
      </node>
      <node id="128716">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h_source"/>
        <childnode refid="128698" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128693" relation="include">
        </childnode>
      </node>
      <node id="128702">
        <label>iostream</label>
      </node>
      <node id="128708">
        <label>strings.h</label>
      </node>
      <node id="128748">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128714" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
      </node>
      <node id="128733">
        <label>UnitTestFixture.ihh</label>
      </node>
      <node id="128740">
        <label>EventLoop/UnitTestConfig.h</label>
        <link refid="d6/dd1/UnitTestConfig_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128679" relation="include">
        </childnode>
      </node>
      <node id="128718">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h_source"/>
        <childnode refid="128693" relation="include">
        </childnode>
      </node>
      <node id="128694">
        <label>ctype.h</label>
      </node>
      <node id="128736">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128737" relation="include">
        </childnode>
        <childnode refid="128738" relation="include">
        </childnode>
      </node>
      <node id="128737">
        <label>TNamed.h</label>
      </node>
      <node id="128749">
        <label>SampleHandler/SamplePtr.h</label>
        <link refid="d3/deb/SamplePtr_8h_source"/>
        <childnode refid="128678" relation="include">
        </childnode>
        <childnode refid="128679" relation="include">
        </childnode>
      </node>
      <node id="128693">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h_source"/>
        <childnode refid="128694" relation="include">
        </childnode>
        <childnode refid="128695" relation="include">
        </childnode>
        <childnode refid="128696" relation="include">
        </childnode>
        <childnode refid="128697" relation="include">
        </childnode>
        <childnode refid="128698" relation="include">
        </childnode>
        <childnode refid="128699" relation="include">
        </childnode>
        <childnode refid="128700" relation="include">
        </childnode>
        <childnode refid="128701" relation="include">
        </childnode>
        <childnode refid="128702" relation="include">
        </childnode>
        <childnode refid="128703" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128704" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128705" relation="include">
        </childnode>
        <childnode refid="128706" relation="include">
        </childnode>
        <childnode refid="128707" relation="include">
        </childnode>
        <childnode refid="128708" relation="include">
        </childnode>
        <childnode refid="128709" relation="include">
        </childnode>
        <childnode refid="128710" relation="include">
        </childnode>
        <childnode refid="128711" relation="include">
        </childnode>
      </node>
      <node id="128742">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="128685" relation="include">
        </childnode>
        <childnode refid="128687" relation="include">
        </childnode>
        <childnode refid="128743" relation="include">
        </childnode>
      </node>
      <node id="128673">
        <label>EventLoop/UnitTestFixture.h</label>
        <link refid="de/d95/UnitTestFixture_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128675" relation="include">
        </childnode>
        <childnode refid="128689" relation="include">
        </childnode>
        <childnode refid="128681" relation="include">
        </childnode>
        <childnode refid="128679" relation="include">
        </childnode>
        <childnode refid="128733" relation="include">
        </childnode>
      </node>
      <node id="128753">
        <label>TTree.h</label>
      </node>
      <node id="128741">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="128685" relation="include">
        </childnode>
        <childnode refid="128742" relation="include">
        </childnode>
      </node>
      <node id="128714">
        <label>set</label>
      </node>
      <node id="128720">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h_source"/>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128697" relation="include">
        </childnode>
      </node>
      <node id="128684">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="128685" relation="include">
        </childnode>
      </node>
      <node id="128678">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="128735">
        <label>EventLoop/UnitTestAlg1.h</label>
        <link refid="d9/d13/UnitTestAlg1_8h_source"/>
        <childnode refid="128674" relation="include">
        </childnode>
        <childnode refid="128736" relation="include">
        </childnode>
        <childnode refid="128739" relation="include">
        </childnode>
      </node>
      <node id="128701">
        <label>algorithm</label>
      </node>
      <node id="128709">
        <label>regex.h</label>
      </node>
      <node id="128705">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h_source"/>
      </node>
      <node id="128697">
        <label>stdio.h</label>
      </node>
      <node id="128730">
        <label>gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h_source"/>
        <childnode refid="128680" relation="include">
        </childnode>
        <childnode refid="128676" relation="include">
        </childnode>
        <childnode refid="128692" relation="include">
        </childnode>
        <childnode refid="128716" relation="include">
        </childnode>
      </node>
      <node id="128679">
        <label>memory</label>
      </node>
      <node id="128688">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="da/d9f/namespaceEL">EL</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Iowa<sp/>State<sp/>University<sp/>2016.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Nils<sp/>Krumnack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(nils.erik.krumnack@cern.ch)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/UnitTestFixture.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Driver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/UnitTestAlg1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/UnitTestConfig.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/DiskWriter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaFields.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleHandler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SamplePtr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TChain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">EL</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>readVectorFromTree<sp/>(<ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*sample,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>treeName,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>branchName)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fileNames<sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" kindref="member" tooltip="make a list of all files, prestaging them if necessary">makeFileList</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>*var<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fileName<sp/>:<sp/>fileNames)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TFile&gt;<sp/>file<sp/>(TFile::Open<sp/>(fileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fileName);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree<sp/>*tree<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TTree*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(file-&gt;Get<sp/>(treeName.c_str()));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Long64_t<sp/>nentries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(nentries<sp/>=<sp/>tree-&gt;GetEntries())<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TBranch<sp/>*branch<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;SetBranchAddress<sp/>(branchName.c_str(),<sp/>&amp;var,<sp/>&amp;branch);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Long64_t<sp/>entry<sp/>=<sp/>0;<sp/>entry<sp/>&lt;<sp/>nentries;<sp/>++<sp/>entry)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(branch-&gt;GetEntry(entry)<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>entry<sp/>from<sp/>branch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back<sp/>(var-&gt;Data());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::map&lt;std::shared_ptr&lt;Driver&gt;,std::string&gt;<sp/>UnitTestFixture::m_jobs;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>getSample<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sampleName)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>result;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d8/d8a/classSH_1_1SamplePtr_1ae3692dbffff6ff84caca80964d7f9738" kindref="member" tooltip="get() == 0">empty</ref>())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SH::SampleLocal&gt;<sp/>myresult<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>myresult.release();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>result;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d8/d8a/classSH_1_1SamplePtr_1ae3692dbffff6ff84caca80964d7f9738" kindref="member" tooltip="get() == 0">empty</ref>())</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SH::SampleLocal&gt;<sp/>myresult<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>myresult-&gt;add<sp/>(makeFile<sp/>({}));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>myresult.release();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>result;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d8/d8a/classSH_1_1SamplePtr_1ae3692dbffff6ff84caca80964d7f9738" kindref="member" tooltip="get() == 0">empty</ref>())</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SH::SampleLocal&gt;<sp/>myresult<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>entries;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>!=<sp/>10000;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries.push_back<sp/>(iter<sp/>%<sp/>10);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>myresult-&gt;add<sp/>(makeFile<sp/>(entries));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>myresult.release();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>result;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d8/d8a/classSH_1_1SamplePtr_1ae3692dbffff6ff84caca80964d7f9738" kindref="member" tooltip="get() == 0">empty</ref>())</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SH::SampleLocal&gt;<sp/>myresult<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>jter<sp/>=<sp/>0;<sp/>jter<sp/>!=<sp/>100;<sp/>++<sp/>jter)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>entries;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>!=<sp/>10000;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries.push_back<sp/>(iter<sp/>%<sp/>10);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myresult-&gt;add<sp/>(makeFile<sp/>(entries));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>myresult.release();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>sample:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sampleName);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>getSH<sp/>()</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(getSample<sp/>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(getSample<sp/>(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(getSample<sp/>(</highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(getSample<sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a09786a76670fc6b3bb6d1be6c42e582a" kindref="member" tooltip="set the meta-data string with the given name for all samples.">setMetaString</ref><sp/>(<ref refid="d7/d06/structSH_1_1MetaFields_1a8acba4e022e9e86a5731cca0e5f2ce9f" kindref="member" tooltip="the name of the tree in the sample">SH::MetaFields::treeName</ref>,<sp/></highlight><highlight class="stringliteral">&quot;physics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sh;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>std::string<sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>getJob<sp/>()</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Driver&gt;<sp/>driver<sp/>=<sp/>GetParam().m_driver;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>m_jobs.find<sp/>(driver);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>m_jobs.end())</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Job<sp/>job;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>job.sampleHandler<sp/>(getSH());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>GetParam().setupJob<sp/>(job);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;UnitTestAlg1&gt;<sp/>alg<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnitTestAlg1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.algsAdd<sp/>(alg.release());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>submit;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>submit<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;submit-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver.get();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>driver-&gt;submit<sp/>(job,<sp/>submit.str());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>driver-&gt;wait<sp/>(submit.str());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>m_jobs[driver]<sp/>=<sp/>submit.str();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>submit.str();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>TObject<sp/>*UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>getTObject<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sampleName,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>objectName,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMandatory)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(getJob()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*sample<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>(sampleName);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>find<sp/>sample:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sampleName);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" kindref="member" tooltip="read an object from a histogram file">readHist</ref><sp/>(objectName);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMandatory<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>find<sp/>object:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>objectName);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>eventCount<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sampleName)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*hist<sp/>=<sp/>getHist&lt;TH1&gt;<sp/>(sampleName,<sp/></highlight><highlight class="stringliteral">&quot;EventLoop_EventCount&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;GetBinContent<sp/>(1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>TH1<sp/>*UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>getCallbacks<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sampleName)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getHist&lt;TH1&gt;<sp/>(sampleName,<sp/></highlight><highlight class="stringliteral">&quot;callbacks&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>checkFileExecuted<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sampleName)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>filesOut;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(getJob()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*sample<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>(sampleName);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>find<sp/>sample:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sampleName);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vec<sp/>=<sp/>readVectorFromTree<sp/>(sample,<sp/></highlight><highlight class="stringliteral">&quot;EventLoop_FileExecuted&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filesOut.insert<sp/>(vec.begin(),<sp/>vec.end());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>filesIn;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>file<sp/>:<sp/>getSample<sp/>(sampleName)-&gt;makeFileList())</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>split<sp/>=<sp/>file.rfind<sp/>(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>split<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>++<sp/>split;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fileName<sp/>=<sp/>file.substr<sp/>(split);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE<sp/>(filesIn.find<sp/>(fileName)<sp/>==<sp/>filesIn.end());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filesIn.insert<sp/>(fileName);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(filesIn,<sp/>filesOut);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::string<sp/>UnitTestFixture<sp/>::</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>makeFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>entries)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>fileName;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;file-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>++<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SH::DiskWriter&gt;<sp/>file</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetParam().make_file_writer<sp/>(fileName.str());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entries.empty())</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree<sp/>*tree<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TTree<sp/>(</highlight><highlight class="stringliteral">&quot;physics&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;physics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>el_n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>tree-&gt;Branch<sp/>(</highlight><highlight class="stringliteral">&quot;el_n&quot;</highlight><highlight class="normal">,<sp/>&amp;el_n,<sp/></highlight><highlight class="stringliteral">&quot;el_n/I&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entry<sp/>:<sp/>entries)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>el_n<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;Fill<sp/>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;file()-&gt;Write<sp/>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;close<sp/>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file-&gt;path();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>null_eventCount)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(eventCount<sp/>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">),<sp/>0u);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>null_callbacks)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*callbacks<sp/>=<sp/>getCallbacks<sp/>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_FIRST));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_OTHER));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_INITIALIZE));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_INITIALIZE));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_EXECUTE));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FILE_EXECUTE));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FINALIZE));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_FINALIZE));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>null_fileExecuted)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>checkFileExecuted<sp/>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>empty_eventCount)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(eventCount<sp/>(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">),<sp/>0u);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>empty_callbacks)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*callbacks<sp/>=<sp/>getCallbacks<sp/>(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_FIRST));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_OTHER));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_INITIALIZE));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_INITIALIZE));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_EXECUTE));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FILE_EXECUTE));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FINALIZE));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_FINALIZE));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>empty_fileExecuted)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>checkFileExecuted<sp/>(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>single_eventCount)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(eventCount<sp/>(</highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">),<sp/>10000u);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>single_callbacks)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*callbacks<sp/>=<sp/>getCallbacks<sp/>(</highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_FIRST));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_OTHER));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_INITIALIZE));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_INITIALIZE));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(10000,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_EXECUTE));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FILE_EXECUTE));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FINALIZE));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_FINALIZE));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>single_fileExecuted)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>checkFileExecuted<sp/>(</highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>multi_eventCount)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(eventCount<sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">),<sp/>1000000u);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>multi_callbacks)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*callbacks<sp/>=<sp/>getCallbacks<sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_FIRST));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(0,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_CHANGE_INPUT_OTHER));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_INITIALIZE));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_INITIALIZE));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(1000000,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_EXECUTE));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ<sp/>(100,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FILE_EXECUTE));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_FINALIZE));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_LE<sp/>(1,<sp/>callbacks-&gt;GetBinContent<sp/>(1<sp/>+<sp/>UnitTestAlg1::CB_HIST_FINALIZE));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>multi_fileExecuted)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>checkFileExecuted<sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>TEST_P<sp/>(UnitTestFixture,<sp/>multi_out_empty)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(getJob()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-out_empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*sample<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>(</highlight><highlight class="stringliteral">&quot;multi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE<sp/>(sample<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fileName<sp/>:<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" kindref="member" tooltip="make a list of all files, prestaging them if necessary">makeFileList</ref>())</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TFile&gt;<sp/>file<sp/>(TFile::Open<sp/>(fileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTestFixture.cxx"/>
  </compounddef>
</doxygen>
