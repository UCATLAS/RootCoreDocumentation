<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d3f/TAuxStore_8cxx" kind="file">
    <compoundname>TAuxStore.cxx</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">TError.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TBranch.h</includes>
    <includes local="no">TString.h</includes>
    <includes local="no">TClass.h</includes>
    <includes local="no">TVirtualCollectionProxy.h</includes>
    <includes refid="db/d7f/AuxTypeRegistry_8h" local="yes">AthContainers/AuxTypeRegistry.h</includes>
    <includes refid="d3/d0f/AuxStoreInternal_8h" local="yes">AthContainers/AuxStoreInternal.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="d1/de7/IOStats_8h" local="yes">xAODCore/tools/IOStats.h</includes>
    <includes refid="d6/dda/ReadStats_8h" local="yes">xAODCore/tools/ReadStats.h</includes>
    <includes refid="dc/dd6/TAuxStore_8h" local="yes">xAODRootAccess/TAuxStore.h</includes>
    <includes refid="d0/d7d/xAODRootAccess_2xAODRootAccess_2tools_2Utils_8h" local="yes">xAODRootAccess/tools/Utils.h</includes>
    <includes refid="d6/d17/xAODRootAccess_2xAODRootAccess_2tools_2Message_8h" local="yes">xAODRootAccess/tools/Message.h</includes>
    <includes refid="d5/d63/TAuxVectorFactory_8h" local="yes">xAODRootAccess/tools/TAuxVectorFactory.h</includes>
    <includes refid="de/dc0/ReturnCheck_8h" local="yes">xAODRootAccess/tools/ReturnCheck.h</includes>
    <incdepgraph>
      <node id="410391">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="410393">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="410356" relation="include">
        </childnode>
        <childnode refid="410358" relation="include">
        </childnode>
        <childnode refid="410365" relation="include">
        </childnode>
        <childnode refid="410366" relation="include">
        </childnode>
      </node>
      <node id="410396">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="410397" relation="include">
        </childnode>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410399" relation="include">
        </childnode>
        <childnode refid="410398" relation="include">
        </childnode>
      </node>
      <node id="410394">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="410364">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="410366">
        <label>functional</label>
      </node>
      <node id="410362">
        <label>limits</label>
      </node>
      <node id="410399">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="410389">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="410359">
        <label>iterator</label>
      </node>
      <node id="410376">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410377" relation="include">
        </childnode>
      </node>
      <node id="410413">
        <label>xAODRootAccess/tools/Message.h</label>
        <link refid="d6/d17/xAODRootAccess_2xAODRootAccess_2tools_2Message_8h_source"/>
      </node>
      <node id="410402">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="410353" relation="include">
        </childnode>
        <childnode refid="410403" relation="include">
        </childnode>
        <childnode refid="410345" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
        <childnode refid="410363" relation="include">
        </childnode>
      </node>
      <node id="410372">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410360" relation="include">
        </childnode>
      </node>
      <node id="410411">
        <label>xAODRootAccess/tools/Utils.h</label>
        <link refid="d0/d7d/xAODRootAccess_2xAODRootAccess_2tools_2Utils_8h_source"/>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
        <childnode refid="410378" relation="include">
        </childnode>
        <childnode refid="410412" relation="include">
        </childnode>
      </node>
      <node id="410410">
        <label>xAODRootAccess/tools/TReturnCode.h</label>
        <link refid="df/d0a/TReturnCode_8h_source"/>
      </node>
      <node id="410378">
        <label>stdint.h</label>
      </node>
      <node id="410342">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx</label>
        <link refid="TAuxStore.cxx"/>
        <childnode refid="410343" relation="include">
        </childnode>
        <childnode refid="410344" relation="include">
        </childnode>
        <childnode refid="410345" relation="include">
        </childnode>
        <childnode refid="410346" relation="include">
        </childnode>
        <childnode refid="410347" relation="include">
        </childnode>
        <childnode refid="410348" relation="include">
        </childnode>
        <childnode refid="410349" relation="include">
        </childnode>
        <childnode refid="410350" relation="include">
        </childnode>
        <childnode refid="410351" relation="include">
        </childnode>
        <childnode refid="410352" relation="include">
        </childnode>
        <childnode refid="410395" relation="include">
        </childnode>
        <childnode refid="410402" relation="include">
        </childnode>
        <childnode refid="410404" relation="include">
        </childnode>
        <childnode refid="410405" relation="include">
        </childnode>
        <childnode refid="410408" relation="include">
        </childnode>
        <childnode refid="410411" relation="include">
        </childnode>
        <childnode refid="410413" relation="include">
        </childnode>
        <childnode refid="410414" relation="include">
        </childnode>
        <childnode refid="410416" relation="include">
        </childnode>
      </node>
      <node id="410369">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
      </node>
      <node id="410400">
        <label>AthContainersInterfaces/IAuxStoreIO.h</label>
        <link refid="d9/db5/IAuxStoreIO_8h"/>
        <childnode refid="410353" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
        <childnode refid="410401" relation="include">
        </childnode>
        <childnode refid="410398" relation="include">
        </childnode>
      </node>
      <node id="410355">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="410356" relation="include">
        </childnode>
        <childnode refid="410365" relation="include">
        </childnode>
        <childnode refid="410366" relation="include">
        </childnode>
      </node>
      <node id="410361">
        <label>cmath</label>
      </node>
      <node id="410345">
        <label>stdexcept</label>
      </node>
      <node id="410392">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="410415">
        <label>TMethodCall.h</label>
      </node>
      <node id="410363">
        <label>string</label>
      </node>
      <node id="410367">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
      </node>
      <node id="410406">
        <label>map</label>
      </node>
      <node id="410384">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="410412">
        <label>TDataType.h</label>
      </node>
      <node id="410381">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="410390">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="410346">
        <label>TError.h</label>
      </node>
      <node id="410416">
        <label>xAODRootAccess/tools/ReturnCheck.h</label>
        <link refid="de/dc0/ReturnCheck_8h_source"/>
        <childnode refid="410346" relation="include">
        </childnode>
        <childnode refid="410410" relation="include">
        </childnode>
        <childnode refid="410413" relation="include">
        </childnode>
      </node>
      <node id="410375">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="410376" relation="include">
        </childnode>
        <childnode refid="410362" relation="include">
        </childnode>
        <childnode refid="410378" relation="include">
        </childnode>
        <childnode refid="410379" relation="include">
        </childnode>
      </node>
      <node id="410353">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410355" relation="include">
        </childnode>
      </node>
      <node id="410356">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="410357" relation="include">
        </childnode>
        <childnode refid="410358" relation="include">
        </childnode>
        <childnode refid="410359" relation="include">
        </childnode>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410360" relation="include">
        </childnode>
        <childnode refid="410361" relation="include">
        </childnode>
        <childnode refid="410362" relation="include">
        </childnode>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410364" relation="include">
        </childnode>
      </node>
      <node id="410343">
        <label>string.h</label>
      </node>
      <node id="410368">
        <label>typeinfo</label>
      </node>
      <node id="410404">
        <label>xAODCore/tools/IOStats.h</label>
        <link refid="d1/de7/IOStats_8h_source"/>
      </node>
      <node id="410379">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="410377">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="410383">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="410405">
        <label>xAODCore/tools/ReadStats.h</label>
        <link refid="d6/dda/ReadStats_8h_source"/>
        <childnode refid="410406" relation="include">
        </childnode>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410407" relation="include">
        </childnode>
        <childnode refid="410353" relation="include">
        </childnode>
      </node>
      <node id="410398">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="410352">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="410353" relation="include">
        </childnode>
        <childnode refid="410367" relation="include">
        </childnode>
        <childnode refid="410369" relation="include">
        </childnode>
        <childnode refid="410370" relation="include">
        </childnode>
        <childnode refid="410385" relation="include">
        </childnode>
        <childnode refid="410387" relation="include">
        </childnode>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410393" relation="include">
        </childnode>
        <childnode refid="410394" relation="include">
        </childnode>
      </node>
      <node id="410373">
        <label>vector</label>
      </node>
      <node id="410358">
        <label>utility</label>
      </node>
      <node id="410380">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="410344">
        <label>sstream</label>
      </node>
      <node id="410388">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="410371">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="410387">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="410388" relation="include">
        </childnode>
        <childnode refid="410389" relation="include">
        </childnode>
        <childnode refid="410390" relation="include">
        </childnode>
        <childnode refid="410391" relation="include">
        </childnode>
        <childnode refid="410392" relation="include">
        </childnode>
      </node>
      <node id="410360">
        <label>cstdlib</label>
      </node>
      <node id="410409">
        <label>xAODCore/AuxSelection.h</label>
        <link refid="d3/dd4/AuxSelection_8h_source"/>
        <childnode refid="410401" relation="include">
        </childnode>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410353" relation="include">
        </childnode>
      </node>
      <node id="410403">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="410397">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="410353" relation="include">
        </childnode>
        <childnode refid="410354" relation="include">
        </childnode>
        <childnode refid="410398" relation="include">
        </childnode>
      </node>
      <node id="410354">
        <label>cstddef</label>
      </node>
      <node id="410414">
        <label>xAODRootAccess/tools/TAuxVectorFactory.h</label>
        <link refid="d5/d63/TAuxVectorFactory_8h_source"/>
        <childnode refid="410415" relation="include">
        </childnode>
        <childnode refid="410369" relation="include">
        </childnode>
      </node>
      <node id="410350">
        <label>TClass.h</label>
      </node>
      <node id="410407">
        <label>TNamed.h</label>
      </node>
      <node id="410349">
        <label>TString.h</label>
      </node>
      <node id="410348">
        <label>TBranch.h</label>
      </node>
      <node id="410370">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="410367" relation="include">
        </childnode>
        <childnode refid="410371" relation="include">
        </childnode>
        <childnode refid="410372" relation="include">
        </childnode>
        <childnode refid="410374" relation="include">
        </childnode>
        <childnode refid="410380" relation="include">
        </childnode>
        <childnode refid="410368" relation="include">
        </childnode>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410357" relation="include">
        </childnode>
        <childnode refid="410378" relation="include">
        </childnode>
        <childnode refid="410382" relation="include">
        </childnode>
        <childnode refid="410383" relation="include">
        </childnode>
        <childnode refid="410384" relation="include">
        </childnode>
      </node>
      <node id="410351">
        <label>TVirtualCollectionProxy.h</label>
      </node>
      <node id="410382">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="410347">
        <label>TTree.h</label>
      </node>
      <node id="410401">
        <label>set</label>
      </node>
      <node id="410386">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="410374">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="410371" relation="include">
        </childnode>
        <childnode refid="410375" relation="include">
        </childnode>
        <childnode refid="410380" relation="include">
        </childnode>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410381" relation="include">
        </childnode>
      </node>
      <node id="410357">
        <label>algorithm</label>
      </node>
      <node id="410395">
        <label>AthContainers/AuxStoreInternal.h</label>
        <link refid="d3/d0f/AuxStoreInternal_8h"/>
        <childnode refid="410396" relation="include">
        </childnode>
        <childnode refid="410400" relation="include">
        </childnode>
        <childnode refid="410387" relation="include">
        </childnode>
        <childnode refid="410380" relation="include">
        </childnode>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410399" relation="include">
        </childnode>
        <childnode refid="410398" relation="include">
        </childnode>
      </node>
      <node id="410408">
        <label>xAODRootAccess/TAuxStore.h</label>
        <link refid="dc/dd6/TAuxStore_8h_source"/>
        <childnode refid="410373" relation="include">
        </childnode>
        <childnode refid="410363" relation="include">
        </childnode>
        <childnode refid="410396" relation="include">
        </childnode>
        <childnode refid="410400" relation="include">
        </childnode>
        <childnode refid="410387" relation="include">
        </childnode>
        <childnode refid="410409" relation="include">
        </childnode>
        <childnode refid="410410" relation="include">
        </childnode>
      </node>
      <node id="410365">
        <label>memory</label>
      </node>
      <node id="410385">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="410369" relation="include">
        </childnode>
        <childnode refid="410370" relation="include">
        </childnode>
        <childnode refid="410386" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="dd/d44/namespacexAOD">xAOD</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>TAuxStore.cxx<sp/>777550<sp/>2016-10-10<sp/>16:44:41Z<sp/>krasznaa<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>System<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ROOT<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TError.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TBranch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TClass.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TVirtualCollectionProxy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EDM<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d7f/AuxTypeRegistry_8h" kindref="compound" tooltip="Handle mappings between names and auxid_t.">AthContainers/AuxTypeRegistry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d0f/AuxStoreInternal_8h" kindref="compound" tooltip="An auxiliary data store that holds data internally.">AthContainers/AuxStoreInternal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xAOD<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODCore/tools/IOStats.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODCore/tools/ReadStats.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODRootAccess/TAuxStore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODRootAccess/tools/Utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODRootAccess/tools/Message.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODRootAccess/tools/TAuxVectorFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODRootAccess/tools/ReturnCheck.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xAOD<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a69485ce535311511c97f51d299ba9ac3" kindref="member" tooltip="Default constructor.">TAuxStore::TAuxStore</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/>Bool_t<sp/>topStore,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EStructMode<sp/>mode,<sp/>Int_t<sp/>basketSize,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>splitLevel<sp/>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SG::IAuxStore(),<sp/>SG::IAuxStoreIO(),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prefix(<sp/>prefix<sp/>),<sp/>m_dynPrefix(<sp/>Utils::dynBranchPrefix(<sp/>prefix<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_topStore(<sp/>topStore<sp/>),<sp/>m_structMode(<sp/>mode<sp/>),<sp/>m_basketSize(<sp/>basketSize<sp/>),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_splitLevel(<sp/>splitLevel<sp/>),<sp/>m_entry(<sp/>0<sp/>),<sp/>m_inTree(<sp/>0<sp/>),<sp/>m_outTree(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputScanned(<sp/>kFALSE<sp/>),<sp/>m_selection(),<sp/>m_transientStore(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs(),<sp/>m_vecs(),<sp/>m_size(<sp/>0<sp/>),<sp/>m_locked(<sp/>kFALSE<sp/>),<sp/>m_isDecoration(),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tick(<sp/>0<sp/>),<sp/>m_mutex1(),<sp/>m_mutex2(),<sp/>m_tsAuxids(),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches(),<sp/>m_branchesWritten(),<sp/>m_missingBranches()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a05268b7e9dfb501d79b3d6fa4eaefc63" kindref="member" tooltip="Destructor.">TAuxStore::~TAuxStore</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>vitr<sp/>=<sp/>m_vecs.begin();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>vend<sp/>=<sp/>m_vecs.end();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>vitr<sp/>!=<sp/>vend;<sp/>++vitr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*vitr<sp/>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*vitr;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>bitr<sp/>=<sp/>m_branches.begin();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>bend<sp/>=<sp/>m_branches.end();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>bitr<sp/>!=<sp/>bend;<sp/>++bitr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*bitr<sp/>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*bitr;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_transientStore;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" kindref="member" tooltip="&amp;quot;Structural&amp;quot; modes of the object">TAuxStore::EStructMode</ref><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a38c18c1dc291e16364490bcf7848563c" kindref="member" tooltip="Get what structure mode the object was constructed with.">TAuxStore::structMode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_structMode;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a55b35fac4c7388272f88ff235c89fc38" kindref="member" tooltip="Set the structure mode of the object to a new value.">TAuxStore::setStructMode</ref>(<sp/>EStructMode<sp/>mode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>allow<sp/>this<sp/>on<sp/>an<sp/>uninitialised<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_branches.size()<sp/>||<sp/>(<sp/>m_structMode<sp/>!=<sp/>kUndefinedStore<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setStructMode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>change<sp/>the<sp/>structure<sp/>mode<sp/>of<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;initialised<sp/>object&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>change:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_structMode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1acb4c520a27c77a913012c1172904799d" kindref="member" tooltip="Get the currently configured branch name prefix.">TAuxStore::prefix</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_prefix.c_str();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a2a7cee99018cc29536d29e20a0319b18" kindref="member" tooltip="Set the branch name prefix.">TAuxStore::setPrefix</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_prefix<sp/>=<sp/>prefix;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_dynPrefix<sp/>=<sp/>Utils::dynBranchPrefix(<sp/>prefix<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>::Bool_t<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a13ec10837d3aaee4a63169d710012300" kindref="member" tooltip="Check if the object is a &amp;quot;top store&amp;quot;, or not.">TAuxStore::isTopStore</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_topStore;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a5a3da4966ebff5a8301b4bdd9b04a80d" kindref="member" tooltip="Set whether the object should behave as a &amp;quot;top store&amp;quot; or not.">TAuxStore::setTopStore</ref>(<sp/>::Bool_t<sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_topStore<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>::Int_t<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a021d57869900ef910f011d0efda3ca34" kindref="member" tooltip="Get the size of the baskets created for the output branches.">TAuxStore::basketSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_basketSize;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1af8073cde9f00990b6e0de662aefafb02" kindref="member" tooltip="Set the size of the baskets created for the output branches.">TAuxStore::setBasketSize</ref>(<sp/>::Int_t<sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_basketSize<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>::Int_t<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a624f848a82bc260507ade5417777cb64" kindref="member" tooltip="Get the split level of the output branches.">TAuxStore::splitLevel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_splitLevel;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a4470d35f873363e154cd8a7980fa591f" kindref="member" tooltip="Set the split level of the output branches.">TAuxStore::setSplitLevel</ref>(<sp/>::Int_t<sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_splitLevel<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a939bf0938bbddd31e71c393a7f8c1476" kindref="member" tooltip="Connect the object to an input TTree.">TAuxStore::readFrom</ref>(<sp/>::TTree*<sp/>tree,<sp/>::Bool_t<sp/>printWarnings<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>everything<sp/>will<sp/>be<sp/>re-read<sp/>after<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>check<sp/>again<sp/>which<sp/>branches<sp/>are<sp/>available:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_missingBranches.clear();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>tree:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inTree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Catalogue<sp/>all<sp/>the<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::readFrom&quot;</highlight><highlight class="normal">,<sp/>scanInputTree()<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we&apos;ll<sp/>be<sp/>likely<sp/>to<sp/>be<sp/>able<sp/>to<sp/>read<sp/>the<sp/>&quot;static&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TBranch*<sp/>br<sp/>=<sp/>m_inTree-&gt;GetBranch(<sp/>m_prefix.c_str()<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>might<sp/>not<sp/>even<sp/>have<sp/>static<sp/>branches,<sp/>so<sp/>this<sp/>is<sp/>not<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>itself...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>read<sp/>complex<sp/>objects,<sp/>like<sp/>smart<sp/>pointers<sp/>from<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auxiliary<sp/>container<sp/>variable-by-variable,<sp/>the<sp/>split<sp/>level<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branch<sp/>must<sp/>be<sp/>exactly<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>br-&gt;GetSplitLevel()<sp/>!=<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>m_topStore<sp/>&amp;&amp;<sp/>printWarnings<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::readFrom&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Static<sp/>branch<sp/>(%s)<sp/>with<sp/>split<sp/>level<sp/>%i<sp/>discovered&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prefix.c_str(),<sp/>br-&gt;GetSplitLevel()<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::readFrom&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>reading<sp/>of<sp/>complex<sp/>variables<sp/>from<sp/>it<sp/>may/will<sp/>fail!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aebc16a6c3c0c0f2918c07bf402c3faa9" kindref="member" tooltip="Connect the object to an output TTree.">TAuxStore::writeTo</ref>(<sp/>::TTree*<sp/>tree<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>any<sp/>auxiliary<sp/>branches<sp/>that<sp/>have<sp/>not<sp/>been<sp/>connected<sp/>to<sp/>yet:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::writeTo&quot;</highlight><highlight class="normal">,<sp/>scanInputTree()<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>TTree<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_outTree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>all<sp/>the<sp/>variables<sp/>that<sp/>we<sp/>already<sp/>know<sp/>about.<sp/>Notice<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>auxid<sp/>set<sp/>on<sp/>purpose.<sp/>Because<sp/>the<sp/>underlying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AuxSelection<sp/>object<sp/>gets<sp/>modified<sp/>while<sp/>doing<sp/>the<sp/>for<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1a1a8bcc4ee42936e2b794bac38e0f6de0" kindref="member" tooltip="A set of aux data identifiers.">auxid_set_t</ref><sp/>selAuxIDs<sp/>=<sp/>getSelectedAuxIDs();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>itr<sp/>=<sp/>selAuxIDs.begin();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>end<sp/>=<sp/>selAuxIDs.end();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::writeTo&quot;</highlight><highlight class="normal">,<sp/>setupOutputData(<sp/>*itr<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>::Int_t<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ada32c6310920afbf3adf1c202c13b9d1" kindref="member" tooltip="Read the values from the specified TTree entry.">TAuxStore::getEntry</ref>(<sp/>::Long64_t<sp/>entry,<sp/>::Int_t<sp/>getall<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>entry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_entry<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>transient<sp/>store.<sp/>TEvent::fill()<sp/>calls<sp/>this<sp/>function<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getall==99.<sp/>When<sp/>that<sp/>is<sp/>happening,<sp/>we<sp/>need<sp/>to<sp/>keep<sp/>the<sp/>transient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>still<sp/>around.<sp/>Since<sp/>the<sp/>user<sp/>may<sp/>want<sp/>to<sp/>interact<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>after<sp/>it<sp/>was<sp/>written<sp/>out.<sp/>(And<sp/>since<sp/>TEvent::fill()<sp/>asks<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>transient<sp/>decorations<sp/>after<sp/>calling<sp/>getEntry(...).)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>&amp;&amp;<sp/>(<sp/>getall<sp/>!=<sp/>99<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>transient<sp/>auxiliary<sp/>IDs<sp/>from<sp/>the<sp/>internal<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>auxid<sp/>:<sp/>m_transientStore-&gt;getAuxIDs()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.erase(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_transientStore;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>to<sp/>update<sp/>the<sp/>thread<sp/>specific<sp/>IDs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>remove<sp/>the<sp/>IDs<sp/>of<sp/>the<sp/>decorations<sp/>that<sp/>are<sp/>getting<sp/>persistified:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>getall<sp/>!=<sp/>99<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>varRemoved<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>=<sp/>0;<sp/>auxid<sp/>&lt;<sp/>m_isDecoration.size();<sp/>++auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_isDecoration[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.erase(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varRemoved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>varRemoved<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>need<sp/>everything<sp/>loaded,<sp/>return<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>getall<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>the<sp/>variables<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Int_t<sp/>bytesRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>m_branches.begin();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>end<sp/>=<sp/>m_branches.end();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesRead<sp/>+=<sp/>(<sp/>*itr<sp/>)-&gt;getEntry(<sp/>entry<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytesRead;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a58ea6131b64e73b49ea31bc75ec69731" kindref="member" tooltip="Tell the object that all branches will need to be re-read.">TAuxStore::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>all<sp/>the<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>m_branches.begin();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>TBranchHandle*<sp/>&gt;::iterator<sp/>end<sp/>=<sp/>m_branches.end();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>)<sp/>(<sp/>*itr<sp/>)-&gt;reset();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>that<sp/>the<sp/>input<sp/>TTree<sp/>needs<sp/>to<sp/>be<sp/>re-scanned:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inputScanned<sp/>=<sp/>kFALSE;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a1122528f8528e1042d1581029b3c930f" kindref="member" tooltip="Get a pointer to a given array.">TAuxStore::getData</ref>(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>transient<sp/>store<sp/>already<sp/>handles<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_transientStore-&gt;getAuxIDs().find(<sp/>auxid<sp/>)<sp/>!=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;getAuxIDs().end()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientStore-&gt;getData(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>this<sp/>auxiliary<sp/>variable<sp/>both<sp/>to<sp/>the<sp/>input<sp/>and<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>needed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&gt;=<sp/>m_vecs.size()<sp/>)<sp/>||<sp/>(<sp/>!<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>auxid<sp/>&gt;=<sp/>m_branches.size()<sp/>)<sp/>||<sp/>(<sp/>!<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>setupInputData(<sp/>auxid<sp/>).isSuccess()<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>!<sp/>setupOutputData(<sp/>auxid<sp/>).isSuccess()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>variable<sp/>is<sp/>up<sp/>to<sp/>date:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::Int_t<sp/>readBytes<sp/>=<sp/>m_branches[<sp/>auxid<sp/>]-&gt;getEntry(<sp/>m_entry<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>readBytes<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>read<sp/>in<sp/>variable<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" kindref="member" tooltip="Convenience type declaration.">TAuxStore::auxid_set_t</ref>&amp;<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ae0d420f97f8cd76805cf7b8445c2a85e" kindref="member" tooltip="Get the types(names) of variables handled by this container.">TAuxStore::getAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new,<sp/>thread<sp/>specific<sp/>object<sp/>if<sp/>necessary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tsAuxids.get()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tsAuxids.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TSAuxidSet(<sp/>m_tick,<sp/>m_auxIDs<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>update<sp/>it<sp/>if<sp/>it&apos;s<sp/>out<sp/>of<sp/>date:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tsAuxids-&gt;m_tick<sp/>!=<sp/>m_tick<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tsAuxids-&gt;m_set<sp/>=<sp/>m_auxIDs;<sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>need<sp/>to<sp/>optimize<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tsAuxids-&gt;m_tick<sp/>=<sp/>m_tick;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>thread-specific<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tsAuxids-&gt;m_set;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a4deb553e290dad77b6f5c2e84e26560d" kindref="member" tooltip="Get a pointer to a given array, creating the array if necessary.">TAuxStore::getDecoration</ref>(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>requested<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>locked<sp/>object,<sp/>deal<sp/>with<sp/>it<sp/>correctly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_locked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>variable<sp/>exists<sp/>already<sp/>and<sp/>it&apos;s<sp/>a<sp/>decoration,<sp/>then<sp/>let&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>it<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_vecs.size()<sp/>)<sp/>&amp;&amp;<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>auxid<sp/>&lt;<sp/>m_isDecoration.size()<sp/>&amp;&amp;<sp/>m_isDecoration[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Things<sp/>look<sp/>okay...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;reserve(<sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;resize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it&apos;s<sp/>in<sp/>the<sp/>transient<sp/>store<sp/>already,<sp/>return<sp/>it<sp/>from<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>in<sp/>a<sp/>locked<sp/>store<sp/>*everything*<sp/>is<sp/>a<sp/>decoration<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transient<sp/>store.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;getAuxIDs().count(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientStore-&gt;getDecoration(<sp/>auxid,<sp/>size,<sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>know<sp/>this<sp/>auxiliary<sp/>ID,<sp/>but<sp/>it<sp/>was<sp/>not<sp/>found<sp/>as<sp/>a<sp/>decoration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>previous<sp/>checks,<sp/>then<sp/>we&apos;re<sp/>in<sp/>trouble.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_auxIDs.count(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>may<sp/>still<sp/>be<sp/>a<sp/>decoration<sp/>in<sp/>a<sp/>transient<sp/>store.<sp/>If<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>store<sp/>exists,<sp/>leave<sp/>it<sp/>up<sp/>to<sp/>that<sp/>store<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="d5/d41/classSG_1_1ExcStoreLocked" kindref="compound" tooltip="Exception --- Attempted to modify auxiliary data in a locked store.">SG::ExcStoreLocked</ref>(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>want<sp/>to<sp/>write<sp/>this<sp/>variable<sp/>to<sp/>the<sp/>output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>isAuxIDSelected(<sp/>auxid<sp/>)<sp/>)<sp/>||<sp/>(<sp/>!<sp/>m_outTree<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>store<sp/>only<sp/>when<sp/>necessary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore<sp/>=</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_locked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;lock();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>transient<sp/>store<sp/>create<sp/>the<sp/>decoration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nids<sp/>=<sp/>m_transientStore-&gt;getAuxIDs().size();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>result<sp/>=<sp/>m_transientStore-&gt;getDecoration(<sp/>auxid,<sp/>size,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>&amp;&amp;<sp/>(<sp/>nids<sp/>!=<sp/>m_transientStore-&gt;getAuxIDs().size()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>memory<sp/>address<sp/>from<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>exist<sp/>yet.<sp/>So<sp/>let&apos;s<sp/>make<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>result<sp/>=<sp/>getData(<sp/>auxid,<sp/>size,<sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_locked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>container<sp/>is<sp/>locked,<sp/>remember<sp/>that<sp/>this<sp/>is<sp/>a<sp/>decoration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_isDecoration.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isDecoration.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isDecoration[<sp/>auxid<sp/>]<sp/>=<sp/>::kTRUE;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointer<sp/>made<sp/>by<sp/>getData(...):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a00986f58a4b03c8fd383f67bcaffb417" kindref="member" tooltip="Lock the object, and don&amp;#39;t let decorations be added.">TAuxStore::lock</ref>()<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_locked<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;lock();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aa54c325574f8010e131e5f36d64ac639" kindref="member">TAuxStore::clearDecorations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>transient<sp/>decorations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>all<sp/>the<sp/>transient<sp/>IDs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>auxid<sp/>:<sp/>m_transientStore-&gt;getAuxIDs()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.erase(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>decorations<sp/>from<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;clearDecorations();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>add<sp/>back<sp/>whatever<sp/>was<sp/>left<sp/>in<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>auxid<sp/>:<sp/>m_transientStore-&gt;getAuxIDs()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>that<sp/>we<sp/>changed<sp/>the<sp/>set:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>decorations<sp/>which<sp/>are<sp/>going<sp/>into<sp/>the<sp/>output<sp/>file,<sp/>are<sp/>here<sp/>to<sp/>stay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removing<sp/>their<sp/>IDs<sp/>from<sp/>the<sp/>internal<sp/>set<sp/>would<sp/>just<sp/>cause<sp/>more<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>my<sp/>mind<sp/>than<sp/>just<sp/>leaving<sp/>them<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1af4ca8c9d4c674a087cc201401889e7b7" kindref="member" tooltip="Return the number of elements in the store.">TAuxStore::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>try<sp/>to<sp/>find<sp/>a<sp/>managed<sp/>vector<sp/>in<sp/>the<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>itr<sp/>=<sp/>m_auxIDs.begin();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>end<sp/>=<sp/>m_auxIDs.end();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>we<sp/>are<sp/>still<sp/>within<sp/>the<sp/>bounds<sp/>of<sp/>our<sp/>vector:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>&gt;=<sp/>m_vecs.size()<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>non-existent<sp/>objects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_vecs[<sp/>*itr<sp/>]<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>vector<sp/>for<sp/>its<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>m_vecs[<sp/>*itr<sp/>]-&gt;size();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>accept<sp/>a<sp/>non-zero<sp/>size.<sp/>Not<sp/>sure<sp/>why...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>size<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>a<sp/>transient<sp/>store,<sp/>and<sp/>get<sp/>the<sp/>size<sp/>from<sp/>that:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientStore-&gt;size();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apparently<sp/>the<sp/>store<sp/>is<sp/>empty:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a1122528f8528e1042d1581029b3c930f" kindref="member" tooltip="Get a pointer to a given array.">TAuxStore::getData</ref>(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex2<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>want<sp/>to<sp/>write<sp/>this<sp/>variable<sp/>to<sp/>the<sp/>output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>m_outTree<sp/>)<sp/>||<sp/>(<sp/>!<sp/>isAuxIDSelected(<sp/>auxid<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>store<sp/>only<sp/>when<sp/>necessary:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore<sp/>=</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_locked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;lock();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>transient<sp/>store<sp/>create<sp/>the<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nids<sp/>=<sp/>m_transientStore-&gt;getAuxIDs().size();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>result<sp/>=<sp/>m_transientStore-&gt;getData(<sp/>auxid,<sp/>size,<sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>result<sp/>&amp;&amp;<sp/>(<sp/>nids<sp/>!=<sp/>m_transientStore-&gt;getAuxIDs().size()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>address<sp/>in<sp/>the<sp/>transient<sp/>memory:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>variable<sp/>exists<sp/>already,<sp/>and<sp/>this<sp/>is<sp/>a<sp/>locked<sp/>store,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>in<sp/>trouble.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_locked<sp/>&amp;&amp;<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_vecs.size()<sp/>)<sp/>&amp;&amp;<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>(<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_isDecoration.size()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isDecoration[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="d5/d41/classSG_1_1ExcStoreLocked" kindref="compound" tooltip="Exception --- Attempted to modify auxiliary data in a locked store.">SG::ExcStoreLocked</ref>(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>this<sp/>auxiliary<sp/>variable<sp/>just<sp/>to<sp/>the<sp/>output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>setupOutputData(<sp/>auxid<sp/>).isFailure()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>up<sp/>variable<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>things<sp/>make<sp/>sense:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>size<sp/>!=<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Branch<sp/>creation<sp/>requested<sp/>with:&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>name<sp/>=<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>size<sp/>=<sp/>%i&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>size<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>m_structMode<sp/>=<sp/>kObjectStore&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>variable<sp/>is<sp/>of<sp/>the<sp/>right<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;reserve(<sp/>capacity<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;resize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" kindref="member" tooltip="Convenience type declaration.">TAuxStore::auxid_set_t</ref>&amp;<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a09182a6ecf681b029fc136e954e6220a" kindref="member" tooltip="Return a set of writable data identifiers.">TAuxStore::getWritableAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getAuxIDs();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a0ae2b8968e98d214a873d9ba71396aea" kindref="member" tooltip="Resize the arrays to a given size.">TAuxStore::resize</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>size<sp/>!=<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::resize&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>=<sp/>%i<sp/>for<sp/>single-object<sp/>store&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>size<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>new<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>m_vecs.begin();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>end<sp/>=<sp/>m_vecs.end();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>)<sp/>(<sp/>*itr<sp/>)-&gt;resize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;resize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a374f9c52c985144de4e2489a71a599d6" kindref="member" tooltip="Reserve a given size for the arrays.">TAuxStore::reserve</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>size<sp/>!=<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::reserve&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>=<sp/>%i<sp/>for<sp/>single-object<sp/>store&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>size<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>m_vecs.begin();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>end<sp/>=<sp/>m_vecs.end();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>)<sp/>(<sp/>*itr<sp/>)-&gt;reserve(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;reserve(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a3cc2ab29e748776999478fc1c9aed89d" kindref="member" tooltip="Shift the contents of the stored arrays.">TAuxStore::shift</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>ptrdiff_t<sp/>offs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::shift&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>not<sp/>have<sp/>been<sp/>called<sp/>for<sp/>single-object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;store&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>size<sp/>of<sp/>the<sp/>container:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>static_cast&lt;<sp/>std::size_t<sp/>&gt;(<sp/>std::abs(<sp/>offs<sp/>)<sp/>)<sp/>&gt;<sp/>m_size<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>offs<sp/>&lt;<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>+=<sp/>offs;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>m_vecs.begin();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>SG::IAuxTypeVector*<sp/>&gt;::iterator<sp/>end<sp/>=<sp/>m_vecs.end();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*itr<sp/>)<sp/>(<sp/>*itr<sp/>)-&gt;shift(<sp/>pos,<sp/>offs<sp/>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;shift(<sp/>pos,<sp/>offs<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a6c53c19802435b7512a58ecd193aad8b" kindref="member" tooltip="Get a pointer to the data being stored for one aux data item.">TAuxStore::getIOData</ref>(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>variable<sp/>is<sp/>connected<sp/>to<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_branches.size()<sp/>)<sp/>&amp;&amp;<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>right<sp/>payload<sp/>is<sp/>in<sp/>memory:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;getEntry(<sp/>m_entry<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_branches[<sp/>auxid<sp/>]-&gt;objectPtr();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it&apos;s<sp/>in<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>&amp;&amp;<sp/>m_transientStore-&gt;getAuxIDs().count(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientStore-&gt;getIOData(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>try<sp/>connecting<sp/>to<sp/>it<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>setupInputData(<sp/>auxid<sp/>).isSuccess()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>actually<sp/>an<sp/>error<sp/>condition<sp/>anymore.<sp/>We<sp/>can<sp/>end<sp/>up<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>decorate<sp/>constant<sp/>objects<sp/>coming<sp/>from<sp/>the<sp/>input<sp/>file,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>one<sp/>event<sp/>we<sp/>can&apos;t<sp/>set<sp/>any<sp/>decorations.<sp/>For<sp/>instance<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>container<sp/>is<sp/>empty.<sp/>In<sp/>that<sp/>case<sp/>the<sp/>object<sp/>will<sp/>still<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>auxiliary<sp/>ID<sp/>belonging<sp/>to<sp/>that<sp/>decoration<sp/>as<sp/>being<sp/>available,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>really<sp/>isn&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Later<sp/>on<sp/>it<sp/>might<sp/>be<sp/>needed<sp/>to<sp/>tweak<sp/>the<sp/>logic<sp/>of<sp/>all<sp/>of<sp/>this,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>now<sp/>just<sp/>silently<sp/>returning<sp/>0<sp/>seems<sp/>to<sp/>do<sp/>the<sp/>right<sp/>thing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>should<sp/>know<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&gt;=<sp/>m_branches.size()<sp/>)<sp/>||<sp/>(<sp/>!<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Fatal(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getIOData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>logic<sp/>error<sp/>detected&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>right<sp/>payload<sp/>is<sp/>in<sp/>memory:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;getEntry(<sp/>m_entry<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_branches[<sp/>auxid<sp/>]-&gt;objectPtr();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a456132ea9c9d352ac102f79b428db9a6" kindref="member" tooltip="Return the type of the data to be stored for one aux data item.">TAuxStore::getIOType</ref>(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>variable<sp/>is<sp/>connected<sp/>to<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_branches.size()<sp/>)<sp/>&amp;&amp;<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_branches[<sp/>auxid<sp/>]-&gt;typeInfo();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it&apos;s<sp/>in<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_transientStore<sp/>&amp;&amp;<sp/>m_transientStore-&gt;getAuxIDs().count(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientStore-&gt;getIOType(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>try<sp/>connecting<sp/>to<sp/>it<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>setupInputData(<sp/>auxid<sp/>).isSuccess()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getIOType&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>connect<sp/>to<sp/>auxiliary<sp/>variable<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%i<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>),</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>should<sp/>know<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&gt;=<sp/>m_branches.size()<sp/>)<sp/>||<sp/>(<sp/>!<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Fatal(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::getIOType&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>logic<sp/>error<sp/>detected&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>type<sp/>info:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_branches[<sp/>auxid<sp/>]-&gt;typeInfo();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" kindref="member" tooltip="Convenience type declaration.">TAuxStore::auxid_set_t</ref>&amp;<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1af25aa5f7c49ebf12cfe1efce13366647" kindref="member" tooltip="Get the types(names) of variables created dynamically.">TAuxStore::getDynamicAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>auxiliary<sp/>decorations<sp/>handled<sp/>by<sp/>this<sp/>object<sp/>are<sp/>considered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getAuxIDs();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a315008cfc1331acd2639b78722ecb3c9" kindref="member" tooltip="Select dynamic auxiliary attributes for writing.">TAuxStore::selectAux</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;<sp/>std::string<sp/>&gt;&amp;<sp/>attributes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_selection.selectAux(<sp/>attributes<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" kindref="member" tooltip="Convenience type declaration.">TAuxStore::auxid_set_t</ref>&amp;<sp/><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a8bba42e8001df5a3f99ef3f4cd453b08" kindref="member" tooltip="Get the IDs of the selected aux variables.">TAuxStore::getSelectedAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>multi-threaded<sp/>execution:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guard_t<sp/>guard(<sp/>m_mutex1<sp/>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>calculation<sp/>up<sp/>to<sp/>the<sp/>internal<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_selection.getSelectedAuxIDs(<sp/>m_auxIDs<sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/>TAuxStore::initStats(<sp/>::TTree*<sp/>tree<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>the<sp/>object<sp/>to<sp/>this<sp/>input<sp/>tree:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;initStats&quot;</highlight><highlight class="normal">,<sp/>readFrom(<sp/>tree,<sp/>kFALSE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Conveninence<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadStats&amp;<sp/>stats<sp/>=<sp/><ref refid="d2/d34/classxAOD_1_1IOStats_1ae4117e7fcedb5d1b7aa79231e9cb0c89" kindref="member" tooltip="Singleton object accessor.">IOStats::instance</ref>().stats();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Teach<sp/>the<sp/>cache<sp/>about<sp/>all<sp/>the<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>itr<sp/>=<sp/>m_auxIDs.begin();</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxid_set_t::const_iterator<sp/>end<sp/>=<sp/>m_auxIDs.end();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end;<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.branch(<sp/>m_prefix,<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>number<sp/>of<sp/>known<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stats.setBranchNum(<sp/>stats.branchNum()<sp/>+<sp/>m_auxIDs.size()<sp/>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/>TAuxStore::setupInputData(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>right<sp/>away<sp/>if<sp/>we<sp/>already<sp/>know<sp/>that<sp/>the<sp/>branch<sp/>is<sp/>missing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>auxid<sp/>&lt;<sp/>m_missingBranches.size()<sp/>)<sp/>&amp;&amp;<sp/>m_missingBranches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aabcd1526349be69a2818959426c1e2914" kindref="member">TReturnCode::kRecoverable</ref>;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>internal<sp/>storage<sp/>is<sp/>large<sp/>enough:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_vecs.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_branches.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>need<sp/>to<sp/>do<sp/>anything:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>&amp;&amp;<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>little<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_inTree<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>input<sp/>TTree<sp/>set<sp/>up!&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>||<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>internal<sp/>variables<sp/>of<sp/>the<sp/>object<sp/>got<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;messed<sp/>up?!?&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>property<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>statBrName<sp/>=<sp/>m_prefix<sp/>+</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str();</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>dynBrName<sp/>=<sp/>m_dynPrefix<sp/>+</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>branch<sp/>exists:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Bool_t<sp/>staticBranch<sp/>=<sp/>kTRUE;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>brName<sp/>=<sp/>statBrName;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TBranch*<sp/>br<sp/>=<sp/>m_inTree-&gt;GetBranch(<sp/>statBrName<sp/>);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>=<sp/>m_inTree-&gt;GetBranch(<sp/>dynBrName<sp/>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>TTree::GetBranch<sp/>is<sp/>expensive,<sp/>remember<sp/>that<sp/>we<sp/>didn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>this<sp/>branch<sp/>in<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_missingBranches.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_missingBranches.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_missingBranches[<sp/>auxid<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>branch<sp/>doesn&apos;t<sp/>exist,<sp/>but<sp/>this<sp/>is<sp/>not<sp/>an<sp/>error<sp/>per<sp/>se.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>may<sp/>just<sp/>be<sp/>calling<sp/>isAvailable(...)<sp/>on<sp/>the<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aabcd1526349be69a2818959426c1e2914" kindref="member">TReturnCode::kRecoverable</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>a<sp/>dynamic<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticBranch<sp/>=<sp/>kFALSE;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName<sp/>=<sp/>dynBrName;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it&apos;s<sp/>a<sp/>&quot;primitive<sp/>branch&quot;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bool_t<sp/>primitiveBranch<sp/>=<sp/>isPrimitiveBranch(<sp/>br<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it&apos;s<sp/>a<sp/>&quot;container<sp/>branch&quot;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bool_t<sp/>containerBranch<sp/>=</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>primitiveBranch<sp/>?<sp/>kFALSE<sp/>:<sp/>isContainerBranch(<sp/>br,<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>structure<sp/>mode<sp/>if<sp/>it<sp/>has<sp/>not<sp/>been<sp/>defined<sp/>externally:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_structMode<sp/>==<sp/>kUndefinedStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_structMode<sp/>=<sp/>(<sp/>containerBranch<sp/>?<sp/>kContainerStore<sp/>:<sp/>kObjectStore<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>branch<sp/>type<sp/>makes<sp/>sense:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>containerBranch<sp/>&amp;&amp;<sp/>(<sp/>m_structMode<sp/>!=<sp/>kContainerStore<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>!<sp/>containerBranch<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>m_structMode<sp/>!=<sp/>kObjectStore<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Branch<sp/>type<sp/>and<sp/>requested<sp/>structure<sp/>mode<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;differ<sp/>for<sp/>branch:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data()<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>what<sp/>variable<sp/>it<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>clDummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::EDataType<sp/>dType<sp/>=<sp/>kOther_t;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>br-&gt;GetExpectedType(<sp/>clDummy,<sp/>dType<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),<sp/>brName.Data()<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>property<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>brType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isRegisteredType(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>from<sp/>the<sp/>auxiliary<sp/>type<sp/>registry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brType<sp/>=</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>containerBranch<sp/>?</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getVecType(<sp/>auxid<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getType(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>from<sp/>the<sp/>input<sp/>branch<sp/>itself:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brType<sp/>=<sp/>(<sp/>clDummy<sp/>?<sp/>clDummy-&gt;GetTypeInfo()<sp/>:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<sp/>Utils::getTypeInfo(<sp/>dType<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>brType<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>read/copy<sp/>variable<sp/>%s<sp/>(%s)&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data(),<sp/>clDummy-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aabcd1526349be69a2818959426c1e2914" kindref="member">TReturnCode::kRecoverable</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>brTypeName<sp/>=<sp/>Utils::getTypeName(<sp/>*brType<sp/>).c_str();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>the<sp/>needed<sp/>dictionary<sp/>for<sp/>an<sp/>object<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>brClass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>primitiveBranch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>property&apos;s<sp/>class:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brClass<sp/>=<sp/>::TClass::GetClass(<sp/>*brType,<sp/>kTRUE,<sp/>kTRUE<sp/>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>brClass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brClass<sp/>=<sp/>::TClass::GetClass(<sp/>brTypeName<sp/>);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>brClass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>dictionary<sp/>available<sp/>for<sp/>class<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brTypeName.Data()<sp/>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>smart<sp/>object<sp/>holding<sp/>this<sp/>vector:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isRegisteredType(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().makeVector(<sp/>auxid,<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>containerBranch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;resize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>in-memory<sp/>vector<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>%s<sp/>(%i)&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data(),</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>branch<sp/>handle:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TBranchHandle(<sp/>staticBranch,<sp/>primitiveBranch,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brType,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>containerBranch<sp/>?</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toVector()<sp/>:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr()<sp/>),</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxid,<sp/>&amp;m_prefix<sp/>);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>tree<sp/>in<sp/>the<sp/>&quot;right<sp/>mode&quot;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inTree-&gt;SetMakeClass(<sp/>staticBranch<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>to<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Int_t<sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>clDummy<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TString(<sp/>clDummy-&gt;GetName()<sp/>).Contains(<sp/></highlight><highlight class="stringliteral">&quot;basic_string&lt;char&gt;&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>pretty<sp/>much<sp/>just<sp/>a<sp/>hack.<sp/>As<sp/>it<sp/>happens,<sp/>Athena<sp/>I/O<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>dynamic<sp/>branches<sp/>that<sp/>consider<sp/>themselves<sp/>to<sp/>be<sp/>of<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;vector&lt;basic_string&lt;char&gt;<sp/>&gt;&quot;<sp/>and<sp/>similar.<sp/>(Instead<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>canonical<sp/>&quot;vector&lt;string&gt;&quot;<sp/>name.)<sp/>When<sp/>we<sp/>encounter<sp/>such<sp/>a<sp/>branch,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>connect<sp/>to<sp/>it<sp/>without<sp/>performing<sp/>any<sp/>compatibility<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>apply<sp/>any<sp/>read<sp/>rules<sp/>in<sp/>this<sp/>case<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inTree-&gt;SetBranchAddress(<sp/>brName,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;inputObjectPtr(),</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;branchPtr()<sp/>);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inTree-&gt;SetBranchAddress(<sp/>brName,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;inputObjectPtr(),</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;branchPtr(),</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brClass,<sp/>dType,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>!<sp/>staticBranch<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>!<sp/>primitiveBranch<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>status<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Coulnd&apos;t<sp/>connect<sp/>to<sp/>branch<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data()<sp/>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>code:<sp/>%i&quot;</highlight><highlight class="normal"><sp/>),<sp/>status<sp/>);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_vecs[<sp/>auxid<sp/>];</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_branches[<sp/>auxid<sp/>];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>entry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;getEntry(<sp/>m_entry<sp/>);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>which<sp/>variable<sp/>got<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>just<sp/>replaced<sp/>a<sp/>generic<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isRegisteredType(<sp/>auxid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>variable<sp/>we<sp/>just<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>auxname<sp/>=</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there&apos;s<sp/>another<sp/>variable<sp/>with<sp/>this<sp/>name<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_vecs.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>this<sp/>aux<sp/>ID:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_vecs[<sp/>i<sp/>]<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ingore<sp/>the<sp/>object<sp/>that<sp/>we<sp/>*just*<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i<sp/>==<sp/>auxid<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>testname<sp/>=</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>has<sp/>the<sp/>same<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>testname<sp/>!=<sp/>auxname<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>other<sp/>one<sp/>is<sp/>a<sp/>non-registered<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isRegisteredType(<sp/>i<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupInputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>logic<sp/>error!&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Okay,<sp/>we<sp/>do<sp/>need<sp/>to<sp/>remove<sp/>this<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_vecs[<sp/>i<sp/>];<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_branches[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>i<sp/>]<sp/>=<sp/>0;<sp/>m_branches[<sp/>i<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.erase(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/>TAuxStore::setupOutputData(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>we<sp/>need<sp/>to<sp/>do<sp/>anything:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_outTree<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>variable<sp/>needs<sp/>to<sp/>be<sp/>written<sp/>out:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>isAuxIDSelected(<sp/>auxid<sp/>)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>containers<sp/>are<sp/>large<sp/>enough:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_vecs.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_branches.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_branchesWritten.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branchesWritten.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>auxiliary<sp/>variable<sp/>is<sp/>already<sp/>in<sp/>the<sp/>output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_branchesWritten[<sp/>auxid<sp/>]<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>variable<sp/>was<sp/>put<sp/>into<sp/>the<sp/>transient<sp/>store<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decoration,<sp/>and<sp/>now<sp/>needs<sp/>to<sp/>be<sp/>put<sp/>into<sp/>the<sp/>output<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>)<sp/>&amp;&amp;<sp/>m_transientStore<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_transientStore-&gt;getAuxIDs().find(<sp/>auxid<sp/>)<sp/>!=</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transientStore-&gt;getAuxIDs().end()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>variable<sp/>from<sp/>the<sp/>transient<sp/>store:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pptr<sp/>=<sp/>m_transientStore-&gt;getData(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>pptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Fatal(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>logic<sp/>error<sp/>detected&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>registry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>reg<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>new<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]<sp/>=<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref>(<sp/>auxid,<sp/>m_size,<sp/>m_size<sp/>);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>decoration<sp/>in<sp/>memory<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>writing&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>type<sp/>=<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref>(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>the<sp/>type<sp/>of<sp/>transient<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>%i&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>get<sp/>the<sp/>factory<sp/>for<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>factory<sp/>=</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref>(<sp/>*type<sp/>);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>factory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>factory<sp/>found<sp/>for<sp/>transient<sp/>variable<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%i&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>do<sp/>the<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_size;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" kindref="member" tooltip="Copy an element between vectors.">copy</ref>(<sp/>ptr,<sp/>i,<sp/>pptr,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>now<sp/>remember<sp/>that<sp/>this<sp/>is<sp/>a<sp/>decoration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_isDecoration.size()<sp/>&lt;=<sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isDecoration.resize(<sp/>auxid<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isDecoration[<sp/>auxid<sp/>]<sp/>=<sp/>::kTRUE;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>know<sp/>about<sp/>this<sp/>variable<sp/>to<sp/>be<sp/>on<sp/>the<sp/>input,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>haven&apos;t<sp/>connected<sp/>to<sp/>it<sp/>yet:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_auxIDs.find(<sp/>auxid<sp/>)<sp/>!=<sp/>m_auxIDs.end()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>!<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>!<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupInputData(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>know<sp/>the<sp/>store&apos;s<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_structMode<sp/>!=<sp/>kContainerStore<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_structMode<sp/>!=<sp/>kObjectStore<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Structure<sp/>mode<sp/>unknown<sp/>for<sp/>variable<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>variable<sp/>exists<sp/>already<sp/>in<sp/>memory:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_vecs[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().makeVector(<sp/>auxid,<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;resize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>branch<sp/>handle<sp/>exists<sp/>already:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_branches[<sp/>auxid<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>property<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>brType<sp/>=</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_structMode<sp/>==<sp/>kContainerStore<sp/>?</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getVecType(<sp/>auxid<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getType(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>handle<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TBranchHandle(<sp/>kFALSE,<sp/>(<sp/>strlen(<sp/>brType-&gt;name()<sp/>)<sp/>==<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brType,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>?</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toPtr()<sp/>:</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vecs[<sp/>auxid<sp/>]-&gt;toVector()<sp/>),</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxid,<sp/>&amp;m_prefix<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>name<sp/>for<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>brName<sp/>=</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dynPrefix<sp/>+<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getName(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>output<sp/>branch<sp/>exists<sp/>already,<sp/>assume<sp/>that<sp/>it<sp/>was<sp/>us<sp/>making</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TBranch*<sp/>br<sp/>=<sp/>m_outTree-&gt;GetBranch(<sp/>brName<sp/>);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apparently<sp/>a<sp/>branch<sp/>that<sp/>was<sp/>already<sp/>set<sp/>up<sp/>for<sp/>copying<sp/>as<sp/>a<sp/>basic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variable,<sp/>now<sp/>got<sp/>accessed<sp/>explicitly.<sp/>So<sp/>let&apos;s<sp/>update<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branch<sp/>to<sp/>point<sp/>to<sp/>this<sp/>new<sp/>location<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;SetAddress(<sp/>m_branches[<sp/>auxid<sp/>]-&gt;outputObjectPtr()<sp/>);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>cache.<sp/>Notice<sp/>that<sp/>the<sp/>&quot;write<sp/>status&quot;<sp/>of<sp/>the<sp/>typeless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auxiliary<sp/>ID<sp/>is<sp/>not<sp/>turned<sp/>off.<sp/>But<sp/>it<sp/>shouldn&apos;t<sp/>matter,<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>will<sp/>not<sp/>be<sp/>accessed<sp/>in<sp/>a<sp/>typeless<sp/>way<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branchesWritten[<sp/>auxid<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>know<sp/>the<sp/>type<sp/>of<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>brType<sp/>=<sp/>m_branches[<sp/>auxid<sp/>]-&gt;typeInfo();</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>brType<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;There&apos;s<sp/>an<sp/>internal<sp/>logic<sp/>error<sp/>in<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;code&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>brTypeName<sp/>=<sp/>Utils::getTypeName(<sp/>*brType<sp/>);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decide<sp/>if<sp/>this<sp/>is<sp/>a<sp/>primitive<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bool_t<sp/>primitiveBranch<sp/>=<sp/>(<sp/>strlen(<sp/>brType-&gt;name()<sp/>)<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>create<sp/>the<sp/>branch<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>primitiveBranch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>&quot;ROOT<sp/>type&quot;<sp/>belonging<sp/>to<sp/>this<sp/>primitive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rootType<sp/>=<sp/>Utils::rootType(<sp/>brType-&gt;name()[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rootType<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>not<sp/>known<sp/>for<sp/>variable<sp/>\&quot;%s\&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>type<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data(),<sp/>brTypeName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>type<sp/>description:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>typeDesc;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDesc<sp/>&lt;&lt;<sp/>brName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rootType;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>=<sp/>m_outTree-&gt;Branch(<sp/>brName,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;outputObjectPtr(),</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDesc.str().c_str(),<sp/>m_basketSize<sp/>);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>the<sp/>dictionary<sp/>for<sp/>the<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TClass*<sp/>cl<sp/>=<sp/>TClass::GetClass(<sp/>*brType<sp/>);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>cl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl<sp/>=<sp/>TClass::GetClass(<sp/>brTypeName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>cl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>dictionary<sp/>for<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brTypeName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>cl-&gt;GetStreamerInfo()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>streamer<sp/>info<sp/>available<sp/>for<sp/>type<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>=<sp/>m_outTree-&gt;Branch(<sp/>brName,<sp/>cl-&gt;GetName(),</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_branches[<sp/>auxid<sp/>]-&gt;outputObjectPtr(),</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_basketSize,<sp/>m_splitLevel<sp/>);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>succeeded:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupOutputData&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>creating<sp/>branch<sp/>\&quot;%s\&quot;<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Data(),<sp/>brTypeName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>first<sp/>event,<sp/>fill<sp/>up<sp/>the<sp/>branch<sp/>with<sp/>dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>info:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>Long64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_outTree-&gt;GetEntries();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;Fill();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>cache:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_branchesWritten[<sp/>auxid<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>remember<sp/>that<sp/>we<sp/>now<sp/>handle<sp/>this<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>were<sp/>successful:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/>TAuxStore::scanInputTree()<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>an<sp/>input<sp/>tree<sp/>is<sp/>even<sp/>available:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_inTree<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>not<sp/>an<sp/>error<sp/>if<sp/>it<sp/>isn&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>input<sp/>was<sp/>already<sp/>scanned:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_inputScanned<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>list<sp/>of<sp/>all<sp/>branches<sp/>in<sp/>the<sp/>tree:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObjArray*<sp/>branches<sp/>=<sp/>m_inTree-&gt;GetListOfBranches();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>each<sp/>of<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>Int_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>branches-&gt;GetEntriesFast();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>this<sp/>top-level<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>brName<sp/>=<sp/>branches-&gt;At(<sp/>i<sp/>)-&gt;GetName();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>the<sp/>branch<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TBranch*<sp/>br<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>TBranch*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>branches-&gt;At(<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Fatal(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::scanInputTree&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Logic<sp/>error<sp/>detected&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>top-level<sp/>stores<sp/>let&apos;s<sp/>scan<sp/>the<sp/>static<sp/>branches<sp/>as<sp/>well:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_topStore<sp/>&amp;&amp;<sp/>(<sp/>brName<sp/>==<sp/>m_prefix<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>list<sp/>of<sp/>its<sp/>sub-branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TObjArray*<sp/>sbranches<sp/>=<sp/>br-&gt;GetListOfBranches();</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...and<sp/>then<sp/>loop<sp/>over<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>Int_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sbranches-&gt;GetEntriesFast();<sp/>++j<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>sub-branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>brName<sp/>=<sp/>sbranches-&gt;At(<sp/>j<sp/>)-&gt;GetName();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>make<sp/>a<sp/>variable<sp/>name<sp/>out<sp/>of<sp/>the<sp/>branch<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>auxName<sp/>=<sp/>brName(<sp/>brName.Index(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Length()<sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>this<sp/>entry<sp/>if<sp/>it<sp/>refers<sp/>to<sp/>a<sp/>base<sp/>class:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>auxName.BeginsWith(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::&quot;</highlight><highlight class="normal"><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxName.BeginsWith(<sp/></highlight><highlight class="stringliteral">&quot;SG::&quot;</highlight><highlight class="normal"><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>auxName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ILockable&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sub-branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TBranch*<sp/>sbr<sp/>=</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>::TBranch*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>sbranches-&gt;At(<sp/>j<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>sbr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Fatal(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::scanInputTree&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Logic<sp/>error<sp/>detected&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>rest<sp/>up<sp/>to<sp/>the<sp/>function<sp/>that<sp/>is<sp/>shared<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::scanInputTree&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupAuxBranch(<sp/>sbr,<sp/>auxName,<sp/>kTRUE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>check<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>loop&apos;s<sp/>body:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>has<sp/>the<sp/>right<sp/>prefix<sp/>to<sp/>be<sp/>a<sp/>dynamic<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>brName.BeginsWith(<sp/>m_dynPrefix<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>possible<sp/>to<sp/>create<sp/>dynamic<sp/>variables<sp/>with<sp/>an<sp/>empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>well.<sp/>Which<sp/>is<sp/>a<sp/>bug.<sp/>Such<sp/>variables<sp/>are<sp/>just<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>brName<sp/>==<sp/>m_dynPrefix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::scanInputTree&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Dynamic<sp/>branch<sp/>with<sp/>empty<sp/>name<sp/>found<sp/>on<sp/>container:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prefix.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>auxiliary<sp/>property<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>auxName<sp/>=<sp/>brName(<sp/>brName.Index(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brName.Length()<sp/>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>rest<sp/>up<sp/>to<sp/>the<sp/>function<sp/>that<sp/>is<sp/>shared<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic<sp/>branches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_CHECK(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::scanInputTree&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupAuxBranch(<sp/>br,<sp/>auxName,<sp/>kFALSE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Okay,<sp/>the<sp/>input<sp/>was<sp/>successfully<sp/>scanned:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inputScanned<sp/>=<sp/>kTRUE;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/>TReturnCode<sp/>TAuxStore::setupAuxBranch(<sp/>::TBranch*<sp/>br,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>auxName,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Bool_t<sp/>staticBranch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>branch&apos;s<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>expectedClass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::EDataType<sp/>expectedType<sp/>=<sp/>kOther_t;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>br-&gt;GetExpectedType(<sp/>expectedClass,<sp/>expectedType<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>!<sp/>staticBranch<sp/>)<sp/>||<sp/>(<sp/>strncmp(<sp/>auxName,<sp/></highlight><highlight class="stringliteral">&quot;m_&quot;</highlight><highlight class="normal">,<sp/>2<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupAuxBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>primitive<sp/>variable,<sp/>and<sp/>we&apos;re<sp/>still<sp/>not<sp/>sure<sp/>whether<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>store<sp/>for<sp/>an<sp/>object<sp/>or<sp/>a<sp/>container,<sp/>the<sp/>answer<sp/>is<sp/>given...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>expectedClass<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_structMode<sp/>==<sp/>kUndefinedStore<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_structMode<sp/>=<sp/>kObjectStore;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type_info<sp/>of<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>ti<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_structMode<sp/>==<sp/>kObjectStore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>expectedClass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>expectedClass-&gt;GetTypeInfo();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>&amp;(<sp/>Utils::getTypeInfo(<sp/>expectedType<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>expectedClass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>staticBranch<sp/>)<sp/>||<sp/>(<sp/>strncmp(<sp/>auxName,<sp/></highlight><highlight class="stringliteral">&quot;m_&quot;</highlight><highlight class="normal">,<sp/>2<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupAuxBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TVirtualCollectionProxy*<sp/>prox<sp/>=</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expectedClass-&gt;GetCollectionProxy();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>prox<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>staticBranch<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>strncmp(<sp/>auxName,<sp/></highlight><highlight class="stringliteral">&quot;m_&quot;</highlight><highlight class="normal">,<sp/>2<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupAuxBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prox-&gt;GetValueClass()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>prox-&gt;GetValueClass()-&gt;GetTypeInfo();</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>&amp;(<sp/>Utils::getTypeInfo(<sp/>prox-&gt;GetType()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>registry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>registry<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>registry<sp/>already<sp/>knows<sp/>this<sp/>variable<sp/>name.<sp/>If<sp/>yes,<sp/>let&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>type<sp/>known<sp/>by<sp/>the<sp/>registry.<sp/>To<sp/>be<sp/>able<sp/>to<sp/>deal<sp/>with<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>schema<sp/>evolution<sp/>in<sp/>dynamic<sp/>branches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>regAuxid<sp/>=<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref>(<sp/>auxName<sp/>);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>regAuxid<sp/>!=<sp/>SG::null_auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>regAuxid<sp/>);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>didn&apos;t<sp/>find<sp/>a<sp/>type_info<sp/>for<sp/>the<sp/>branch,<sp/>give<sp/>up<sp/>now...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>an<sp/>auxiliary<sp/>ID<sp/>for<sp/>this<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>=<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>(<sp/>*ti,<sp/>auxName<sp/>);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>try<sp/>to<sp/>find<sp/>a<sp/>compiled<sp/>factory<sp/>for<sp/>the<sp/>vector<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>auxid<sp/>==<sp/>SG::null_auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>name<sp/>of<sp/>the<sp/>factory&apos;s<sp/>class:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fac_class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SG::AuxTypeVectorFactory&lt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::getTypeName(<sp/>*ti<sp/>);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fac_class_name[<sp/>fac_class_name.size()<sp/>-<sp/>1<sp/>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fac_class_name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fac_class_name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>the<sp/>dictionary<sp/>of<sp/>this<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>fac_class<sp/>=<sp/>TClass::GetClass(<sp/>fac_class_name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fac_class<sp/>&amp;&amp;<sp/>fac_class-&gt;IsLoaded()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>base_class<sp/>=</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TClass::GetClass(<sp/></highlight><highlight class="stringliteral">&quot;SG::IAuxTypeVectorFactory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>base_class<sp/>&amp;&amp;<sp/>base_class-&gt;IsLoaded()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t<sp/>offs<sp/>=<sp/>fac_class-&gt;GetBaseClassOffset(<sp/>base_class<sp/>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>offs<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fac_vp<sp/>=<sp/>fac_class-&gt;New();</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fac_vp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tmp<sp/>=</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>fac_vp<sp/>)<sp/>+<sp/>offs;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac<sp/>=</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref>(<sp/>*ti,<sp/>fac<sp/>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxid<sp/>=<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>(<sp/>*ti,<sp/>auxName<sp/>);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>that<sp/>didn&apos;t<sp/>succeed,<sp/>let&apos;s<sp/>assign<sp/>a<sp/>generic<sp/>factory<sp/>to<sp/>this<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>auxid<sp/>==<sp/>SG::null_auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>name<sp/>of<sp/>the<sp/>vector<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vec_class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::getTypeName(<sp/>*ti<sp/>);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vec_class_name[<sp/>vec_class_name.size()<sp/>-<sp/>1<sp/>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_class_name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_class_name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>dictionary<sp/>for<sp/>the<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>vec_class<sp/>=<sp/>::TClass::GetClass(<sp/>vec_class_name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vec_class<sp/>&amp;&amp;<sp/>vec_class-&gt;IsLoaded()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TAuxVectorFactory(<sp/>vec_class<sp/>);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref>(<sp/>*ti,<sp/>fac<sp/>);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxid<sp/>=<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>(<sp/>*ti,<sp/>auxName<sp/>);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Warning(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupAuxBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>dictionary<sp/>for<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_class_name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>succeeded:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>auxid<sp/>==<sp/>SG::null_auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::setupAuxBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>assign<sp/>auxiliary<sp/>ID<sp/>to<sp/>branch<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">TReturnCode::kFailure</ref>;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>auxiliary<sp/>ID:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_auxIDs.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++m_tick;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref>;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/>::Bool_t<sp/>TAuxStore::isAuxIDSelected(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>temporary<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1a1a8bcc4ee42936e2b794bac38e0f6de0" kindref="member" tooltip="A set of aux data identifiers.">auxid_set_t</ref><sp/>auxids;<sp/>auxids.insert(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>auxid<sp/>is<sp/>returned<sp/>as<sp/>a<sp/>selected<sp/>ID:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_selection.getSelectedAuxIDs(<sp/>auxids<sp/>).size();</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/>::Bool_t<sp/>TAuxStore::isPrimitiveBranch(<sp/>::TBranch*<sp/>br<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>variables<sp/>needed<sp/>for<sp/>the<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>cl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::EDataType<sp/>dType<sp/>=<sp/>kOther_t;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>variable<sp/>type<sp/>from<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>br-&gt;GetExpectedType(<sp/>cl,<sp/>dType<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isPrimitiveBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),<sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>check<sp/>is<sp/>made<sp/>using<sp/>the<sp/>data<sp/>type<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>dType<sp/>!=<sp/>kOther_t<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>dType<sp/>!=<sp/>kNoType_t<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>dType<sp/>!=<sp/>kVoid_t<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/>::Bool_t<sp/>TAuxStore::isContainerBranch(<sp/>::TBranch*<sp/>br,<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>unknown<sp/>types<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>if<sp/>the<sp/>branch<sp/>describes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>container<sp/>or<sp/>a<sp/>single<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>isRegisteredType(<sp/>auxid<sp/>)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>variables<sp/>needed<sp/>for<sp/>the<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>cl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::EDataType<sp/>dType<sp/>=<sp/>kOther_t;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>variable<sp/>type<sp/>from<sp/>the<sp/>branch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>br-&gt;GetExpectedType(<sp/>cl,<sp/>dType<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>the<sp/>type<sp/>of<sp/>branch<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),<sp/>br-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>class<sp/>associated<sp/>with<sp/>the<sp/>branch<sp/>then<sp/>it<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>branch<sp/>describing<sp/>a<sp/>standalone<sp/>object.<sp/>(As<sp/>it<sp/>should<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;primitive&quot;<sp/>branch<sp/>in<sp/>this<sp/>case.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>cl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>class,<sp/>ask<sp/>for<sp/>the<sp/>type_info<sp/>of<sp/>its<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>root_ti<sp/>=<sp/>cl-&gt;GetTypeInfo();</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>root_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>may<sp/>be<sp/>an<sp/>emulated<sp/>class.<sp/>One<sp/>known<sp/>case<sp/>is<sp/>when<sp/>the<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>saved<sp/>as<sp/>&quot;basic_string&lt;char&gt;&quot;<sp/>rather<sp/>than<sp/>&quot;string&quot;<sp/>by<sp/>Athena<sp/>I/O.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(It&apos;s<sp/>not<sp/>fully<sp/>understood<sp/>why<sp/>this<sp/>happens<sp/>for<sp/>dynamic<sp/>branches...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So,<sp/>let&apos;s<sp/>see<sp/>if<sp/>we<sp/>can<sp/>get<sp/>a<sp/>functional<sp/>TClass<sp/>by<sp/>massaging<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>name<sp/>a<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TString<sp/>typeName(<sp/>cl-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeName.ReplaceAll(<sp/></highlight><highlight class="stringliteral">&quot;basic_string&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TClass*<sp/>newCl<sp/>=<sp/>::TClass::GetClass(<sp/>typeName<sp/>);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>newCl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_ti<sp/>=<sp/>newCl-&gt;GetTypeInfo();</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>root_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>an<sp/>std::type_info<sp/>object<sp/>out<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;branch<sp/>\&quot;%s\&quot;<sp/>of<sp/>type<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br-&gt;GetName(),<sp/>cl-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>for<sp/>the<sp/>auxiliary<sp/>type<sp/>infos:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>aux_obj_ti<sp/>=</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getType(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>aux_obj_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>std::type_info<sp/>object<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;auxiliary<sp/>id:<sp/>%i&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>aux_vec_ti<sp/>=</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getVecType(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>aux_vec_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>std::type_info<sp/>object<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;auxiliary<sp/>id:<sp/>%i&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>auxid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>which<sp/>one<sp/>the<sp/>ROOT<sp/>type<sp/>info<sp/>agrees<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*root_ti<sp/>==<sp/>*aux_obj_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>describes<sp/>a<sp/>single<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*root_ti<sp/>==<sp/>*aux_vec_ti<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>describes<sp/>a<sp/>container<sp/>of<sp/>objects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>enum<sp/>and<sp/>vector&lt;enum&gt;<sp/>types<sp/>(PFO...)<sp/>the<sp/>type<sp/>given<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>aux<sp/>type<sp/>registry<sp/>is<sp/>vector&lt;int&gt;.<sp/>We<sp/>have<sp/>to<sp/>take<sp/>it<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cl-&gt;GetCollectionProxy()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>*aux_vec_ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>neither,<sp/>then<sp/>something<sp/>went<sp/>wrong...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>if<sp/>branch<sp/>describes<sp/>a<sp/>single<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>or<sp/>a<sp/>container&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;ROOT<sp/>type<sp/><sp/>:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::getTypeName(<sp/>*root_ti<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::getTypeName(<sp/>*aux_obj_ti<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::isContainerBranch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::getTypeName(<sp/>*aux_vec_ti<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/>::Bool_t<sp/>TAuxStore::isRegisteredType(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>auxid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>some<sp/>data:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>registry<sp/>=</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">auxid_t</ref><sp/>sauxid<sp/>=</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;<sp/><ref refid="d4/d24/classSG_1_1AuxTypePlaceholder" kindref="compound">SG::AuxTypePlaceholder</ref><sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;AuxTypePlaceholder&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>sti<sp/>=<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref>(<sp/>sauxid<sp/>);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>types<sp/>match:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>*sti<sp/>!=<sp/>*(<sp/>registry.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref>(<sp/>auxid<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/>TAuxStore::TBranchHandle::TBranchHandle(<sp/>::Bool_t<sp/>staticBranch,</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Bool_t<sp/>primitiveBranch,</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>ti,</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>obj,<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>prefix<sp/>)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_branch(<sp/>0<sp/>),<sp/>m_object(<sp/>obj<sp/>),<sp/>m_static(<sp/>staticBranch<sp/>),</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_primitive(<sp/>primitiveBranch<sp/>),</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_typeInfo(<sp/>ti<sp/>),<sp/>m_needsRead(<sp/>kTRUE<sp/>),<sp/>m_auxid(<sp/>auxid<sp/>),</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prefix(<sp/>prefix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/>::Int_t<sp/>TAuxStore::TBranchHandle::getEntry(<sp/>::Long64_t<sp/>entry<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>little<sp/>sanity<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_branch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>no<sp/>longer<sp/>an<sp/>error.<sp/>We<sp/>can<sp/>have<sp/>such<sp/>objects<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decorations,<sp/>which<sp/>don&apos;t<sp/>exist<sp/>on<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>I/O<sp/>monitoring:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d34/classxAOD_1_1IOStats_1ae4117e7fcedb5d1b7aa79231e9cb0c89" kindref="member" tooltip="Singleton object accessor.">IOStats::instance</ref>().stats().readBranch(<sp/>*m_prefix,<sp/>m_auxid<sp/>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>anything<sp/>needs<sp/>to<sp/>be<sp/>done:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_branch-&gt;GetReadEntry()<sp/>==<sp/>entry<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>!<sp/>m_needsRead<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>the<sp/>branch<sp/>in<sp/>the<sp/>right<sp/>mode:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>m_primitive<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_branch-&gt;GetMakeClass()<sp/>!=<sp/>m_static<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>!<sp/>m_branch-&gt;SetMakeClass(<sp/>m_static<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Error(<sp/></highlight><highlight class="stringliteral">&quot;xAOD::TAuxStore::TBranchHandle::getEntry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAOD_MESSAGE(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>call<sp/>SetMakeClass(%i)<sp/>on<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;branch<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_static<sp/>),<sp/>m_branch-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reading<sp/>will<sp/>now<sp/>be<sp/>done:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_needsRead<sp/>=<sp/>kFALSE;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>entry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_branch-&gt;GetEntry(<sp/>entry<sp/>);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/>::TBranch**<sp/>TAuxStore::TBranchHandle::branchPtr()<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_branch;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>TAuxStore::TBranchHandle::objectPtr()<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_object;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>TAuxStore::TBranchHandle::inputObjectPtr()<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>correct<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_static<sp/>||<sp/>m_primitive<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_object;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_object;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>TAuxStore::TBranchHandle::outputObjectPtr()<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>correct<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_primitive<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_object;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_object;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>TAuxStore::TBranchHandle::typeInfo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_typeInfo;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TAuxStore::TBranchHandle::reset()<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_needsRead<sp/>=<sp/>kTRUE;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xAOD</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx"/>
  </compounddef>
</doxygen>
