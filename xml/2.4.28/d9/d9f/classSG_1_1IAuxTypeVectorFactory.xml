<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kind="class" prot="public">
    <compoundname>SG::IAuxTypeVectorFactory</compoundname>
    <derivedcompoundref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" prot="public" virt="non-virtual">SG::AuxTypeVectorFactory&lt; FacTest1 &gt;</derivedcompoundref>
    <derivedcompoundref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" prot="public" virt="non-virtual">SG::AuxTypeVectorFactory&lt; FacTest2 &gt;</derivedcompoundref>
    <derivedcompoundref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" prot="public" virt="non-virtual">SG::AuxTypeVectorFactory&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="d2/d68/classxAOD_1_1TAuxVectorFactory" prot="public" virt="non-virtual">xAOD::TAuxVectorFactory</derivedcompoundref>
    <includes refid="d4/d2c/IAuxTypeVectorFactory_8h" local="no">IAuxTypeVectorFactory.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a12d0aca91a0afa511b44fa78271a7663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SG::IAuxTypeVectorFactory::~IAuxTypeVectorFactory</definition>
        <argsstring>()</argsstring>
        <name>~IAuxTypeVectorFactory</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a41bb2ee5de5b7c173a9b87dbe7762b7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref> *</type>
        <definition>virtual IAuxTypeVector* SG::IAuxTypeVectorFactory::create</definition>
        <argsstring>(size_t size, size_t capacity) const =0</argsstring>
        <name>create</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ab47c3c275994600e152416c6a821e3a8">create</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ab47c3c275994600e152416c6a821e3a8">create</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1a341d78d6dced6ff4e113ba99d2525087">create</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ab47c3c275994600e152416c6a821e3a8">create</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Create a vector object of this type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the new vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial capacity of the new vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="56"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVectorFactory::copy</definition>
        <argsstring>(void *dst, size_t dst_index, const void *src, size_t src_index) const =0</argsstring>
        <name>copy</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a469ab34956704968cd8018bdecd578a8">copy</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a469ab34956704968cd8018bdecd578a8">copy</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1a51964fe5714fcd9567c42628702c9f51">copy</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a469ab34956704968cd8018bdecd578a8">copy</reimplementedby>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_index</declname>
        </param>
        <briefdescription>
<para>Copy an element between vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the destination vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of destination element in the vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the source vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of source element in the vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>dst</computeroutput> and @ src can be either the same or different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1af71b66184a8c3660589a7d21e915391e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVectorFactory::swap</definition>
        <argsstring>(void *a, size_t aindex, void *b, size_t bindex) const =0</argsstring>
        <name>swap</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ac31d67660a985693d78f9d2b492a6932">swap</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ac31d67660a985693d78f9d2b492a6932">swap</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1a1ef357cc876adc24dfe36ea3df6cf307">swap</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1ac31d67660a985693d78f9d2b492a6932">swap</reimplementedby>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aindex</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bindex</declname>
        </param>
        <briefdescription>
<para>Swap an element between vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the first vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the first vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the second vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the second vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>a</computeroutput> and @ b can be either the same or different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a347599cb7f89af31af8b2495d817969a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVectorFactory::clear</definition>
        <argsstring>(void *dst, size_t dst_index) const =0</argsstring>
        <name>clear</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a0a29946cda9a32357098aa9f5216a9c4">clear</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a0a29946cda9a32357098aa9f5216a9c4">clear</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1aa5ca84b4407042a3697896b239808f7b">clear</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a0a29946cda9a32357098aa9f5216a9c4">clear</reimplementedby>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_index</declname>
        </param>
        <briefdescription>
<para>Clear an element within a vector (static method). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t SG::IAuxTypeVectorFactory::getEltSize</definition>
        <argsstring>() const =0</argsstring>
        <name>getEltSize</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a07669250585a0111db27e9bfc7788f33">getEltSize</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a07669250585a0111db27e9bfc7788f33">getEltSize</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1a8c64c210f37a3c3fe531a28bcb706eaf">getEltSize</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a07669250585a0111db27e9bfc7788f33">getEltSize</reimplementedby>
        <briefdescription>
<para>Return the size of an element of this vector type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="96"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::type_info *</type>
        <definition>virtual const std::type_info* SG::IAuxTypeVectorFactory::tiVec</definition>
        <argsstring>() const =0</argsstring>
        <name>tiVec</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a37166bcf5475d60c4029036156681375">tiVec</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a37166bcf5475d60c4029036156681375">tiVec</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1a5a14cc2bc67141a2183bf8991fc854dc">tiVec</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a37166bcf5475d60c4029036156681375">tiVec</reimplementedby>
        <briefdescription>
<para>Return the <computeroutput>type_info</computeroutput> of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="102"/>
      </memberdef>
      <memberdef kind="function" id="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1ac4a325405ebbd00df2b5927aa25015e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SG::IAuxTypeVectorFactory::isDynamic</definition>
        <argsstring>() const =0</argsstring>
        <name>isDynamic</name>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a113b8fcec227f5df75387bf66659198a">isDynamic</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a113b8fcec227f5df75387bf66659198a">isDynamic</reimplementedby>
        <reimplementedby refid="d2/d68/classxAOD_1_1TAuxVectorFactory_1ac3725f52a76955a48317a8f9da677bd5">isDynamic</reimplementedby>
        <reimplementedby refid="dd/d0c/structFacTest2DynFac_1a62e83587faf44899b89a1b8c2b009320">isDynamic</reimplementedby>
        <reimplementedby refid="d4/db1/structFacTest1DynFac_1aaa7d7d0fdd0ee44d6957113a3a7170d5">isDynamic</reimplementedby>
        <reimplementedby refid="d6/d8c/classSG_1_1AuxTypeVectorFactory_1a113b8fcec227f5df75387bf66659198a">isDynamic</reimplementedby>
        <briefdescription>
<para>True if the vectors created by this factory work by dynamic emulation (via <computeroutput>TVirtualCollectionProxy</computeroutput> or similar); false if the std::vector code is used directly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for factory objects that create vectors. </para>    </briefdescription>
    <detaileddescription>
<para>The auxiliary data for a container are stored in a set of STL vectors, one for each data item. However, we want to allow storing arbitrary types in these vectors. Thus, we define an abstract interface to operate on the vectors, <computeroutput><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref></computeroutput>.</para><para>Now, we need to registry of how to create an appropriate <computeroutput><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref></computeroutput> for a given <computeroutput>std::type_info</computeroutput>. To make that easier, we encapsulate the creation of those vector objects using this factory interface. There will be one instance of this for each vector type that we deal with. Usually, this interface will be implemented by <computeroutput><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound">AuxTypeVector</ref></computeroutput>; however, other implementations are used, for example, for reading auxiliary data from root when we don&apos;t know its type at compile-time. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9208">
        <label>FacTest1DynFac</label>
        <link refid="d4/db1/structFacTest1DynFac"/>
        <childnode refid="9207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9209">
        <label>SG::AuxTypeVectorFactory&lt; FacTest2 &gt;</label>
        <link refid="d6/d8c/classSG_1_1AuxTypeVectorFactory"/>
        <childnode refid="9206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9206">
        <label>SG::IAuxTypeVectorFactory</label>
        <link refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory"/>
      </node>
      <node id="9207">
        <label>SG::AuxTypeVectorFactory&lt; FacTest1 &gt;</label>
        <link refid="d6/d8c/classSG_1_1AuxTypeVectorFactory"/>
        <childnode refid="9206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9210">
        <label>FacTest2DynFac</label>
        <link refid="dd/d0c/structFacTest2DynFac"/>
        <childnode refid="9209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9212">
        <label>xAOD::TAuxVectorFactory</label>
        <link refid="d2/d68/classxAOD_1_1TAuxVectorFactory"/>
        <childnode refid="9206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9211">
        <label>SG::AuxTypeVectorFactory&lt; T &gt;</label>
        <link refid="d6/d8c/classSG_1_1AuxTypeVectorFactory"/>
        <childnode refid="9206" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVectorFactory.h" bodystart="42" bodyend="111"/>
    <listofallmembers>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a347599cb7f89af31af8b2495d817969a" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>clear</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a454ef77bf0c5bd593575f1a3c7271ccf" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>copy</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a41bb2ee5de5b7c173a9b87dbe7762b7a" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>create</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>getEltSize</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1ac4a325405ebbd00df2b5927aa25015e4" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>isDynamic</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1af71b66184a8c3660589a7d21e915391e" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>swap</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>tiVec</name></member>
      <member refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a12d0aca91a0afa511b44fa78271a7663" prot="public" virt="virtual"><scope>SG::IAuxTypeVectorFactory</scope><name>~IAuxTypeVectorFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
