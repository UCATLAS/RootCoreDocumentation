<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx" kind="file">
    <compoundname>ut_xAOD_primitives_enums_test.cxx</compoundname>
    <includes refid="d2/d36/IsolationType_8h" local="yes">xAODPrimitives/IsolationType.h</includes>
    <includes refid="d2/da1/IsolationConeSize_8h" local="yes">xAODPrimitives/IsolationConeSize.h</includes>
    <includes refid="da/d23/IsolationFlavour_8h" local="yes">xAODPrimitives/IsolationFlavour.h</includes>
    <includes refid="d3/de5/xAODPrimitives_2xAODPrimitives_2IsolationCorrection_8h" local="yes">xAODPrimitives/IsolationCorrection.h</includes>
    <includes refid="df/d3d/IsolationCorrectionHelper_8h" local="yes">xAODPrimitives/IsolationCorrectionHelper.h</includes>
    <includes refid="d3/d12/IsolationHelpers_8h" local="yes">xAODPrimitives/IsolationHelpers.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="409644">
        <label>cmath</label>
      </node>
      <node id="409645">
        <label>cassert</label>
      </node>
      <node id="409636">
        <label>xAODPrimitives/IsolationType.h</label>
        <link refid="d2/d36/IsolationType_8h_source"/>
      </node>
      <node id="409639">
        <label>xAODPrimitives/IsolationCorrection.h</label>
        <link refid="d3/de5/xAODPrimitives_2xAODPrimitives_2IsolationCorrection_8h_source"/>
        <childnode refid="409640" relation="include">
        </childnode>
        <childnode refid="409641" relation="include">
        </childnode>
      </node>
      <node id="409635">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx</label>
        <link refid="ut_xAOD_primitives_enums_test.cxx"/>
        <childnode refid="409636" relation="include">
        </childnode>
        <childnode refid="409637" relation="include">
        </childnode>
        <childnode refid="409638" relation="include">
        </childnode>
        <childnode refid="409639" relation="include">
        </childnode>
        <childnode refid="409642" relation="include">
        </childnode>
        <childnode refid="409643" relation="include">
        </childnode>
        <childnode refid="409646" relation="include">
        </childnode>
        <childnode refid="409647" relation="include">
        </childnode>
        <childnode refid="409641" relation="include">
        </childnode>
      </node>
      <node id="409643">
        <label>xAODPrimitives/IsolationHelpers.h</label>
        <link refid="d3/d12/IsolationHelpers_8h_source"/>
        <childnode refid="409636" relation="include">
        </childnode>
        <childnode refid="409637" relation="include">
        </childnode>
        <childnode refid="409638" relation="include">
        </childnode>
        <childnode refid="409644" relation="include">
        </childnode>
        <childnode refid="409645" relation="include">
        </childnode>
        <childnode refid="409646" relation="include">
        </childnode>
      </node>
      <node id="409640">
        <label>bitset</label>
      </node>
      <node id="409641">
        <label>vector</label>
      </node>
      <node id="409646">
        <label>iostream</label>
      </node>
      <node id="409638">
        <label>xAODPrimitives/IsolationFlavour.h</label>
        <link refid="da/d23/IsolationFlavour_8h_source"/>
      </node>
      <node id="409637">
        <label>xAODPrimitives/IsolationConeSize.h</label>
        <link refid="d2/da1/IsolationConeSize_8h_source"/>
      </node>
      <node id="409647">
        <label>algorithm</label>
      </node>
      <node id="409642">
        <label>xAODPrimitives/IsolationCorrectionHelper.h</label>
        <link refid="df/d3d/IsolationCorrectionHelper_8h_source"/>
        <childnode refid="409640" relation="include">
        </childnode>
        <childnode refid="409641" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1ae9d6f8719a1f0bc0ba178fb803dc086a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int encode</definition>
        <argsstring>()</argsstring>
        <name>encode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="11" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="47" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a4516e96e652f21a65b4b8cd0d2bdbc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int decode</definition>
        <argsstring>()</argsstring>
        <name>decode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="12" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a5867c353cad9a35d622b8ea01051ea49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int testCaloBitset</definition>
        <argsstring>()</argsstring>
        <name>testCaloBitset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="13" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="118" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a36a20761ccc2e9eb2c4e113e789d406b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int testTrackBitset</definition>
        <argsstring>()</argsstring>
        <name>testTrackBitset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="14" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="151" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="18" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="18" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a0da60b7bf801726841193afa9640f52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check</definition>
        <argsstring>(bool result, std::string message, Iso::IsolationType type, unsigned int &amp;nfailures)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="db/d3d/namespacexAOD_1_1Iso_1a64cf14cc53f00d0342ccc89131a3ab8f" kindref="member">Iso::IsolationType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>nfailures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a214c2ba3e5226ffd753c7bcb83de1b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool compareBitsets</definition>
        <argsstring>(const std::vector&lt; Iso::IsolationCaloCorrection &gt; &amp;vec1, const std::vector&lt; Iso::IsolationCaloCorrection &gt; &amp;vec2)</argsstring>
        <name>compareBitsets</name>
        <param>
          <type>const std::vector&lt; <ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref> &gt; &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref> &gt; &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="84" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/ut__xAOD__primitives__enums__test_8cxx_1a9dec374a99f23584cc50eba5c0c9e4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool compareBitsets</definition>
        <argsstring>(const std::vector&lt; Iso::IsolationTrackCorrection &gt; &amp;vec1, const std::vector&lt; Iso::IsolationTrackCorrection &gt; &amp;vec2)</argsstring>
        <name>compareBitsets</name>
        <param>
          <type>const std::vector&lt; <ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref> &gt; &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref> &gt; &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx" bodystart="101" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationConeSize.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationFlavour.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationCorrection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationCorrectionHelper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODPrimitives/IsolationHelpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encode();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCaloBitset();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testTrackBitset();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">xAOD;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>testing<sp/>encoding<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures<sp/>=<sp/>encode();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>nfailures<sp/>+=<sp/>decode();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>number<sp/>of<sp/>failures<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nfailures<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>testing<sp/>calo<sp/>bitset<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures2<sp/>=<sp/>testCaloBitset();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>number<sp/>of<sp/>failures<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nfailures2<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>testing<sp/>track<sp/>bitset<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures3<sp/>=<sp/>testTrackBitset();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>number<sp/>of<sp/>failures<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nfailures3<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>nfailures+nfailures2+nfailures3<sp/>!=<sp/>0<sp/>)<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result,<sp/>std::string<sp/>message,<sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1a64cf14cc53f00d0342ccc89131a3ab8f" kindref="member">Iso::IsolationType</ref><sp/>type,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nfailures<sp/>){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!result<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>++nfailures;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encode()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/><sp/>static_cast&lt;int&gt;(Iso::IsolationType::numIsolationTypes)<sp/>;<sp/>++i<sp/>){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>number<sp/>of<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startFailures<sp/>=<sp/>nfailures;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>invalid<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i%10<sp/>&gt;=<sp/>static_cast&lt;int&gt;(Iso::IsolationConeSize::numIsolationConeSizes)<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1a64cf14cc53f00d0342ccc89131a3ab8f" kindref="member">Iso::IsolationType</ref><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1a64cf14cc53f00d0342ccc89131a3ab8f" kindref="member">Iso::IsolationType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>and<sp/>check<sp/>cone<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae9c9db0dffb4f7bc601ccb383ef605cd" kindref="member">Iso::IsolationConeSize</ref><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae7b63dfda279d7aa9a29650d65bab09e" kindref="member" tooltip="convert Isolation Size into cone size">coneSize</ref><sp/>=<sp/>Iso::enumconeSize(type);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>check(<sp/>coneSize<sp/>&lt;=<sp/>Iso::IsolationConeSize::numIsolationConeSizes,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>cone<sp/>size&quot;</highlight><highlight class="normal">,type,nfailures);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fsize<sp/>=<sp/>Iso::coneSize(coneSize);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>check<sp/>(Iso::coneSize(fsize)==coneSize,<sp/></highlight><highlight class="stringliteral">&quot;Cone<sp/>size<sp/>conversion<sp/>to<sp/>float<sp/>&amp;<sp/>back<sp/>failed&quot;</highlight><highlight class="normal">,type,nfailures);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>and<sp/>check<sp/>flavour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1a7efe235f93c604b06856e397129fdb86" kindref="member">Iso::IsolationFlavour</ref><sp/>flavour<sp/>=<sp/>Iso::isolationFlavour(type);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>check(<sp/>flavour<sp/>&lt;=<sp/>Iso::IsolationFlavour::numIsolationFlavours,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>flavour&quot;</highlight><highlight class="normal">,type,nfailures);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>encode<sp/>isolation<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1a64cf14cc53f00d0342ccc89131a3ab8f" kindref="member">Iso::IsolationType</ref><sp/>typeE<sp/>=<sp/>Iso::isolationType(flavour,coneSize);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>check(<sp/>typeE<sp/>==<sp/>type,<sp/></highlight><highlight class="stringliteral">&quot;inconsistent<sp/>conversion<sp/>of<sp/>type&quot;</highlight><highlight class="normal">,type,nfailures);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startFailures<sp/>!=<sp/>nfailures<sp/>){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>detected<sp/>a<sp/>failure<sp/>with<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>typeE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(typeE)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>coneSize<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(coneSize)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(flavour)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfailures;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compareBitsets(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;&amp;<sp/>vec1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;&amp;<sp/>vec2<sp/>){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vec1.size()<sp/>!=<sp/>vec2.size()<sp/>){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>incompatible<sp/>sizes<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec2.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>item<sp/>:<sp/>vec1<sp/>){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>std::find(vec2.begin(),vec2.end(),item);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pos<sp/>!=<sp/>vec2.end()<sp/>)<sp/>++nfound;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nfound<sp/>!=<sp/>vec1.size()<sp/>){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>all<sp/>elements<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nfound<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec1.size()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compareBitsets(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;&amp;<sp/>vec1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;&amp;<sp/>vec2<sp/>){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vec1.size()<sp/>!=<sp/>vec2.size()<sp/>){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>incompatible<sp/>sizes<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec2.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>item<sp/>:<sp/>vec1<sp/>){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>std::find(vec2.begin(),vec2.end(),item);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pos<sp/>!=<sp/>vec2.end()<sp/>)<sp/>++nfound;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nfound<sp/>!=<sp/>vec1.size()<sp/>){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>all<sp/>elements<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nfound<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec1.size()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCaloBitset()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;static_cast&lt;int&gt;(Iso::IsolationCaloCorrection::numIsolationCaloCorrections);++i<sp/>){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref><sp/>cori<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;<sp/>vec1<sp/>=<sp/>{cori};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;<sp/>results;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitset<sp/>bitset;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::encode(vec1,bitset);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec1,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i+1;j&lt;static_cast&lt;int&gt;(Iso::IsolationCaloCorrection::numIsolationCaloCorrections);++j<sp/>){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref><sp/>corj<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(j);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;<sp/>vec2<sp/>=<sp/>vec1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec2.push_back(corj);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::encode(vec2,bitset);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec2,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=j+1;k&lt;static_cast&lt;int&gt;(Iso::IsolationCaloCorrection::numIsolationCaloCorrections);++k<sp/>){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref><sp/>cork<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ae465287a132699088d47001124c72ec8" kindref="member">Iso::IsolationCaloCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationCaloCorrection&gt;<sp/>vec3<sp/>=<sp/>vec2;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3.push_back(cork);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::encode(vec3,bitset);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationCaloCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec3,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfailures;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testTrackBitset()<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfailures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;static_cast&lt;int&gt;(Iso::IsolationTrackCorrection::numIsolationTrackCorrections);++i<sp/>){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref><sp/>cori<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;<sp/>vec1<sp/>=<sp/>{cori};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;<sp/>results;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitset<sp/>bitset;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::encode(vec1,bitset);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec1,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i+1;j&lt;static_cast&lt;int&gt;(Iso::IsolationTrackCorrection::numIsolationTrackCorrections);++j<sp/>){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref><sp/>corj<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(j);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;<sp/>vec2<sp/>=<sp/>vec1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec2.push_back(corj);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::encode(vec2,bitset);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec2,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=j+1;k&lt;static_cast&lt;int&gt;(Iso::IsolationTrackCorrection::numIsolationTrackCorrections);++k<sp/>){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref><sp/>cork<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="db/d3d/namespacexAOD_1_1Iso_1ac0f0dbe9ac669e6afc9a0ac55e84f249" kindref="member">Iso::IsolationTrackCorrection</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Iso::IsolationTrackCorrection&gt;<sp/>vec3<sp/>=<sp/>vec2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3.push_back(cork);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::encode(vec3,bitset);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iso::IsolationTrackCorrectionBitsetHelper::decode(bitset,results);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compareBitsets(vec3,results))<sp/>++nfailures;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfailures;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODPrimitives/test/ut_xAOD_primitives_enums_test.cxx"/>
  </compounddef>
</doxygen>
