<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/dc3/UDSLabelHashTable_8cxx" kind="file">
    <compoundname>UDSLabelHashTable.cxx</compoundname>
    <includes refid="d7/d98/UDSLabelHashTable_8h" local="yes">AthContainers/tools/UDSLabelHashTable.h</includes>
    <includes local="yes">AthenaKernel/getMessageSvc.h</includes>
    <incdepgraph>
      <node id="71782">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/UDSLabelHashTable.cxx</label>
        <link refid="UDSLabelHashTable.cxx"/>
        <childnode refid="71783" relation="include">
        </childnode>
        <childnode refid="71789" relation="include">
        </childnode>
      </node>
      <node id="71788">
        <label>stdint.h</label>
      </node>
      <node id="71786">
        <label>string</label>
      </node>
      <node id="71785">
        <label>map</label>
      </node>
      <node id="71784">
        <label>SGTools/crc64.h</label>
      </node>
      <node id="71789">
        <label>AthenaKernel/getMessageSvc.h</label>
      </node>
      <node id="71787">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="71783">
        <label>AthContainers/tools/UDSLabelHashTable.h</label>
        <link refid="d7/d98/UDSLabelHashTable_8h_source"/>
        <childnode refid="71784" relation="include">
        </childnode>
        <childnode refid="71785" relation="include">
        </childnode>
        <childnode refid="71786" relation="include">
        </childnode>
        <childnode refid="71787" relation="include">
        </childnode>
        <childnode refid="71788" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/tools/UDSLabelHashTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthenaKernel/getMessageSvc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UDSLabelHashTable::addLabel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,<sp/>hash_t<sp/>hash)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>hash_t<sp/>h<sp/>=<sp/>addLabel<sp/>(label);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>!=<sp/>hash)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgStream<sp/>logstr(Athena::getMessageSvc(),<sp/></highlight><highlight class="stringliteral">&quot;UDSLabelHashTable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>logstr<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Hash<sp/>mismatch<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hash<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>h<sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">UDSLabelHashTable::hash_t<sp/>UDSLabelHashTable::addLabel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label.size()==0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgStream<sp/>logstr(Athena::getMessageSvc(),<sp/></highlight><highlight class="stringliteral">&quot;UDSLabelHashTable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>logstr<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Zero-length<sp/>string<sp/>given<sp/>as<sp/>Label!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INVALID;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>hash_t<sp/>h=this-&gt;hash(label);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h==INVALID)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgStream<sp/>logstr(Athena::getMessageSvc(),<sp/></highlight><highlight class="stringliteral">&quot;UDSLabelHashTable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>logstr<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Label<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>yields<sp/>an<sp/>invalid<sp/>hash.<sp/>Please<sp/>choose<sp/>different<sp/>name!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INVALID;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::map&lt;hash_t,<sp/>std::string&gt;::const_iterator<sp/>it=m_hashLabels.find(h);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it==m_hashLabels.end())<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>label,<sp/>new<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hashLabels[h]=label;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Hash<sp/>exists<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second!=label)<sp/>{<sp/></highlight><highlight class="comment">//Same<sp/>hash<sp/>but<sp/>different<sp/>label<sp/>-&gt;<sp/>hash-collision!<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MsgStream<sp/>logstr(Athena::getMessageSvc(),<sp/></highlight><highlight class="stringliteral">&quot;UDSLabelHashTable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logstr<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Hash<sp/>collision<sp/>between<sp/>label<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>label<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INVALID;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>UDSLabelHashTable::getLabel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hash_t<sp/>number)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::map&lt;hash_t,<sp/>std::string&gt;::const_iterator<sp/>it=m_hashLabels.find(number);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it==m_hashLabels.end())<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_empty;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">std::vector&lt;const<sp/>std::string*&gt;<sp/>UDSLabelHashTable::getAllLabels()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::string*&gt;<sp/>allLabels;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>allLabels.reserve(m_hashLabels.size());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::map&lt;hash_t,<sp/>std::string&gt;::const_iterator<sp/>it=m_hashLabels.begin();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::map&lt;hash_t,<sp/>std::string&gt;::const_iterator<sp/>it_e=m_hashLabels.end();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;it!=it_e;++it)<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>allLabels.push_back(&amp;(it-&gt;second));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allLabels;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/UDSLabelHashTable.cxx"/>
  </compounddef>
</doxygen>
