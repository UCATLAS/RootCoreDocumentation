<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d2f/fpcompare__test_8cxx" kind="file">
    <compoundname>fpcompare_test.cxx</compoundname>
    <includes refid="df/df0/fpcompare_8h" local="yes">CxxUtils/fpcompare.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cassert</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="113688">
        <label>functional</label>
      </node>
      <node id="113687">
        <label>cmath</label>
      </node>
      <node id="113689">
        <label>cassert</label>
      </node>
      <node id="113686">
        <label>CxxUtils/fpcompare.h</label>
        <link refid="df/df0/fpcompare_8h"/>
        <childnode refid="113687" relation="include">
        </childnode>
        <childnode refid="113688" relation="include">
        </childnode>
      </node>
      <node id="113685">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx</label>
        <link refid="fpcompare_test.cxx"/>
        <childnode refid="113686" relation="include">
        </childnode>
        <childnode refid="113687" relation="include">
        </childnode>
        <childnode refid="113689" relation="include">
        </childnode>
        <childnode refid="113690" relation="include">
        </childnode>
      </node>
      <node id="113690">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="d9/dcc/structtester" prot="public">tester</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d2f/fpcompare__test_8cxx_1a1f18902730ae2ef5b59995df1a7699fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>(const tester *a, const tester *b, const tester *c)</argsstring>
        <name>test1</name>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" bodystart="31" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d9/d2f/fpcompare__test_8cxx_1ad7d86eba435222e7ad441541df49b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>(const tester *a, const tester *b, const tester *c)</argsstring>
        <name>test2</name>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" bodystart="77" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d9/d2f/fpcompare__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx" bodystart="133" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for the fpcompare header. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2008 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/df0/fpcompare_8h" kindref="compound" tooltip="Workaround x86 precision issues for FP inequality comparisons.">CxxUtils/fpcompare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="d9/dcc/structtester" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/dcc/structtester" kindref="compound">tester</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>:<sp/>m_x<sp/>(x)<sp/>{}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pt()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ptf()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pt();<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_x;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tester::pt()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="26"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>*<sp/>(1.<sp/>/<sp/>std::cosh(1.9025873924597605));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>c)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CxxUtils::fpcompare;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>equal<sp/>(a-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>equal<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);<sp/></highlight><highlight class="comment">//<sp/>FAILX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater<sp/>(c-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater<sp/>(b-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less<sp/>(c-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater_equal<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater_equal<sp/>(c-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater_equal<sp/>(b-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less_equal<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);<sp/></highlight><highlight class="comment">//<sp/>FAILX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less_equal<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less_equal<sp/>(c-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>equal<sp/>(a-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>equal<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater<sp/>(c-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater<sp/>(b-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less<sp/>(c-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater_equal<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>greater_equal<sp/>(c-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>greater_equal<sp/>(b-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less_equal<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>less_equal<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>less_equal<sp/>(c-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>*<sp/>c)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CxxUtils::fpcompare_fn;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>equal<sp/>eq;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>eq<sp/>(a-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>eq<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>greater<sp/>gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>gt<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);<sp/></highlight><highlight class="comment">//<sp/>FAILX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>gt<sp/>(c-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>gt<sp/>(b-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>less<sp/>lt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>lt<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>lt<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>lt<sp/>(c-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>greater_equal<sp/>ge;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>ge<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>ge<sp/>(c-&gt;pt(),<sp/>b-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>ge<sp/>(b-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>less_equal<sp/>le;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>le<sp/>(a-&gt;pt(),<sp/>b-&gt;pt())<sp/>);<sp/></highlight><highlight class="comment">//<sp/>FAILX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>le<sp/>(a-&gt;pt(),<sp/>c-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>le<sp/>(c-&gt;pt(),<sp/>a-&gt;pt())<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>equalf<sp/>eqf;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>eqf<sp/>(a-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>eqf<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>greaterf<sp/>gtf;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>gtf<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>gtf<sp/>(c-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>gtf<sp/>(b-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>lessf<sp/>ltf;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>ltf<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>ltf<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>ltf<sp/>(c-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>greater_equalf<sp/>gef;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>gef<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>gef<sp/>(c-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>gef<sp/>(b-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>less_equalf<sp/>lef;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>lef<sp/>(a-&gt;ptf(),<sp/>b-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/><sp/><sp/>lef<sp/>(a-&gt;ptf(),<sp/>c-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>assert<sp/>(<sp/>!<sp/>lef<sp/>(c-&gt;ptf(),<sp/>a-&gt;ptf())<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>chosen<sp/>so<sp/>that<sp/>a-&gt;pt()<sp/>&gt;<sp/>a-&gt;pt<sp/>is<sp/>true<sp/>when<sp/>compiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>optimization<sp/>using<sp/>x87<sp/>instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>assertions<sp/>marked<sp/>with<sp/>FAILX<sp/>above<sp/>fail<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>workaround<sp/>is<sp/>not<sp/>operative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref><sp/>a<sp/>(441849.03125);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref><sp/>c<sp/>(841849.03125);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>test1<sp/>(&amp;a,<sp/>&amp;a,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>test2<sp/>(&amp;a,<sp/>&amp;a,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx"/>
  </compounddef>
</doxygen>
