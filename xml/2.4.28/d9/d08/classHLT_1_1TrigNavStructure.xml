<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d9/d08/classHLT_1_1TrigNavStructure" kind="class" prot="public">
    <compoundname>HLT::TrigNavStructure</compoundname>
    <derivedcompoundref refid="de/d28/classHLT_1_1StandaloneNavigation" prot="public" virt="non-virtual">HLT::StandaloneNavigation</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" prot="protected" static="no" mutable="no">
        <type><ref refid="d2/de9/classHLT_1_1TriggerElementFactory" kindref="compound">TriggerElementFactory</ref></type>
        <definition>TriggerElementFactory HLT::TrigNavStructure::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
<para>factory of trigger elements </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="359" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" prot="protected" static="no" mutable="no">
        <type><ref refid="da/d94/classHLT_1_1TrigHolderStructure" kindref="compound">TrigHolderStructure</ref></type>
        <definition>TrigHolderStructure HLT::TrigNavStructure::m_holderstorage</definition>
        <argsstring></argsstring>
        <name>m_holderstorage</name>
        <briefdescription>
<para>structure for feature holders </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="360" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="d9/d08/classHLT_1_1TrigNavStructure_1ae54c0ac4cb3c6ecad93562af7e903858" prot="protected" static="yes" mutable="no">
        <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>const TriggerElement * TrigNavStructure::m_unspecifiedTE</definition>
        <argsstring></argsstring>
        <name>m_unspecifiedTE</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="361" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d08/classHLT_1_1TrigNavStructure_1ac2a9608a3d53cf7eb0e097e44d922e5d" prot="protected" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string TrigNavStructure::m_unspecifiedLabel</definition>
        <argsstring></argsstring>
        <name>m_unspecifiedLabel</name>
        <initializer> &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="362" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a9009457dcc585cd8159955954eaabb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>TrigNavStructure::~TrigNavStructure</definition>
        <argsstring>()</argsstring>
        <name>~TrigNavStructure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a23f79a5e2e5b4c5e5d0d5523d3465083" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void TrigNavStructure::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>resets all the navigation, goes to the factory and asks to withdraw all produced objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>TriggerElement * TrigNavStructure::getInitialNode</definition>
        <argsstring>()</argsstring>
        <name>getInitialNode</name>
        <briefdescription>
<para>gets initial node, if node is not there then it is created on fly </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a021892a0b8a9ad19028fa855673ce22a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>const TriggerElement * TrigNavStructure::getInitialNode</definition>
        <argsstring>() const </argsstring>
        <name>getInitialNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a7d9af1a3c226fb3aa776e1d71901b537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>TriggerElement * TrigNavStructure::addRoINode</definition>
        <argsstring>(TriggerElement *initial)</argsstring>
        <name>addRoINode</name>
        <param>
          <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>initial</declname>
        </param>
        <briefdescription>
<para>gets RoI node (attached to initial) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="53" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a75a745d3b075ae38e18c75eae3f566db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>TriggerElement * TrigNavStructure::addNode</definition>
        <argsstring>(TriggerElement *seed, unsigned int id)</argsstring>
        <name>addNode</name>
        <param>
          <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>adds nodes seeded form the one given as an argument, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> which direct predecessor of newly created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>an id to give newly created <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1adcb31bc69a7ad668df42b2ce6d8069c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>TriggerElement * TrigNavStructure::addNode</definition>
        <argsstring>(std::vector&lt; TriggerElement * &gt; &amp;seeds, unsigned int id, bool ghost=false, bool nofwd=false)</argsstring>
        <name>addNode</name>
        <param>
          <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>seeds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ghost</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>nofwd</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>adds node which is seeded from several other Needed by Topological algorithms </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>are all TriggerElements which seed newly created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id to give for the created <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para>flag is saying that this TE is a light weight one, no features attaching to it is allowed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nofwd</parametername>
</parameternamelist>
<parameterdescription>
<para>flag is saying that this TE will not be deactivated automatically in fwd deactivation process(rerunning) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="77" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ad53aa4090286e454f093c8388a2bfb0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TrigNavStructure::printASCIIArt</definition>
        <argsstring>(std::string &amp;str, const TriggerElement *te=0, int offset=0) const </argsstring>
        <name>printASCIIArt</name>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>pretty printing of the navigational structure (heavy) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="141" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a5250b903e822670b8bfa72c8df2ffb15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::serializeTEs</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;output) const </argsstring>
        <name>serializeTEs</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>method serizlizes the navigation structure </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>vector to place the result</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true then OK else some sort of failure happened (likely badly truncated structure) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="136" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="202" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aa4aab21e57b3ccb2edfcb28064368e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::deserializeTEs</definition>
        <argsstring>(std::vector&lt; uint32_t &gt;::const_iterator &amp;start, unsigned int totalSize)</argsstring>
        <name>deserializeTEs</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;::const_iterator &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="137" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="246" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a63358d17ea66b12849ecf2564ae2c304" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool HLT::TrigNavStructure::serialize</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;) const =0</argsstring>
        <name>serialize</name>
        <reimplementedby refid="de/d28/classHLT_1_1StandaloneNavigation_1aa206a44ccf10cd94cd95a3018d0ab489">serialize</reimplementedby>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
        </param>
        <briefdescription>
<para>method serizlizes entire navigation </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>vector to place the result</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if true then OK else some sort of failure happened (likely badly truncated structure) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a6142495d27544580054bbe579ef6ff78" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool HLT::TrigNavStructure::deserialize</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;)=0</argsstring>
        <name>deserialize</name>
        <reimplementedby refid="de/d28/classHLT_1_1StandaloneNavigation_1aafc8b9e43b2102bf0d9614ddefef0590">deserialize</reimplementedby>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="147"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a39a7a11f23cb6aba63f0e47b63aedc23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound">TriggerElement::FeatureAccessHelper</ref></type>
        <definition>TriggerElement::FeatureAccessHelper TrigNavStructure::getFeature</definition>
        <argsstring>(const TriggerElement *te, class_id_type clid, const index_or_label_type &amp;index_or_label) const </argsstring>
        <name>getFeature</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>index_or_label</declname>
        </param>
        <briefdescription>
<para>typeless feature access metod </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para>the TE from which the search should be done </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clid</parametername>
</parameternamelist>
<parameterdescription>
<para>the class ID of searched type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>feature sub index (</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d50/classHLT_1_1TriggerElement_1_1ObjectIndex" kindref="compound">TriggerElement::ObjectIndex</ref>), if invalid_sub_type is passed then it is neglected </para></simplesect>
<simplesect kind="return"><para>invalid FeatureAccessHelper is returned if nothng is found, else valid one </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="723" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ac0a01b892f2170773ba260d1aa990e34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound">TriggerElement::FeatureAccessHelper</ref></type>
        <definition>TriggerElement::FeatureAccessHelper TrigNavStructure::getFeatureRecursively</definition>
        <argsstring>(const TriggerElement *startTE, class_id_type clid, const index_or_label_type &amp;index_or_label, const TriggerElement *&amp;sourceTE) const </argsstring>
        <name>getFeatureRecursively</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>startTE</declname>
        </param>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>index_or_label</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *&amp;</type>
          <declname>sourceTE</declname>
        </param>
        <briefdescription>
<para>recursive search for features the function is similar to the above butif th features is not found at the startTE the search descends the structure of TEs until it is found. It stops on RoI nodes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceTE</parametername>
</parameternamelist>
<parameterdescription>
<para>is the TE where the feature was found </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="737" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aec41f8e98b6ee31924eafbfde0632424" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TrigNavStructure::getAllRoIThresholdTEs</definition>
        <argsstring>(std::vector&lt; TriggerElement * &gt; &amp;output) const </argsstring>
        <name>getAllRoIThresholdTEs</name>
        <param>
          <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>The query returns a vector of all TriggerElements that represent a LVL1 RoI threshold. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="172" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="307" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1afcabcd4847b6d6fabce69b6e4d8d836c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TrigNavStructure::getAll</definition>
        <argsstring>(std::vector&lt; TriggerElement * &gt; &amp;output, const bool activeOnly=true) const </argsstring>
        <name>getAll</name>
        <param>
          <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>activeOnly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The query returning a collection of all TriggerElements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="177" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ae650286918584005312f998f582a6cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
        <definition>std::vector&lt;TriggerElement*&gt;&amp; HLT::TrigNavStructure::getAllTEs</definition>
        <argsstring>()</argsstring>
        <name>getAllTEs</name>
        <briefdescription>
<para>access needed by slimming tools. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="182" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a311c58edad4dbe23f12bec046283c82d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TrigNavStructure::getAllOfType</definition>
        <argsstring>(const te_id_type id, std::vector&lt; TriggerElement * &gt; &amp;output, const bool activeOnly=true) const </argsstring>
        <name>getAllOfType</name>
        <param>
          <type>const te_id_type</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>activeOnly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The query returning a collection of all TriggerElements if name is given. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>name of TE, if &quot;&quot; given all TEs are returned </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="188" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="323" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a8a6974de20b8dc486ffb64484dcb3ded" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int TrigNavStructure::countAllOfType</definition>
        <argsstring>(const te_id_type id, const bool activeOnly=true) const </argsstring>
        <name>countAllOfType</name>
        <param>
          <type>const te_id_type</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>activeOnly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The query counting a collection of all <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> of a given type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="195" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="349" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a4e25f0499260f4b71dddeee555db7ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::propagateDeactivation</definition>
        <argsstring>(const TrigNavStructure *nav)</argsstring>
        <name>propagateDeactivation</name>
        <param>
          <type>const <ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">TrigNavStructure</ref> *</type>
          <declname>nav</declname>
        </param>
        <briefdescription>
<para>propagates deactivation of TE state This finction should be used after Trigger is rerurn on L2 and then the reruning on L2 is required. The deactivated lines must be propagated ahead. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nav</parametername>
</parameternamelist>
<parameterdescription>
<para>is navigation which was reprocessed (additional branches deactivated) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true is all went fine, false in case it is spoted that the 2 navigation structures were not initially same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="265" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="513" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a854128f34ec3cef89659dbc3ab847be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::combine</definition>
        <argsstring>(std::vector&lt; unsigned int &gt; &amp;types, std::vector&lt; std::vector&lt; TriggerElement * &gt; &gt; &amp;output, unsigned int maxResults=1000, bool onlyActive=true)</argsstring>
        <name>combine</name>
        <param>
          <type>std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxResults</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyActive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>For Algorithms: return all the possible n-tuples of TE* objects (te0, te1..., ten). </para>        </briefdescription>
        <detaileddescription>
<para>such that te0.id() == types[0], te1.id() == types[1]... In the case where ids appear multiple times, n-tuple permutations are counted only once. (so if te0.id() == te1.id(), (te0, te1) will appear but not (te1, te0)) &quot;output&quot; is populated with all the poClassID_traits&lt;T&gt;::ID();ssible combinations of this type. if &quot;activeOnly&quot; is true, only active trigger elements are used. The list is truncated at maxResults if maxResults &gt; 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="281" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="533" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::overlaps</definition>
        <argsstring>(const TriggerElement *t1, const TriggerElement *t2) const </argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Check overlap between trigger elements (pointer equality or RoI overlap). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="286" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="658" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a7e7c1099b8533797f5e7011f40ec81c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::overlaps</definition>
        <argsstring>(const TriggerElement *t1, const std::vector&lt; TriggerElement * &gt; &amp;teVec) const </argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>teVec</declname>
        </param>
        <briefdescription>
<para>Check overlap between a TE and a vector of TEs, using the method above. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="291" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="651" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a7ae7547c73e9ffad7870bc3e6d32ba89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::getTopologicallySpannedBy</definition>
        <argsstring>(const TriggerElement *te, const std::vector&lt; unsigned int &gt; &amp;types, std::vector&lt; TriggerElement * &gt; &amp;children, const bool activeOnly=true) const </argsstring>
        <name>getTopologicallySpannedBy</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>activeOnly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>gets the TEs whose predecessors were used to built a given topological TE </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para>topological TE from which to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of types to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>childs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of retrieved TEs; empty in case some of the required TEs cannot be found or are not active (see the activeOnly parameter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activeOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parameter specifying whether inactive TEs should be discarded from the search; true by default </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="302" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="665" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a9fb1d4548091143938611eed17b5d278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int TrigNavStructure::copyAllFeatures</definition>
        <argsstring>(const TriggerElement *sourceTE, TriggerElement *destTE)</argsstring>
        <name>copyAllFeatures</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>sourceTE</declname>
        </param>
        <param>
          <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>destTE</declname>
        </param>
        <briefdescription>
<para>gets all features from the sourceTE and copies a reference (FeatureAccessHelper) to the destTE </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceTE</parametername>
</parameternamelist>
<parameterdescription>
<para>(source) <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> holding features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destTE</parametername>
</parameternamelist>
<parameterdescription>
<para>(destiny) <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref>: copy feature references here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of features that were copied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="311" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="688" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aaa45b12525a39f1cdd974f20c571519e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/d7d/classHLT_1_1BaseHolder" kindref="compound">BaseHolder</ref> *</type>
        <definition>const BaseHolder * TrigNavStructure::getHolder</definition>
        <argsstring>(const TriggerElement::FeatureAccessHelper &amp;fea) const </argsstring>
        <name>getHolder</name>
        <param>
          <type>const <ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound">TriggerElement::FeatureAccessHelper</ref> &amp;</type>
          <declname>fea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="313" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="867" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a3d5444118cd06cf746b526b8279c0dc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>sub_index_type</type>
        <definition>sub_index_type TrigNavStructure::subType</definition>
        <argsstring>(class_id_type clid, const index_or_label_type &amp;sti_or_label) const </argsstring>
        <name>subType</name>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>sti_or_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="315" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="714" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1adb0617f1a15c49c2bbc8f3e9a1e58529" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string TrigNavStructure::label</definition>
        <argsstring>(class_id_type clid, const index_or_label_type &amp;sti_or_label) const </argsstring>
        <name>label</name>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>sti_or_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="316" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="718" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a28a4a2362ce6fa5f34ed78b22dd2f218" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::getFeatureAccessors</definition>
        <argsstring>(const TriggerElement *te, class_id_type clid, const index_or_label_type &amp;index_or_label, bool only_single_feature, TriggerElement::FeatureVec &amp;features, bool with_cache_recording, bool travel_backward_recursively, const TriggerElement *&amp;source=m_unspecifiedTE, std::string &amp;sourcelabel=m_unspecifiedLabel) const </argsstring>
        <name>getFeatureAccessors</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>index_or_label</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_single_feature</declname>
        </param>
        <param>
          <type>TriggerElement::FeatureVec &amp;</type>
          <declname>features</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_cache_recording</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>travel_backward_recursively</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *&amp;</type>
          <declname>source</declname>
          <defval>m_unspecifiedTE</defval>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>sourcelabel</declname>
          <defval>m_unspecifiedLabel</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="786" bodyend="840"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ad3b3893fa11f9103e28a8a0d7f099b74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; TriggerElement * &gt; &amp; TrigNavStructure::getRoINodes</definition>
        <argsstring>(const TriggerElement *somenode)</argsstring>
        <name>getRoINodes</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>somenode</declname>
        </param>
        <briefdescription>
<para>gets all RoI type nodes seeding indirectly this <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> </para>        </briefdescription>
        <detaileddescription>
<para>For getting all RoI nodes one can call getDirectrSuccessors(getIntialNode()</para><para><simplesect kind="warning"><para>If this method is called for RoI node then it returns all TEs originating from it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; TriggerElement * &gt; &amp; TrigNavStructure::getDirectPredecessors</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>getDirectPredecessors</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>returns list of direct predecessors (nodes seeding me) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> to query </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>collection of TriggerElements (if empty then node is initial) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; TriggerElement * &gt; &amp; TrigNavStructure::getDirectSuccessors</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>getDirectSuccessors</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>returns list of direct predecessors (nodes I seed) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> to query </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>collection of TriggerElements (if empty then node is terminal) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="91" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a667a5a985a39d0e214f07000da6d5e17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
        <definition>const TriggerElement * TrigNavStructure::getSuccessor</definition>
        <argsstring>(const TriggerElement *te, unsigned int id)</argsstring>
        <name>getSuccessor</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>returns successor of given type beeing seeded from this TE </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the successor TreiggerElement to find </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> pointer which can be 0 </para></simplesect>
<simplesect kind="warning"><para>the implementation is recursive </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="118" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a361e11326ab8f3751ede118edd058196" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::isInitialNode</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>isInitialNode</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>queries if node is an initial one </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para>node to be queried </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if passed node is initial </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="457" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::isRoINode</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>isRoINode</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>queries if node is an RoI type one </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para>node to be queried </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if passed node is RoI type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="114" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="463" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::isTerminalNode</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>isTerminalNode</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>queries if node is terminal (no more <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> are seeded by it) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>te</parametername>
</parameternamelist>
<parameterdescription>
<para>node to be queried </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if passed node is terminal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="121" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a778994c352935511fd177632cd6b6679" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::haveCommonRoI</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>haveCommonRoI</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
<para>does this 2 share RoI </para>        </briefdescription>
        <detaileddescription>
<para>RoI node itself can be passed, then it will tell if a given <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> is originating in this RoI for simple <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> it is a bit overkill since it assumed that the number of RoIs can be any</para><para><simplesect kind="warning"><para>this algorithm should not be used by sort or unique STL algorithms. Comparing algorithms are required to be &quot;Strict weak ordering&quot; i.e.return false if comparing x and x and if x &lt; y and y &lt; z then x &lt; z (transitivity). Sort algorithm will simply misbehave (crash trying to access objects under address 0)</para></simplesect>
<simplesect kind="return"><para>true if there is at least one common RoI </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="211" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="372" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a0c84441607c72a8040dbd9bf39ea75f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::haveDistinctRoI</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>haveDistinctRoI</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
<para>inversion of haveCommonRoI </para>        </briefdescription>
        <detaileddescription>
<para>But notice it is more suitable for SLT sort etc. since for comparison 2 identical objects it returns false. However the transitivity can&apos;t be guaranteed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="219" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="400" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a1980f85e5f8fbf12865e645fca14901e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::haveAllCommonRoIs</definition>
        <argsstring>(const HLT::TriggerElement *te1, const HLT::TriggerElement *te2)</argsstring>
        <name>haveAllCommonRoIs</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">HLT::TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">HLT::TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="221" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a03b8982034f27d2215d35f3f24d4eb24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::haveCommonSeed</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>haveCommonSeed</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
<para>checks that there is any common predecessor of two TriggerElements </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>See comments on haveCommonRoI. The same applies. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="227" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="417" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1adb4367f028c31868015cf8889841dfbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::haveDistinctSeed</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>haveDistinctSeed</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>inversion of haveCommonSeed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="230" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="437" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1acb192f49358cf34be527342bdc3acaa3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::increasingOrderByTEId</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>increasingOrderByTEId</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
<para>for sorting TriggerElements according to their id </para>        </briefdescription>
        <detaileddescription>
<para>Note that this methods are not complementary. (It is required to be usable for STL algorithms.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1ab1a94033197d6de5f0064b00ca7dc078" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::decreasingOrderByTEId</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>decreasingOrderByTEId</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a8a6bb7b8505736eb054b5f5639d48062" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::hasIdFromTheSet</definition>
        <argsstring>(const TriggerElement *te, std::vector&lt; unsigned int &gt; ids)</argsstring>
        <name>hasIdFromTheSet</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simple helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="241" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1aa9dc5ca3156c52ea97de417e270ff030" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HLT::TrigNavStructure::isNotActive</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>isNotActive</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>helper for the STL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="244" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1af4248c3d8d3bb6ea2ce4f1011c40f643" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HLT::TrigNavStructure::isTopological</definition>
        <argsstring>(const TriggerElement *te)</argsstring>
        <name>isTopological</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="246" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a0a90add052e10055cd4ca644c54f214e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::isCompatibleTree</definition>
        <argsstring>(const TriggerElement *te1, const TriggerElement *te2)</argsstring>
        <name>isCompatibleTree</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te1</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te2</declname>
        </param>
        <briefdescription>
<para>check compatibility of 2 navigation structures </para>        </briefdescription>
        <detaileddescription>
<para>This what is checked is only the id of trigger elements whether they are having the same place in the navigation structure; have identical subtrees (check is recursive) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="254" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="482" bodyend="509"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a16f9e38ab126bf13c1af40e89f28875d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::getFeatureAccessorsSingleTE</definition>
        <argsstring>(const TriggerElement *te, class_id_type clid, const index_or_label_type &amp;index_or_label, bool only_single_feature, TriggerElement::FeatureVec &amp;features, bool with_cache_recording, const TriggerElement *&amp;source, std::string &amp;sourcelabel) const </argsstring>
        <name>getFeatureAccessorsSingleTE</name>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>index_or_label</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_single_feature</declname>
        </param>
        <param>
          <type>TriggerElement::FeatureVec &amp;</type>
          <declname>features</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_cache_recording</declname>
        </param>
        <param>
          <type>const <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *&amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>sourcelabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="335" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="750" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a911a68e0d35f1527843ceda2d37c9bde" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::matchFeature</definition>
        <argsstring>(const TriggerElement::FeatureAccessHelper &amp;fea, class_id_type clid, const index_or_label_type &amp;index_or_label) const </argsstring>
        <name>matchFeature</name>
        <param>
          <type>const <ref refid="da/d62/classHLT_1_1TriggerElement_1_1FeatureAccessHelper" kindref="compound">TriggerElement::FeatureAccessHelper</ref> &amp;</type>
          <declname>fea</declname>
        </param>
        <param>
          <type>class_id_type</type>
          <declname>clid</declname>
        </param>
        <param>
          <type>const index_or_label_type &amp;</type>
          <declname>index_or_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="339" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="843" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a7f1d70a41ff519b61641c11af8cca069" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TrigNavStructure::fillSameRoIRelation</definition>
        <argsstring>(TriggerElement *roi, TriggerElement *te)</argsstring>
        <name>fillSameRoIRelation</name>
        <param>
          <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>roi</declname>
        </param>
        <param>
          <type><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> *</type>
          <declname>te</declname>
        </param>
        <briefdescription>
<para>rebuilds the sameRoIRelation between trigger elements (used internally by deserialize) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>should be called for each RoI like node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="345" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="d9/d08/classHLT_1_1TrigNavStructure_1a4513556ade1b9ea77fec6509329266ff" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TrigNavStructure::addOneLevel</definition>
        <argsstring>(std::vector&lt; std::vector&lt; TriggerElement * &gt; &gt; &amp;currentCombs, std::vector&lt; std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; &gt; &amp;currentIdxs, unsigned int type, std::vector&lt; std::vector&lt; TriggerElement * &gt; &gt; &amp;newCombs, std::vector&lt; std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; &gt; &amp;newIdxs, unsigned int maxResults=1000, bool onlyActive=1)</argsstring>
        <name>addOneLevel</name>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &gt; &amp;</type>
          <declname>currentCombs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; &gt; &amp;</type>
          <declname>currentIdxs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound">TriggerElement</ref> * &gt; &gt; &amp;</type>
          <declname>newCombs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; &gt; &amp;</type>
          <declname>newIdxs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxResults</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyActive</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Helper method for &quot;combine&quot;: add one &quot;level&quot; of multiplicity to the results. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="355" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TrigNavStructure.cxx" bodystart="561" bodyend="649"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="21360">
        <label>HLT::StandaloneNavigation</label>
        <link refid="de/d28/classHLT_1_1StandaloneNavigation"/>
        <childnode refid="21359" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21361">
        <label>TestTNS</label>
        <link refid="d9/d9a/structTestTNS"/>
        <childnode refid="21360" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21359">
        <label>HLT::TrigNavStructure</label>
        <link refid="d9/d08/classHLT_1_1TrigNavStructure"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21366">
        <label>asg::AsgMessaging</label>
        <link refid="d1/d97/classasg_1_1AsgMessaging"/>
      </node>
      <node id="21365">
        <label>HLT::TrigHolderStructure</label>
        <link refid="da/d94/classHLT_1_1TrigHolderStructure"/>
        <childnode refid="21366" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21364">
        <label>HLT::TriggerElementFactory</label>
        <link refid="d2/de9/classHLT_1_1TriggerElementFactory"/>
      </node>
      <node id="21363">
        <label>HLT::TriggerElement</label>
        <link refid="dd/db8/classHLT_1_1TriggerElement"/>
      </node>
      <node id="21362">
        <label>HLT::TrigNavStructure</label>
        <link refid="d9/d08/classHLT_1_1TrigNavStructure"/>
        <childnode refid="21363" relation="usage">
          <edgelabel>m_unspecifiedTE</edgelabel>
        </childnode>
        <childnode refid="21364" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="21365" relation="usage">
          <edgelabel>m_holderstorage</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/TrigNavStructure.h" bodystart="32" bodyend="365"/>
    <listofallmembers>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a75a745d3b075ae38e18c75eae3f566db" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>addNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1adcb31bc69a7ad668df42b2ce6d8069c3" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>addNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a4513556ade1b9ea77fec6509329266ff" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>addOneLevel</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a7d9af1a3c226fb3aa776e1d71901b537" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>addRoINode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a854128f34ec3cef89659dbc3ab847be1" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>combine</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a9fb1d4548091143938611eed17b5d278" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>copyAllFeatures</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a8a6974de20b8dc486ffb64484dcb3ded" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>countAllOfType</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ab1a94033197d6de5f0064b00ca7dc078" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>decreasingOrderByTEId</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a6142495d27544580054bbe579ef6ff78" prot="public" virt="pure-virtual"><scope>HLT::TrigNavStructure</scope><name>deserialize</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aa4aab21e57b3ccb2edfcb28064368e1b" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>deserializeTEs</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a7f1d70a41ff519b61641c11af8cca069" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>fillSameRoIRelation</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1afcabcd4847b6d6fabce69b6e4d8d836c" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getAll</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a311c58edad4dbe23f12bec046283c82d" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getAllOfType</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aec41f8e98b6ee31924eafbfde0632424" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getAllRoIThresholdTEs</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ae650286918584005312f998f582a6cdd" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getAllTEs</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getDirectPredecessors</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getDirectSuccessors</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a39a7a11f23cb6aba63f0e47b63aedc23" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getFeature</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a28a4a2362ce6fa5f34ed78b22dd2f218" prot="public" virt="virtual"><scope>HLT::TrigNavStructure</scope><name>getFeatureAccessors</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a16f9e38ab126bf13c1af40e89f28875d" prot="protected" virt="virtual"><scope>HLT::TrigNavStructure</scope><name>getFeatureAccessorsSingleTE</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0a01b892f2170773ba260d1aa990e34" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getFeatureRecursively</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aaa45b12525a39f1cdd974f20c571519e" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getHolder</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ac0b79bae687efe8d3e4ec6939d68b65e" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getInitialNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a021892a0b8a9ad19028fa855673ce22a" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getInitialNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ad3b3893fa11f9103e28a8a0d7f099b74" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getRoINodes</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a667a5a985a39d0e214f07000da6d5e17" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getSuccessor</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a7ae7547c73e9ffad7870bc3e6d32ba89" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>getTopologicallySpannedBy</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a8a6bb7b8505736eb054b5f5639d48062" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>hasIdFromTheSet</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a1980f85e5f8fbf12865e645fca14901e" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>haveAllCommonRoIs</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a778994c352935511fd177632cd6b6679" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>haveCommonRoI</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a03b8982034f27d2215d35f3f24d4eb24" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>haveCommonSeed</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a0c84441607c72a8040dbd9bf39ea75f3" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>haveDistinctRoI</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1adb4367f028c31868015cf8889841dfbc" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>haveDistinctSeed</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1acb192f49358cf34be527342bdc3acaa3" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>increasingOrderByTEId</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a0a90add052e10055cd4ca644c54f214e" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isCompatibleTree</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a361e11326ab8f3751ede118edd058196" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isInitialNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aa9dc5ca3156c52ea97de417e270ff030" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isNotActive</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aead7239a8cd007da174eb0b813427bce" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isRoINode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1adcc465668f62383dc2665eeb38dc7968" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isTerminalNode</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1af4248c3d8d3bb6ea2ce4f1011c40f643" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>isTopological</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1adb0617f1a15c49c2bbc8f3e9a1e58529" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>label</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a52a2a58ebbf13872559b534ee280f918" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>m_factory</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ad5b7156154b1a4272cf7e9e4c3b174a2" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>m_holderstorage</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ac2a9608a3d53cf7eb0e097e44d922e5d" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>m_unspecifiedLabel</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ae54c0ac4cb3c6ecad93562af7e903858" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>m_unspecifiedTE</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a911a68e0d35f1527843ceda2d37c9bde" prot="protected" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>matchFeature</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1aa285e2f31a46b26857356f3022752d32" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>overlaps</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a7e7c1099b8533797f5e7011f40ec81c7" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>overlaps</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1ad53aa4090286e454f093c8388a2bfb0a" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>printASCIIArt</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a4e25f0499260f4b71dddeee555db7ef9" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>propagateDeactivation</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a23f79a5e2e5b4c5e5d0d5523d3465083" prot="public" virt="virtual"><scope>HLT::TrigNavStructure</scope><name>reset</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a63358d17ea66b12849ecf2564ae2c304" prot="public" virt="pure-virtual"><scope>HLT::TrigNavStructure</scope><name>serialize</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a5250b903e822670b8bfa72c8df2ffb15" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>serializeTEs</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a3d5444118cd06cf746b526b8279c0dc1" prot="public" virt="non-virtual"><scope>HLT::TrigNavStructure</scope><name>subType</name></member>
      <member refid="d9/d08/classHLT_1_1TrigNavStructure_1a9009457dcc585cd8159955954eaabb63" prot="public" virt="virtual"><scope>HLT::TrigNavStructure</scope><name>~TrigNavStructure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
