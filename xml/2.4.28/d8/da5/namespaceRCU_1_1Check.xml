<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/da5/namespaceRCU_1_1Check" kind="namespace">
    <compoundname>RCU::Check</compoundname>
    <innerclass refid="d5/d4b/structRCU_1_1Check_1_1TestInvariant" prot="public">RCU::Check::TestInvariant</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47ab4fe952e1c8c5c6688054aedca020432" prot="public">
          <name>assert_soft</name>
          <briefdescription>
<para>regular old style assertion </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a82a9857091ed4ee0e881bc96f425d772" prot="public">
          <name>assert_hard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47ab27299e196e613aa26c57ceeb9af1281" prot="public">
          <name>assert_noimp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a6c205a1412b3cbf6398c70398f3fdc30" prot="public">
          <name>require_soft</name>
          <briefdescription>
<para>function parameter requirement </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a34f1242367893c60cda64eca3acb0870" prot="public">
          <name>require_hard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a7b467d6b1a7590175ab1a171d6aaafbe" prot="public">
          <name>require_noimp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47ae03a10b0876986b13c1bc854691cebec" prot="public">
          <name>provide_soft</name>
          <briefdescription>
<para>function postcondition </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47ae2141f8d2ec1750880110e8bc7f65ba8" prot="public">
          <name>provide_hard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a605b2a4c72f4d01f4a395116eda588b2" prot="public">
          <name>provide_noimp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/da5/namespaceRCU_1_1Check_1ac7a9d878905c0d7ff1cbafc255b65d47a763f605da1b3acc9602384cf42d1b2ee" prot="public">
          <name>invariant</name>
          <briefdescription>
<para>invariant violation </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" bodystart="55" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d8/da5/namespaceRCU_1_1Check_1a710be2c594e075a123047af59a6b1986" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* RCU::Check::TestInvariantFunction)(const void *object)</definition>
        <argsstring>)(const void *object)</argsstring>
        <name>TestInvariantFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: apply the test invariant method on an object guarantee: no-fail availability: experts only rationale: this is a templated wrapper for the class specific invariant testers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d8/da5/namespaceRCU_1_1Check_1abe2c02e3400451ea941da734c9ad24b6" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char * RCU::Check::typeLiteral</definition>
        <argsstring>[typeNum]</argsstring>
        <name>typeLiteral</name>
        <initializer>
      {
	&quot;assertion failed&quot;,
	&quot;assertion failed&quot;,
	&quot;assertion failed&quot;,

	&quot;requirement failed&quot;,
	&quot;requirement failed&quot;,
	&quot;requirement failed&quot;,

	&quot;postcondition violated&quot;,
	&quot;postcondition violated&quot;,
	&quot;postcondition violated&quot;,

	&quot;invariant violated&quot;
      }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/da5/namespaceRCU_1_1Check_1aea9f2ccccb66171ec306c1b2db6bfd8e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RCU::Check::typeAbort</definition>
        <argsstring>[typeNum]</argsstring>
        <name>typeAbort</name>
        <initializer>
      {
	false,
	true,
	true,

	false,
	true,
	true,

	false,
	true,
	true,

	true,
      }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/da5/namespaceRCU_1_1Check_1a7f0d808f2b27c2ed84cd290fcb9edd99" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RCU::Check::typeNum</definition>
        <argsstring></argsstring>
        <name>typeNum</name>
        <initializer> invariant + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" line="75" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/da5/namespaceRCU_1_1Check_1ab36d4b64099acc3aa8a1ad59d44e3f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RCU::Check::fail</definition>
        <argsstring>(const char *package, const char *file, unsigned line, Type type, const char *error)</argsstring>
        <name>fail</name>
        <param>
          <type>const char *</type>
          <declname>package</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: report the error and abort either by exception or assert like guarantee: all-fail failures: as requested requires: file != 0 requires: line != 0 requires: type &lt; typeNum requires: error != 0 availability: experts only </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="69"/>
      </memberdef>
      <memberdef kind="function" id="d8/da5/namespaceRCU_1_1Check_1ac19f7f91e8005f3dbf8ee2b8f023468a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RCU::Check::testInvariantPrint</definition>
        <argsstring>(TestInvariantFunction function, const void *object)</argsstring>
        <name>testInvariantPrint</name>
        <param>
          <type>TestInvariantFunction</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="111" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" bodystart="109" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="d8/da5/namespaceRCU_1_1Check_1a366b11819f23124d3d5aba62d73394c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RCU::Check::testInvariantVoid</definition>
        <argsstring>(const void *object)</argsstring>
        <name>testInvariantVoid</name>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d8/da5/namespaceRCU_1_1Check_1a56327e3f07abcd87dc56635b965fabc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/d4b/structRCU_1_1Check_1_1TestInvariant" kindref="compound">TestInvariant</ref></type>
        <definition>TestInvariant RCU::Check::invariant_tester</definition>
        <argsstring>(T *object)</argsstring>
        <name>invariant_tester</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create the right invariant testing object returns: the <ref refid="d9/dcc/structtester" kindref="compound">tester</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" line="127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/RootCoreUtils/Assert.h" bodystart="126" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/RootCoreUtils/Root/Assert.cxx" line="28"/>
  </compounddef>
</doxygen>
