<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d55/Driver_8cxx" kind="file">
    <compoundname>Driver.cxx</compoundname>
    <includes refid="dd/d3c/Driver_8h" local="no">EventLoop/Driver.h</includes>
    <includes refid="d5/d80/Job_8h" local="no">EventLoop/Job.h</includes>
    <includes refid="d0/dd8/MetricsSvc_8h" local="no">EventLoop/MetricsSvc.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="da/d15/RootUtils_8h" local="no">RootCoreUtils/RootUtils.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="d8/d4f/DiskListLocal_8h" local="no">SampleHandler/DiskListLocal.h</includes>
    <includes refid="df/d9d/Sample_8h" local="no">SampleHandler/Sample.h</includes>
    <includes refid="d2/df0/SampleHist_8h" local="no">SampleHandler/SampleHist.h</includes>
    <includes refid="dc/d9e/SampleLocal_8h" local="no">SampleHandler/SampleLocal.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TObjString.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">signal.h</includes>
    <incdepgraph>
      <node id="128136">
        <label>EventLoop/MetricsSvc.h</label>
        <link refid="d0/dd8/MetricsSvc_8h_source"/>
        <childnode refid="128137" relation="include">
        </childnode>
      </node>
      <node id="128141">
        <label>RootCoreUtils/RootUtils.h</label>
        <link refid="da/d15/RootUtils_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
      </node>
      <node id="128120">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="128121" relation="include">
        </childnode>
        <childnode refid="128122" relation="include">
        </childnode>
        <childnode refid="128123" relation="include">
        </childnode>
      </node>
      <node id="128132">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128133" relation="include">
        </childnode>
        <childnode refid="128134" relation="include">
        </childnode>
        <childnode refid="128135" relation="include">
        </childnode>
        <childnode refid="128131" relation="include">
        </childnode>
        <childnode refid="128122" relation="include">
        </childnode>
      </node>
      <node id="128130">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="128121" relation="include">
        </childnode>
        <childnode refid="128131" relation="include">
        </childnode>
        <childnode refid="128132" relation="include">
        </childnode>
        <childnode refid="128123" relation="include">
        </childnode>
      </node>
      <node id="128139">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="128121" relation="include">
        </childnode>
      </node>
      <node id="128145">
        <label>SampleHandler/DiskListLocal.h</label>
        <link refid="d8/d4f/DiskListLocal_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128146" relation="include">
        </childnode>
      </node>
      <node id="128127">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
      </node>
      <node id="128128">
        <label>string</label>
      </node>
      <node id="128135">
        <label>map</label>
      </node>
      <node id="128153">
        <label>TObjString.h</label>
      </node>
      <node id="128155">
        <label>fstream</label>
      </node>
      <node id="128123">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128125" relation="include">
        </childnode>
        <childnode refid="128127" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128129" relation="include">
        </childnode>
      </node>
      <node id="128147">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128131" relation="include">
        </childnode>
        <childnode refid="128122" relation="include">
        </childnode>
        <childnode refid="128127" relation="include">
        </childnode>
        <childnode refid="128148" relation="include">
        </childnode>
      </node>
      <node id="128121">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="128122">
        <label>TObject.h</label>
      </node>
      <node id="128154">
        <label>TSystem.h</label>
      </node>
      <node id="128131">
        <label>vector</label>
      </node>
      <node id="128157">
        <label>signal.h</label>
      </node>
      <node id="128152">
        <label>TFile.h</label>
      </node>
      <node id="128146">
        <label>SampleHandler/DiskList.h</label>
        <link refid="dc/d37/DiskList_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
      </node>
      <node id="128151">
        <label>SampleHandler/SampleLocal.h</label>
        <link refid="dc/d9e/SampleLocal_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128131" relation="include">
        </childnode>
        <childnode refid="128147" relation="include">
        </childnode>
      </node>
      <node id="128126">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="128144">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
      </node>
      <node id="128134">
        <label>iosfwd</label>
      </node>
      <node id="128156">
        <label>iostream</label>
      </node>
      <node id="128148">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128149" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
      </node>
      <node id="128150">
        <label>SampleHandler/SampleHist.h</label>
        <link refid="d2/df0/SampleHist_8h_source"/>
        <childnode refid="128124" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128147" relation="include">
        </childnode>
      </node>
      <node id="128137">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="128121" relation="include">
        </childnode>
        <childnode refid="128138" relation="include">
        </childnode>
        <childnode refid="128139" relation="include">
        </childnode>
      </node>
      <node id="128138">
        <label>TNamed.h</label>
      </node>
      <node id="128119">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Driver.cxx</label>
        <link refid="Driver.cxx"/>
        <childnode refid="128120" relation="include">
        </childnode>
        <childnode refid="128130" relation="include">
        </childnode>
        <childnode refid="128136" relation="include">
        </childnode>
        <childnode refid="128140" relation="include">
        </childnode>
        <childnode refid="128141" relation="include">
        </childnode>
        <childnode refid="128142" relation="include">
        </childnode>
        <childnode refid="128145" relation="include">
        </childnode>
        <childnode refid="128147" relation="include">
        </childnode>
        <childnode refid="128150" relation="include">
        </childnode>
        <childnode refid="128151" relation="include">
        </childnode>
        <childnode refid="128152" relation="include">
        </childnode>
        <childnode refid="128153" relation="include">
        </childnode>
        <childnode refid="128154" relation="include">
        </childnode>
        <childnode refid="128155" relation="include">
        </childnode>
        <childnode refid="128156" relation="include">
        </childnode>
        <childnode refid="128133" relation="include">
        </childnode>
        <childnode refid="128157" relation="include">
        </childnode>
      </node>
      <node id="128143">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
        <childnode refid="128128" relation="include">
        </childnode>
        <childnode refid="128144" relation="include">
        </childnode>
      </node>
      <node id="128142">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
        <childnode refid="128143" relation="include">
        </childnode>
      </node>
      <node id="128149">
        <label>set</label>
      </node>
      <node id="128125">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="128126" relation="include">
        </childnode>
      </node>
      <node id="128124">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="128133">
        <label>memory</label>
      </node>
      <node id="128140">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="128121" relation="include">
        </childnode>
        <childnode refid="128131" relation="include">
        </childnode>
        <childnode refid="128122" relation="include">
        </childnode>
        <childnode refid="128123" relation="include">
        </childnode>
        <childnode refid="128132" relation="include">
        </childnode>
      </node>
      <node id="128129">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d55/Driver_8cxx_1ad76f942f8080c120a3f8a112fa8f9fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::Driver) namespace EL</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="de/d0a/classEL_1_1Driver" kindref="compound">EL::Driver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Driver.cxx" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Driver.cxx" bodystart="37" bodyend="387"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2011.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Driver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Job.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/MetricsSvc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/RootUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/DiskListLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/Sample.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleHist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TObjString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">ClassImp<sp/>(<ref refid="de/d0a/classEL_1_1Driver" kindref="compound">EL::Driver</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">namespace<sp/>EL</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" kindref="member">EL::Driver::abortRetrieve</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Driver<sp/>::</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>testInvariant<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="47"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1afe0fa388e65ba76c794790deba236c95" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1afe0fa388e65ba76c794790deba236c95" kindref="member">  Driver</ref><sp/>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">  options</ref><sp/>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_options;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">  options</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_options;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" kindref="member">  submit</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="81"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>invariant<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" kindref="member">submitOnly</ref><sp/>(job,<sp/>location);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">wait</ref><sp/>(location);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" kindref="member">  submitOnly</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="92"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>mylocation<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mylocation<sp/>=<sp/>gSystem-&gt;WorkingDirectory<sp/>()<sp/>+<sp/>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>location);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location.find<sp/>(</highlight><highlight class="stringliteral">&quot;/pnfs/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>place<sp/>submit<sp/>directory<sp/>on<sp/>pnfs:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>mylocation);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(job.options()-&gt;castBool<sp/>(<ref refid="da/dbb/classEL_1_1Job_1afce7ed50e8fac3594837b09e7b6b659b" kindref="member">Job::optRemoveSubmitDir</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>mylocation).c_str());</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSystem-&gt;MakeDirectory<sp/>(mylocation.c_str())<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>create<sp/>output<sp/>directory<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>mylocation);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>Job<sp/>myjob<sp/>=<sp/>job;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>doUpdateJob<sp/>(myjob,<sp/>mylocation);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(job.options()-&gt;castBool<sp/>(<ref refid="da/dbb/classEL_1_1Job_1adb8f92321453868941ad2f9fbb8e0529" kindref="member" tooltip="description: the option to turn off collection of performance data">Job::optDisableMetrics</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!myjob.algsHas<sp/>(<ref refid="d6/d45/classEL_1_1MetricsSvc_1af9093b81577b990b51e8627ff860c236" kindref="member" tooltip="description: the name of the service">MetricsSvc::name</ref>))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myjob.algsAdd<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MetricsSvc);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>file<sp/>((mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/driver.root&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;RECREATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file.WriteObject<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;driver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file.Close<sp/>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>myjob.sampleHandler().save<sp/>(mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>file<sp/>((mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/location&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>mylocation<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh_hist;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>sample<sp/>=<sp/>myjob.sampleHandler().begin(),</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>myjob.sampleHandler().end();<sp/>sample<sp/>!=<sp/>end;<sp/>++<sp/>sample)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>histfile</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist-&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*sample)-&gt;name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::SampleHist&gt;<sp/>hist</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/d76/classSH_1_1SampleHist" kindref="compound" tooltip="A sample that represents a single histogram file.">SH::SampleHist</ref><sp/>((*sample)-&gt;name(),<sp/>histfile));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hist-&gt;meta()-&gt;fetch<sp/>(*(*sample)-&gt;meta());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh_hist.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(hist.release());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>sh_hist.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref><sp/>(mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>doSubmit<sp/>(myjob,<sp/>mylocation);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rationale:<sp/>this<sp/>particular<sp/>file<sp/>can<sp/>be<sp/>checked<sp/>to<sp/>see<sp/>if<sp/>a<sp/>job</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>has<sp/>been<sp/>submitted<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>((mylocation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/submitted&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">  retrieve</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>file<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/driver.root&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;Driver&gt;<sp/>driver<sp/>(dynamic_cast&lt;Driver*&gt;(file.Get<sp/>(</highlight><highlight class="stringliteral">&quot;driver&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT2_SOFT<sp/>(driver.get()<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>driver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>driver-&gt;doRetrieve<sp/>(location);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">  wait</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>time)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>invariant<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SigTrap<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handler<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" kindref="member">EL::Driver::abortRetrieve</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nAborting...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SigTrap()<sp/>{<sp/>signal<sp/>(SIGINT,<sp/>&amp;handler);<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>~SigTrap()<sp/>{<sp/>signal<sp/>(SIGINT,<sp/>SIG_DFL);<sp/><ref refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" kindref="member">EL::Driver::abortRetrieve</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>sigTrap;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">retrieve</ref><sp/>(location))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" kindref="member">abortRetrieve</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>all<sp/>worker<sp/>jobs<sp/>finished<sp/>yet,<sp/>waiting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>time;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" kindref="member">abortRetrieve</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep<sp/>(1);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rechecking<sp/>jobs&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a6fed39cd8394451ad9cb68505f7c4f42" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a6fed39cd8394451ad9cb68505f7c4f42" kindref="member">  updateLocation</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>from;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>file<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/location&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::getline<sp/>(file,<sp/>from))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>submit<sp/>location<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/location&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!to.empty()<sp/>&amp;&amp;<sp/>to[to.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>=<sp/>to.substr<sp/>(0,to.size()-1);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acc2c0ad59b1978ed5717dc143917bba1" kindref="member" tooltip="update all file references starting with from to to">updateLocation</ref><sp/>(from,<sp/>to);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d9f/classSH_1_1DiskListLocal" kindref="compound" tooltip="a DiskList implementation for local directories">SH::DiskListLocal</ref><sp/>list<sp/>(location);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list.next())</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.fileName().find<sp/>(</highlight><highlight class="stringliteral">&quot;output-&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(list.path());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acc2c0ad59b1978ed5717dc143917bba1" kindref="member" tooltip="update all file references starting with from to to">updateLocation</ref><sp/>(from,<sp/>to);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref><sp/>(list.path());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>file<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/location&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>to<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" kindref="member">  saveOutput</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TList&amp;<sp/>output)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>file<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist-&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;RECREATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TIter<sp/>iter<sp/>(&amp;output);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>iter.Next()))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>TDirectory<sp/>*dir<sp/>=<sp/>&amp;file;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>path<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;GetName();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>split<sp/>=<sp/>path.rfind<sp/>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>dirname<sp/>=<sp/>path.substr<sp/>(0,<sp/>split);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>path.substr<sp/>(split<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TNamed<sp/>*named<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TNamed*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(named)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named-&gt;SetName<sp/>(name.c_str());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TDirectory*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(file.Get<sp/>(dirname.c_str()));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dir)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.mkdir<sp/>(dirname.c_str());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TDirectory*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(file.Get<sp/>(dirname.c_str()));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(dir<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d9/d83/namespaceRCU_1a9b4f6416213f8a4bb0288c43860203bd" kindref="member">RCU::SetDirectory</ref><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>dir))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir-&gt;WriteObject<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file.Write<sp/>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.Clear<sp/>(</highlight><highlight class="stringliteral">&quot;nodelete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.Clear<sp/>(</highlight><highlight class="stringliteral">&quot;nodelete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" kindref="member">  mergedOutputName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OutputStream&amp;<sp/>output,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sample)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data-&quot;</highlight><highlight class="normal"><sp/>+<sp/>output.label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>sample<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" kindref="member">  mergedOutputMkdir</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),<sp/>end<sp/>=<sp/>job.outputEnd();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>dir<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSystem-&gt;MakeDirectory<sp/>(dir.c_str())<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>directory<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>dir);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" kindref="member">  mergedOutputSave</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>sample<sp/>=<sp/>job.sampleHandler().begin(),</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.sampleHandler().end();<sp/>sample<sp/>!=<sp/>end;<sp/>++<sp/>sample)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name2<sp/>=<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*sample)-&gt;name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::SampleLocal&gt;<sp/>mysample</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>((*sample)-&gt;name()));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(name2);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(mysample.release());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afa7698bb543938ebf295da6f28e1dd45" kindref="member" tooltip="fetch the meta-data for all samples that are also in the source sample handler.">fetch</ref><sp/>(job.sampleHandler());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" kindref="member">Driver ::</ref></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" kindref="member">  diskOutputSave</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh_hist;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>sh_hist.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>sample<sp/>=<sp/>job.sampleHandler().begin(),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.sampleHandler().end();<sp/>sample<sp/>!=<sp/>end;<sp/>++<sp/>sample)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*histSample<sp/>=<sp/>sh_hist.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>((*sample)-&gt;name());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(histSample<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::SampleLocal&gt;<sp/>mysample</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>((*sample)-&gt;name()));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>TList<sp/>*list<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TList*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histSample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" kindref="member" tooltip="read an object from a histogram file">readHist</ref><sp/>(</highlight><highlight class="stringliteral">&quot;EventLoop_OutputStream_&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label()));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject<sp/>*obj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TIter<sp/>iter<sp/>(list);<sp/>(obj<sp/>=<sp/>iter.Next<sp/>());<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TObjString<sp/>*str<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(str<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(str-&gt;GetString().Data());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;meta()-&gt;fetch<sp/>(*out-&gt;options());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" kindref="member" tooltip="add a sample to the handler">add</ref><sp/>(mysample.release());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1afa7698bb543938ebf295da6f28e1dd45" kindref="member" tooltip="fetch the meta-data for all samples that are also in the source sample handler.">fetch</ref><sp/>(job.sampleHandler());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" kindref="member" tooltip="save the list of samples to the given directory">save</ref><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Driver<sp/>::</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>doUpdateJob<sp/>(Job&amp;<sp/></highlight><highlight class="comment">/*job*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*location*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="362"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Driver<sp/>::</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>doSubmit<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/></highlight><highlight class="comment">/*job*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*location*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="370"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(std::string<sp/>(</highlight><highlight class="stringliteral">&quot;Driver::doSubmit<sp/>not<sp/>overridden<sp/>in<sp/>class<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(*this).name());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Driver<sp/>::</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>doRetrieve<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="380"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSystem-&gt;AccessPathName<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/submitted&quot;</highlight><highlight class="normal">).c_str())<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;job<sp/>submission<sp/>was<sp/>unsuccessful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Driver.cxx"/>
  </compounddef>
</doxygen>
