<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d31/classSG_1_1AuxElement_1_1Accessor" kind="class" prot="public">
    <compoundname>SG::AuxElement::Accessor</compoundname>
    <basecompoundref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" prot="public" virt="non-virtual">SG::AuxElement::ConstAccessor&lt; T &gt;</basecompoundref>
    <includes refid="d1/d6f/AuxElement_8h" local="no">AuxElement.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a4bccbee2452bfa3472f7644e494161cd" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::reference_type SG::AuxElement::Accessor&lt; T &gt;::reference_type</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <briefdescription>
<para>Type referencing an item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="471" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a724b29923d07a32978119367e3b44cf0" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d1/def/classT" kindref="compound">element_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::element_type SG::AuxElement::Accessor&lt; T &gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Type the user sees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="475" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1acb4f6ee51a068e93117f85f95df97d30" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1acb4f6ee51a068e93117f85f95df97d30" kindref="member">container_pointer_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::container_pointer_type SG::AuxElement::Accessor&lt; T &gt;::container_pointer_type</definition>
        <argsstring></argsstring>
        <name>container_pointer_type</name>
        <briefdescription>
<para>Pointer into the container holding this item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="479" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1aa8a25e68b37942ff81dc594e715ae406" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::Accessor&lt; T &gt;::Accessor</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Accessor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="491" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a085b98f08738ca96a6cd125a9afbedbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::Accessor&lt; T &gt;::Accessor</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname)</argsstring>
        <name>Accessor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of its associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="501" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a348cc6dfc8452fcd594a456e717d6a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>AuxElement::Accessor&lt; T &gt;::reference_type SG::AuxElement::Accessor&lt; T &gt;::operator()</definition>
        <argsstring>(AuxElement &amp;e) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which to fetch the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="508" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="431" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a624186fe02ff859960c254a367dc31b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">reference_type</ref></type>
        <definition>AuxElement::Accessor&lt; T &gt;::reference_type SG::AuxElement::Accessor&lt; T &gt;::operator()</definition>
        <argsstring>(AuxVectorData &amp;container, size_t index) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the desired element.</para></parameterdescription>
</parameteritem>
</parameterlist>
This allows retrieving aux data by container / index. Looping over the index via this method will be faster then looping over the elements of the container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="520" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="450" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a5f0d48e00f2660ae5396aec38b1cf875" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::Accessor&lt; T &gt;::set</definition>
        <argsstring>(AuxElement &amp;e, const element_type &amp;x) const </argsstring>
        <name>set</name>
        <param>
          <type><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">element_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Set the variable for one element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which to fetch the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable value to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="528" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a39759fe982bc7ea66573db6c8ab1df35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1acb4f6ee51a068e93117f85f95df97d30" kindref="member">container_pointer_type</ref></type>
        <definition>AuxElement::Accessor&lt; T &gt;::container_pointer_type SG::AuxElement::Accessor&lt; T &gt;::getDataArray</definition>
        <argsstring>(AuxVectorData &amp;container) const </argsstring>
        <name>getDataArray</name>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the start of the auxiliary data array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="535" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="477" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="d8/d31/classSG_1_1AuxElement_1_1Accessor_1ad65ed541d70217a9b17e9cd0cd345654" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::Accessor&lt; T &gt;::isAvailableWritable</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>isAvailableWritable</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Test to see if this variable exists in the store and is writable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the container which to test the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="542" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="491" bodyend="494"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class to provide type-safe access to aux data. </para>    </briefdescription>
    <detaileddescription>
<para>This is written as a separate class in order to be able to cache the name -&gt; auxid lookup.</para><para>You might use this something like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>need<sp/>to<sp/>do<sp/>this<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Myclass::Accessor&lt;int&gt;<sp/>vint1<sp/>(</highlight><highlight class="stringliteral">&quot;myInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Myclass*<sp/>m<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>vint1<sp/>(*m);</highlight></codeline>
</programlisting></para><para>You can also use this to define getters/setters in your class:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Myclass<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_x()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;int&gt;<sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Myclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>get_x()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;int&gt;<sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Myclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="66">
        <label>SG::AuxElement::ConstAccessor&lt; T &gt;</label>
        <link refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor"/>
      </node>
      <node id="65">
        <label>SG::AuxElement::Accessor&lt; T &gt;</label>
        <link refid="d8/d31/classSG_1_1AuxElement_1_1Accessor"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="68">
        <label>SG::AuxElement::ConstAccessor&lt; T &gt;</label>
        <link refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor"/>
      </node>
      <node id="67">
        <label>SG::AuxElement::Accessor&lt; T &gt;</label>
        <link refid="d8/d31/classSG_1_1AuxElement_1_1Accessor"/>
        <childnode refid="68" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="467" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="465" bodyend="543"/>
    <listofallmembers>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1aa8a25e68b37942ff81dc594e715ae406" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>Accessor</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a085b98f08738ca96a6cd125a9afbedbf" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>Accessor</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1a451ed73df612fa77da9216112f59ecf7" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>auxid</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1a4705768a58a6497b1d1c5e6575a27c4c" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>const_container_pointer_type</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1aa5d2f82b91a4e81f94de85a4abab6d2d" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>const_reference_type</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ac741b4bd42c27549776e795810559a1a" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>ConstAccessor</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1adddc9fca7ffb2baf3abc084cd8d239f7" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>ConstAccessor</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1acb4f6ee51a068e93117f85f95df97d30" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>container_pointer_type</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a724b29923d07a32978119367e3b44cf0" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>element_type</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a39759fe982bc7ea66573db6c8ab1df35" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>getDataArray</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1a45993dda15a8958bcb84c284460882b3" prot="public" virt="non-virtual" ambiguityscope="SG::AuxElement::ConstAccessor::"><scope>SG::AuxElement::Accessor</scope><name>getDataArray</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>isAvailable</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1ad65ed541d70217a9b17e9cd0cd345654" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>isAvailableWritable</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1aa7ddab546828ce0b800200ccfb994009" prot="protected" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>m_auxid</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a348cc6dfc8452fcd594a456e717d6a03" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>operator()</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a624186fe02ff859960c254a367dc31b0" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>operator()</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1aee60b907f79a78a5b5ed83fbef2d1185" prot="public" virt="non-virtual" ambiguityscope="SG::AuxElement::ConstAccessor::"><scope>SG::AuxElement::Accessor</scope><name>operator()</name></member>
      <member refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1a7331bc01c04af5fd3561676bbcdf3fd2" prot="public" virt="non-virtual" ambiguityscope="SG::AuxElement::ConstAccessor::"><scope>SG::AuxElement::Accessor</scope><name>operator()</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a4bccbee2452bfa3472f7644e494161cd" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>reference_type</name></member>
      <member refid="d8/d31/classSG_1_1AuxElement_1_1Accessor_1a5f0d48e00f2660ae5396aec38b1cf875" prot="public" virt="non-virtual"><scope>SG::AuxElement::Accessor</scope><name>set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
