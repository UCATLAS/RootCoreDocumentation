<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d57/CalibrationDataInterfaceROOT_8cxx" kind="file">
    <compoundname>CalibrationDataInterfaceROOT.cxx</compoundname>
    <includes refid="d8/d17/CalibrationDataInterfaceROOT_8h" local="yes">CalibrationDataInterface/CalibrationDataInterfaceROOT.h</includes>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="yes">CalibrationDataInterface/CalibrationDataContainer.h</includes>
    <includes refid="d1/d5f/CalibrationDataEigenVariations_8h" local="yes">CalibrationDataInterface/CalibrationDataEigenVariations.h</includes>
    <includes local="yes">TMath.h</includes>
    <includes local="yes">TEnv.h</includes>
    <includes local="yes">TFile.h</includes>
    <includes local="yes">TObjString.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <incdepgraph>
      <node id="96881">
        <label>TMap.h</label>
      </node>
      <node id="96878">
        <label>TMatrixDSym.h</label>
      </node>
      <node id="96885">
        <label>TMatrixD.h</label>
      </node>
      <node id="96882">
        <label>THashList.h</label>
      </node>
      <node id="96891">
        <label>iomanip</label>
      </node>
      <node id="96870">
        <label>CalibrationDataInterface/CalibrationDataVariables.h</label>
        <link refid="d6/d96/CalibrationDataVariables_8h_source"/>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
      </node>
      <node id="96892">
        <label>cmath</label>
      </node>
      <node id="96893">
        <label>cassert</label>
      </node>
      <node id="96869">
        <label>CalibrationDataInterface/CalibrationDataInterfaceROOT.h</label>
        <link refid="d8/d17/CalibrationDataInterfaceROOT_8h_source"/>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
        <childnode refid="96878" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96871">
        <label>string</label>
      </node>
      <node id="96876">
        <label>map</label>
      </node>
      <node id="96889">
        <label>TObjString.h</label>
      </node>
      <node id="96879">
        <label>TH1.h</label>
      </node>
      <node id="96868">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceROOT.cxx</label>
        <link refid="CalibrationDataInterfaceROOT.cxx"/>
        <childnode refid="96869" relation="include">
        </childnode>
        <childnode refid="96880" relation="include">
        </childnode>
        <childnode refid="96883" relation="include">
        </childnode>
        <childnode refid="96886" relation="include">
        </childnode>
        <childnode refid="96887" relation="include">
        </childnode>
        <childnode refid="96888" relation="include">
        </childnode>
        <childnode refid="96889" relation="include">
        </childnode>
        <childnode refid="96890" relation="include">
        </childnode>
        <childnode refid="96891" relation="include">
        </childnode>
        <childnode refid="96892" relation="include">
        </childnode>
        <childnode refid="96893" relation="include">
        </childnode>
        <childnode refid="96894" relation="include">
        </childnode>
      </node>
      <node id="96875">
        <label>vector</label>
      </node>
      <node id="96888">
        <label>TFile.h</label>
      </node>
      <node id="96872">
        <label>utility</label>
      </node>
      <node id="96887">
        <label>TEnv.h</label>
      </node>
      <node id="96880">
        <label>CalibrationDataInterface/CalibrationDataContainer.h</label>
        <link refid="d2/d74/CalibrationDataContainer_8h_source"/>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96881" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96890">
        <label>iostream</label>
      </node>
      <node id="96874">
        <label>TNamed.h</label>
      </node>
      <node id="96886">
        <label>TMath.h</label>
      </node>
      <node id="96884">
        <label>set</label>
      </node>
      <node id="96883">
        <label>CalibrationDataInterface/CalibrationDataEigenVariations.h</label>
        <link refid="d1/d5f/CalibrationDataEigenVariations_8h_source"/>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96885" relation="include">
        </childnode>
        <childnode refid="96878" relation="include">
        </childnode>
      </node>
      <node id="96873">
        <label>CalibrationDataInterface/CalibrationDataInterfaceBase.h</label>
        <link refid="d8/d11/CalibrationDataInterfaceBase_8h_source"/>
        <childnode refid="96874" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
      </node>
      <node id="96877">
        <label>algorithm</label>
      </node>
      <node id="96894">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d57/CalibrationDataInterfaceROOT_8cxx_1a4cdb02aebc7be6d0652d11f824dd2f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(Analysis::CalibrationDataInterfaceROOT) namespace</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" kindref="compound">Analysis::CalibrationDataInterfaceROOT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceROOT.cxx" line="277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceROOT.cxx" bodystart="272" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataInterfaceROOT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Begin_Html</highlight></codeline>
<codeline lineno="5"><highlight class="comment">&lt;h2&gt;Purpose&lt;/h2&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment">&lt;p&gt;This<sp/>class<sp/>provides<sp/>the<sp/>main<sp/>interface<sp/>to<sp/>b-tagging<sp/>calibration<sp/>information.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Each<sp/>instance<sp/>can<sp/>be<sp/>used<sp/>to<sp/>handle<sp/>a<sp/>single<sp/>tagger<sp/>(so<sp/>if<sp/>multiple<sp/>taggers&apos;<sp/>information</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>needs<sp/>to<sp/>be<sp/>accessed,<sp/>multiple<sp/>CalibrationDataInterfaceROOT<sp/>instances<sp/>need<sp/>to<sp/>be<sp/>created).&lt;br<sp/>/&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>Its<sp/>action<sp/>is<sp/>steered<sp/>by<sp/>a<sp/>configuration<sp/>file<sp/>(which<sp/>is<sp/>parsed<sp/>using<sp/>TEnv<sp/>and<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>specified<sp/>in<sp/>the<sp/>CalibrationDataInterfaceROOT<sp/>constructor).</highlight></codeline>
<codeline lineno="11"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>Further<sp/>details<sp/>can<sp/>be<sp/>found<sp/>below,<sp/>arranged<sp/>by<sp/>topic:<sp/>&lt;a<sp/>href=&quot;#basic&quot;&gt;basic<sp/>usage&lt;/a&gt;,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>&lt;a<sp/>href=&quot;#ev&quot;&gt;eigenvector<sp/>variation<sp/>usage&lt;/a&gt;,<sp/>and<sp/>&lt;a<sp/>href=&quot;#configuration&quot;&gt;configuration<sp/>file</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>specification&lt;/a&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="comment">&lt;a<sp/>name=&quot;basic&quot;&gt;&lt;h2&gt;Basic<sp/>usage&lt;/h2&gt;&lt;/a&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>The<sp/>main<sp/>functionality<sp/>is<sp/>to<sp/>retrieve<sp/>data/MC<sp/>calibration<sp/>scale<sp/>factors<sp/>and<sp/>MC<sp/>efficiencies,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>on<sp/>a<sp/>jet-by-jet<sp/>basis.<sp/>This<sp/>is<sp/>done<sp/>using<sp/>the<sp/>following<sp/>methods:</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getScaleFactor<sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc)</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMCEfficiency<sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>following<sp/>meaning<sp/>for<sp/>the<sp/>arguments:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variables:<sp/><sp/>a<sp/>CalibrationDataVariables<sp/>object<sp/>that<sp/>should<sp/>be<sp/>filled<sp/>by<sp/>the<sp/>user<sp/>with<sp/>all</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>information<sp/>needed<sp/>to<sp/>extract<sp/>the<sp/>calibration<sp/>information</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/>flavour<sp/>label.<sp/>Currently<sp/>recognised<sp/>labels<sp/>follow<sp/>the<sp/>Athena<sp/>TruthInfo<sp/>conventions</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(see<sp/>package<sp/>PhysicsAnalysis/JetTagging/JetTagInfo):<sp/>&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;T&quot;,<sp/>&quot;N/A&quot;,<sp/>and<sp/>in</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addition<sp/>&quot;Light&quot;<sp/>(the<sp/>&quot;N/A&quot;<sp/>is<sp/>internally<sp/>converted<sp/>to<sp/>&quot;Light&quot;)</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point.<sp/>This<sp/>should<sp/>correspond<sp/>to<sp/>a<sp/>documented<sp/>weight<sp/>cut<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>under<sp/>consideration,<sp/>but<sp/>converted<sp/>to<sp/>a<sp/>string,<sp/>and<sp/>with<sp/>any<sp/>period<sp/>(&quot;.&quot;)</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaced<sp/>with<sp/>an<sp/>underscore<sp/>for<sp/>technical<sp/>reasons.<sp/>Alternatively,<sp/>&quot;Continuous&quot;<sp/>may</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>if<sp/>a<sp/>&quot;continuous<sp/>tagging&quot;<sp/>calibration<sp/>object<sp/>exists<sp/>for<sp/>the<sp/>tagger<sp/>under</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consideration.<sp/>(Note<sp/>that<sp/>the<sp/>use<sp/>of<sp/>this<sp/>method<sp/>for<sp/>&quot;continuous<sp/>tagging&quot;<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>general<sp/>to<sp/>be<sp/>recommended,<sp/>as<sp/>it<sp/>does<sp/>not<sp/>not<sp/>allow<sp/>for<sp/>scale<sp/>factor<sp/>rescaling,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>is<sp/>ne</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>specifying<sp/>what<sp/>uncertainty<sp/>information<sp/>is<sp/>to<sp/>be<sp/>retrieved.<sp/>Recognised<sp/>values</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>normal<sp/>usage<sp/>are<sp/>&lt;b&gt;None&lt;/b&gt;<sp/>(retrieval<sp/>of<sp/>central<sp/>values<sp/>only),<sp/>&lt;b&gt;Statistical&lt;/b&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(statistical<sp/>uncertainty),<sp/>&lt;b&gt;Systematic&lt;/b&gt;<sp/>(systematic<sp/>uncertainty),<sp/>&lt;b&gt;Total&lt;/b&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(combined<sp/>statistical<sp/>and<sp/>systematic<sp/>uncertainty).<sp/>(Other<sp/>choices<sp/>exist<sp/>for<sp/>more<sp/>advanced</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>and<sp/>will<sp/>be<sp/>described<sp/>&lt;a<sp/>href=&quot;#ev&quot;&gt;below&lt;/a&gt;.)</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/>index<sp/>specifying<sp/>the<sp/>precise<sp/>MC<sp/>efficiency<sp/>calibration<sp/>to<sp/>be<sp/>used.<sp/>This<sp/>is<sp/>relevant<sp/>if</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple<sp/>&quot;efficiency<sp/>calibration&quot;<sp/>names<sp/>are<sp/>specified<sp/>for<sp/>the<sp/>given<sp/>flavour<sp/>label<sp/>(see</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>&lt;a<sp/>href=&quot;#configuration&quot;&gt;configuration<sp/>section&lt;/a&gt;).</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>All<sp/>methods<sp/>return<sp/>a<sp/>pair&amp;lt;double,<sp/>double&amp;gt;<sp/>(the<sp/>stated<sp/>&lt;b&gt;CalibResult&lt;/b&gt;<sp/>return<sp/>type<sp/>is<sp/>a<sp/>simple<sp/>typedef),</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>the<sp/>first<sp/>member<sp/>of<sp/>which<sp/>contains<sp/>the<sp/>central<sp/>value<sp/>and<sp/>the<sp/>second<sp/>the<sp/>requested<sp/>uncertainty<sp/>(or<sp/>0<sp/>if<sp/>no</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>uncertainty<sp/>was<sp/>requested).<sp/>Note<sp/>that<sp/>central<sp/>values<sp/>are<sp/>retricted<sp/>to<sp/>be<sp/>within<sp/>the<sp/>physical<sp/>region<sp/>(between<sp/>0</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>and<sp/>1<sp/>for<sp/>the<sp/>MC<sp/>efficiencies,<sp/>and<sp/>positive<sp/>for<sp/>the<sp/>scale<sp/>factors).</highlight></codeline>
<codeline lineno="52"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>A<sp/>few<sp/>additional<sp/>methods<sp/>exist,<sp/>based<sp/>on<sp/>(and<sp/>internally<sp/>using)<sp/>the<sp/>above<sp/>methods:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getEfficiency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex):<sp/>data<sp/>efficiency<sp/>calculated<sp/>as<sp/>MC<sp/>efficiency<sp/>times<sp/>SF</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getInefficiency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex):<sp/>1<sp/>-<sp/>data<sp/>efficiency</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMCInefficiency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex):<sp/>1<sp/>-<sp/>MC<sp/>efficiency</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getInefficiencyScaleFactor<sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex):<sp/>ratio<sp/>of<sp/>data<sp/>to<sp/>MC<sp/>inefficiencies</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>Especially<sp/>the<sp/>last<sp/>of<sp/>these<sp/>methods<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>of<sp/>interest<sp/>when<sp/>data/MC<sp/>scale<sp/>factors<sp/>are<sp/>applied;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://cdsweb.cern.ch/record/1269912&quot;&gt;this<sp/>note&lt;/a&gt;<sp/>provides<sp/>more<sp/>detail.<sp/>Restrictions<sp/>to<sp/>the<sp/>physical</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>range<sp/>apply,<sp/>as<sp/>is<sp/>the<sp/>case<sp/>for<sp/>the<sp/>data/MC<sp/>scale<sp/>factor<sp/>and<sp/>MC<sp/>efficiency<sp/>methods.</highlight></codeline>
<codeline lineno="64"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="comment">&lt;a<sp/>name=&quot;speed-up&quot;&gt;&lt;h3&gt;Code<sp/>speed-up<sp/>using<sp/>variable<sp/>caching&lt;/h3&gt;&lt;/a&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>Internally,<sp/>pointers<sp/>to<sp/>the<sp/>calibration<sp/>objects<sp/>are<sp/>cached.<sp/>However,<sp/>the<sp/>string<sp/>matching<sp/>needed<sp/>to</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>exploit<sp/>this<sp/>feature<sp/>is<sp/>slow<sp/>and<sp/>leads<sp/>to<sp/>a<sp/>non-negligible<sp/>CPU<sp/>overhead.<sp/>Since<sp/>internally<sp/>all<sp/>pointers</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>are<sp/>stored<sp/>in<sp/>a<sp/>vector,<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>request<sp/>the<sp/>position<sp/>in<sp/>this<sp/>vector<sp/>for<sp/>a<sp/>given<sp/>calibration</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>object.<sp/>This<sp/>position<sp/>can<sp/>then<sp/>be<sp/>used<sp/>in<sp/>subsequent<sp/>alternative<sp/>calls<sp/>to<sp/>retrieve<sp/>information:</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getScaleFactor<sp/><sp/>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc)</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMCEfficiency<sp/>(variables,<sp/>index,<sp/>unc)</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>Here<sp/>the<sp/>&quot;index&quot;<sp/>variables<sp/>replace<sp/>the<sp/>specification<sp/>of<sp/>the<sp/>flavour<sp/>label<sp/>and<sp/>operating<sp/>point.<sp/>They<sp/>can</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>be<sp/>retrieved<sp/>by<sp/>calling</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex(label,<sp/>OP,<sp/>author,<sp/>isSF,<sp/>index)</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>where<sp/>the<sp/>following<sp/>additional<sp/>variables<sp/>are<sp/>to<sp/>be<sp/>used:</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>author:<sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>collection<sp/>name</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>to<sp/>true<sp/>(false)<sp/>if<sp/>the<sp/>object<sp/>concerned<sp/>is<sp/>a<sp/>scale<sp/>factor<sp/>object<sp/>(a<sp/>MC<sp/>efficiency<sp/>object)</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>requested<sp/>information</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>this<sp/>method<sp/>has<sp/>a<sp/>boolean<sp/>return<sp/>value,<sp/>indicating<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>retrieval<sp/>succeeded.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>This<sp/>return<sp/>value<sp/>should<sp/>be<sp/>checked<sp/>by<sp/>the<sp/>user,<sp/>as<sp/>no<sp/>checks<sp/>are<sp/>carried<sp/>in<sp/>the<sp/>alternative<sp/>getScaleFactor()</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>etc.<sp/>methods<sp/>as<sp/>to<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>index<sp/>specified.<sp/>Note<sp/>also<sp/>that<sp/>for<sp/>all<sp/>methods<sp/>except<sp/>those<sp/>using</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>only<sp/>the<sp/>MC<sp/>information,<sp/>both<sp/>indices<sp/>need<sp/>to<sp/>be<sp/>provided.</highlight></codeline>
<codeline lineno="90"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="comment">&lt;a<sp/>name=&quot;continuous&quot;&gt;&lt;h3&gt;Continuous<sp/>tagging&lt;/h3&gt;&lt;/a&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>Rather<sp/>than<sp/>merely<sp/>inquiring<sp/>whether<sp/>the<sp/>tag<sp/>weight<sp/>discriminant<sp/>resulting<sp/>from<sp/>a<sp/>given<sp/>tagger<sp/>satisfies<sp/>a</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>given<sp/>criterion,<sp/>it<sp/>may<sp/>be<sp/>useful<sp/>to<sp/>use<sp/>more<sp/>detailed<sp/>information.<sp/>In<sp/>particular,<sp/>&quot;continuous<sp/>tagging&quot;</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>information<sp/>can<sp/>be<sp/>made<sp/>available.<sp/>This<sp/>is<sp/>essentially<sp/>a<sp/>calibrated<sp/>version<sp/>of<sp/>the<sp/>(binned)<sp/>tag<sp/>weight</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>discriminant<sp/>distribution,<sp/>or<sp/>to<sp/>be<sp/>more<sp/>precise,<sp/>the<sp/>corresponding<sp/>data/MC<sp/>ratio.</highlight></codeline>
<codeline lineno="97"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>The<sp/>use<sp/>of<sp/>this<sp/>information<sp/>differs<sp/>somewhat<sp/>from<sp/>the<sp/>regular<sp/>calibration<sp/>usage,<sp/>as<sp/>the<sp/>&quot;transport&quot;<sp/>from</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>the<sp/>calibration<sp/>sample(s)<sp/>to<sp/>the<sp/>sample<sp/>used<sp/>in<sp/>physics<sp/>becomes<sp/>a<sp/>non-trivial<sp/>extension<sp/>of<sp/>the<sp/>efficiency</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>and<sp/>inefficiency<sp/>scale<sp/>factors<sp/>used<sp/>for<sp/>the<sp/>regular<sp/>calibrations.<sp/>Therefore,<sp/>two<sp/>separate<sp/>methods<sp/>exist</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>which<sp/>should<sp/>be<sp/>used<sp/>for<sp/>such<sp/>cases:</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getWeightScaleFactor<sp/>(variables,<sp/>label,<sp/>unc,<sp/>numVariation,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getWeightScaleFactor<sp/>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation)</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>The<sp/>meaning<sp/>of<sp/>the<sp/>variables<sp/>is<sp/>as<sp/>above.</highlight></codeline>
<codeline lineno="108"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="109"><highlight class="comment">&lt;a<sp/>name=&quot;ev&quot;&gt;&lt;h2&gt;Eigenvector<sp/>variations&lt;/h2&gt;&lt;/a&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>The<sp/>&apos;basic<sp/>usage&apos;<sp/>described<sp/>above<sp/>does<sp/>not<sp/>do<sp/>justice<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>data/MC<sp/>calibration<sp/>scale<sp/>factors</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>are<sp/>derived<sp/>in<sp/>kinematic<sp/>bins,<sp/>with<sp/>uncertainties<sp/>not<sp/>being<sp/>fully<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin<sp/>(indeed,<sp/>the</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>methods<sp/>themselves<sp/>do<sp/>not<sp/>know<sp/>anything<sp/>about<sp/>binning<sp/>to<sp/>start<sp/>with).<sp/>It<sp/>is<sp/>however<sp/>possible<sp/>to<sp/>arrive<sp/>at</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>a<sp/>statistically<sp/>more<sp/>correct<sp/>approach<sp/>by<sp/>considering<sp/>&apos;variations&apos;.<sp/>This<sp/>exploits<sp/>the<sp/>fact<sp/>that<sp/>in<sp/>the<sp/>case</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>of<sp/>scale<sp/>factor<sp/>calibrations,<sp/>besides<sp/>statistical<sp/>and<sp/>total<sp/>systematic<sp/>uncertainties<sp/>also<sp/>individual</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>systematic<sp/>uncertainties<sp/>are<sp/>stored<sp/>(along<sp/>with<sp/>a<sp/>model<sp/>of<sp/>their<sp/>bin-to-bin<sp/>correlations).<sp/>The<sp/>typical<sp/>use</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>of<sp/>this,<sp/>applicable<sp/>for<sp/>a<sp/>systematic<sp/>uncertainty<sp/>that<sp/>is<sp/>fully<sp/>correlated<sp/>(or<sp/>anti-correlated)<sp/>between<sp/>bins,</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>would<sp/>be<sp/>to<sp/>consider<sp/>the<sp/>effect<sp/>on<sp/>all<sp/>calibration<sp/>scale<sp/>factors<sp/>from<sp/>a<sp/>&amp;pm;<sp/>1<sp/>standard<sp/>deviation<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>underlying<sp/>source<sp/>of<sp/>systematic.</highlight></codeline>
<codeline lineno="120"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>In<sp/>practice,<sp/>this<sp/>approach<sp/>is<sp/>a<sp/>bit<sp/>cumbersome<sp/>due<sp/>to<sp/>the<sp/>sometimes<sp/>large<sp/>number<sp/>of<sp/>contributions<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>systematic<sp/>uncertainty.<sp/>In<sp/>addition,<sp/>no<sp/>infrastructure<sp/>exists<sp/>at<sp/>present<sp/>to<sp/>deal<sp/>with<sp/>uncertainties<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>not,<sp/>or<sp/>only<sp/>partially,<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin.<sp/>An<sp/>eigenvector<sp/>decomposition<sp/>technique<sp/>allows<sp/>to<sp/>address</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>both<sp/>of<sp/>these<sp/>issues<sp/>at<sp/>the<sp/>same<sp/>time.</highlight></codeline>
<codeline lineno="126"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>This<sp/>method<sp/>starts<sp/>from<sp/>the<sp/>scale<sp/>factor<sp/>covariance<sp/>matrix<sp/>that<sp/>can<sp/>be<sp/>constructed<sp/>on<sp/>the<sp/>basis<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>available<sp/>information<sp/>(uncertainties<sp/>plus<sp/>a<sp/>model<sp/>of<sp/>their<sp/>bin-to-bin<sp/>correlations).<sp/>This<sp/>covariance<sp/>matrix</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>diagonalised<sp/>and<sp/>its<sp/>eigenvectors<sp/>and<sp/>corresponding<sp/>eigenvalues<sp/>determined.<sp/>The<sp/>product<sp/>of<sp/>an<sp/>eigenvector</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>and<sp/>the<sp/>square<sp/>root<sp/>of<sp/>its<sp/>corresponding<sp/>eigenvalue<sp/>is<sp/>what<sp/>is<sp/>referred<sp/>to<sp/>as<sp/>an<sp/>&apos;eigenvector<sp/>variation&apos;.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>such<sp/>(statistically<sp/>independent)<sp/>variations<sp/>equals<sp/>the<sp/>number<sp/>of<sp/>calibration<sp/>bins,<sp/>and<sp/>the<sp/>set</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>of<sp/>variations<sp/>is<sp/>the<sp/>minimal<sp/>set<sp/>needed<sp/>to<sp/>(re-)construct<sp/>the<sp/>covariance<sp/>matrix.<sp/>After<sp/>this<sp/>eigenvector</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>decomposition,<sp/>the<sp/>eigenvector<sp/>variations<sp/>may<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>the<sp/>variations<sp/>corresponding<sp/>to<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>sources<sp/>of<sp/>uncertainty.</highlight></codeline>
<codeline lineno="136"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>One<sp/>further<sp/>refinement<sp/>can<sp/>be<sp/>made,<sp/>related<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>sometimes<sp/>sources<sp/>of<sp/>uncertainty<sp/>affecting</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>the<sp/>calibration<sp/>analyses<sp/>also<sp/>affect<sp/>the<sp/>physics<sp/>analysis<sp/>in<sp/>which<sp/>the<sp/>calibration<sp/>results<sp/>are<sp/>used.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>Including<sp/>these<sp/>sources<sp/>of<sp/>uncertainty<sp/>in<sp/>the<sp/>eigenvector<sp/>decomposition<sp/>would<sp/>not<sp/>allow<sp/>to<sp/>correlate<sp/>the</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>effect<sp/>on<sp/>the<sp/>calibration<sp/>properly<sp/>with<sp/>the<sp/>effect<sp/>on<sp/>the<sp/>physics<sp/>analysis;<sp/>therefore<sp/>it<sp/>is<sp/>possible<sp/>to</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>exclude<sp/>these<sp/>sources<sp/>of<sp/>uncertainty<sp/>from<sp/>being<sp/>used<sp/>in<sp/>the<sp/>construction<sp/>of<sp/>the<sp/>covariance<sp/>matrix<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>diagonalised,<sp/>and<sp/>consider<sp/>their<sp/>variations<sp/>separately<sp/>(note,<sp/>per<sp/>the<sp/>above,<sp/>that<sp/>this<sp/>will<sp/>be<sp/>done</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>correctly<sp/>only<sp/>in<sp/>the<sp/>case<sp/>of<sp/>full<sp/>bin-to-bin<sp/>correlations).</highlight></codeline>
<codeline lineno="145"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/>The<sp/>use<sp/>of<sp/>the<sp/>eigenvector<sp/>variation<sp/>is<sp/>not<sp/>enabled<sp/>by<sp/>default<sp/>and<sp/>must<sp/>be<sp/>switched<sp/>on<sp/>in<sp/>the<sp/>configuration</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>file<sp/>(see<sp/>&lt;a<sp/>href=&quot;#configuration&quot;&gt;Configuration&lt;/a&gt;).</highlight></codeline>
<codeline lineno="149"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>The<sp/>above<sp/>can<sp/>be<sp/>used<sp/>to<sp/>obtain<sp/>jet-by-jet<sp/>information<sp/>by<sp/>a<sp/>slight<sp/>modification<sp/>of<sp/>the<sp/>arguments<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>normal<sp/>methods<sp/>for<sp/>information<sp/>retrieval<sp/>also<sp/>employed<sp/>for<sp/>&lt;a<sp/>href=&quot;#basic&quot;&gt;basic<sp/>usage&lt;/a&gt;:</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getScaleFactor<sp/><sp/>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>numVariation)</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>Here,<sp/>the<sp/>first<sp/>three<sp/>variables<sp/>function<sp/>exactly<sp/>as<sp/>in<sp/>the<sp/>basic<sp/>usage<sp/>case.<sp/>As<sp/>for<sp/>the<sp/>two<sp/>last<sp/>arguments:</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>should<sp/>take<sp/>the<sp/>value<sp/>&lt;b&gt;SFEigen&lt;/b&gt;<sp/>or<sp/>&lt;b&gt;SFNamed&lt;/b&gt;<sp/>for<sp/>eigenvector<sp/>variations<sp/>or<sp/>named<sp/>variations,<sp/>respectively.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numVariation:<sp/>this<sp/>indicates<sp/>exactly<sp/>which<sp/>eigenvector<sp/>variation<sp/>or<sp/>named<sp/>variation<sp/>is<sp/>to<sp/>be<sp/>considered.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>In<sp/>addition,<sp/>it<sp/>should<sp/>be<sp/>noticed<sp/>that<sp/>the<sp/>methods&apos;<sp/>return<sp/>values<sp/>have<sp/>a<sp/>different<sp/>meaning<sp/>in<sp/>this<sp/>context:</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>while<sp/>in<sp/>normal<sp/>usage<sp/>they<sp/>are<sp/>(value,<sp/>uncertainty)<sp/>pairs,<sp/>here<sp/>they<sp/>are<sp/>(up,<sp/>down)<sp/>pairs,<sp/>with<sp/>up<sp/>and<sp/>down</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>meaning<sp/>the<sp/>result<sp/>of<sp/>an<sp/>up-<sp/>or<sp/>downward<sp/>eigenvector<sp/>variation<sp/>or<sp/>named<sp/>variation.</highlight></codeline>
<codeline lineno="164"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>valid<sp/>variations<sp/>for<sp/>each<sp/>type<sp/>can<sp/>be<sp/>retrieved<sp/>using</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getNumVariations(author,<sp/>label,<sp/>OP,<sp/>Uncertainty<sp/>unc)</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>with<sp/>&quot;unc&quot;<sp/>set<sp/>appropriately.<sp/>Finally,<sp/>calling</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listScaleFactorUncertainties(author,<sp/>label,<sp/>OP,<sp/>named)</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>to<sp/>retrieve<sp/>information<sp/>about<sp/>uncertainties<sp/>in<sp/>two<sp/>ways,<sp/>depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>the<sp/>last<sp/>argument:</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>=<sp/>false<sp/>(default):<sp/>retrieve<sp/>an<sp/>unsorted<sp/>list<sp/>of<sp/>all<sp/>the<sp/>uncertainties<sp/>associated<sp/>with<sp/>the<sp/>relevant<sp/>scale<sp/>factor</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>object.<sp/>This<sp/>can<sp/>be<sp/>used<sp/>to<sp/>identify<sp/>sources<sp/>of<sp/>uncertainty<sp/>to<sp/>be<sp/>excluded<sp/>from</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>eigenvector<sp/>decomposition.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>=<sp/>true:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>list<sp/>in<sp/>this<sp/>case<sp/>is<sp/>restricted<sp/>to<sp/>the<sp/>named<sp/>uncertainties<sp/>(these<sp/>should<sp/>have<sp/>been<sp/>specified</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>configuration<sp/>file<sp/>by<sp/>the<sp/>user)<sp/>and<sp/>ordered:<sp/>the<sp/>position<sp/>in<sp/>the<sp/>vector<sp/>constitutes<sp/>the</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>between<sp/>the<sp/>name<sp/>and<sp/>the<sp/>index<sp/>to<sp/>be<sp/>used<sp/>as<sp/>the<sp/>&quot;numVariation&quot;<sp/>argument<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getScaleFactor()<sp/>etc.<sp/>method.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>as<sp/>in<sp/>the<sp/>basic<sp/>usage<sp/>case,<sp/>the<sp/>code<sp/>can<sp/>be<sp/>sped<sp/>up<sp/>by<sp/>replacing<sp/>the<sp/>jet<sp/>author/label/OP<sp/>specification<sp/>by<sp/>the<sp/>appropriate</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/>integer<sp/>index<sp/>(see<sp/>the<sp/>&lt;a<sp/>href=&quot;#speed-up&quot;&gt;corresponding<sp/>section&lt;/a&gt;).</highlight></codeline>
<codeline lineno="186"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="comment">&lt;a<sp/>name=&quot;configuration&quot;&gt;&lt;h2&gt;Configuration&lt;/h2&gt;&lt;/a&gt;</highlight></codeline>
<codeline lineno="188"><highlight class="comment">&lt;p&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/>The<sp/>configuration<sp/>file<sp/>may<sp/>specify<sp/>the<sp/>following<sp/>settings:</highlight></codeline>
<codeline lineno="190"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="comment">&lt;ul&gt;</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/>&lt;li&gt;calibration<sp/>file<sp/>specification:</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename:<sp/><sp/><sp/><sp/>common<sp/>ROOT<sp/>file<sp/>for<sp/>calibration<sp/>scale<sp/>factors<sp/>and<sp/>MC<sp/>efficiencies</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default:<sp/>BTaggingPerformanceCalibrations.root)</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filenameEff:<sp/>separate<sp/>ROOT<sp/>file<sp/>for<sp/>MC<sp/>efficiencies</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filenameSF:<sp/><sp/>separate<sp/>ROOT<sp/>file<sp/>for<sp/>calibration<sp/>scale<sp/>factors</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>it<sp/>is<sp/>not<sp/>necessary<sp/>to<sp/>specify<sp/>all<sp/>three<sp/>files.<sp/>The<sp/>most<sp/>common<sp/>use<sp/>for<sp/>the<sp/>specification</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/>of<sp/>more<sp/>than<sp/>one<sp/>file<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>the<sp/>specification<sp/>of<sp/>analysis-specific<sp/>MC<sp/>efficiencies<sp/>(the</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/>efficiencies<sp/>provided<sp/>in<sp/>the<sp/>common<sp/>file<sp/>are<sp/>expected<sp/>to<sp/>be<sp/>sufficient<sp/>for<sp/>many<sp/>analysis<sp/>purposes,</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>but<sp/>depending<sp/>on<sp/>the<sp/>accuracy<sp/>needed<sp/>it<sp/>may<sp/>be<sp/>desirable<sp/>to<sp/>add<sp/>custom<sp/>efficiencies).</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>&lt;/li&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/>&lt;li&gt;choice<sp/>of<sp/>calibration:</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScaleFactorCalibrationBName:<sp/><sp/>name<sp/>for<sp/>scale<sp/>factor<sp/>calibration<sp/>object<sp/>to<sp/>be<sp/>used<sp/>for<sp/>b-jets<sp/>(default:<sp/>default)</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EfficiencyCalibrationBName:<sp/><sp/><sp/>name<sp/>for<sp/>MC<sp/>efficiencies<sp/>object(s)<sp/>to<sp/>be<sp/>used<sp/>for<sp/>b-jets<sp/>(default:<sp/>default).</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>multiple<sp/>(semicolon-separated)<sp/>MC<sp/>efficiency<sp/>objects<sp/>may<sp/>be<sp/>specified;</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internally<sp/>they<sp/>will<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>vector.<sp/>The<sp/>position<sp/>in<sp/>the<sp/>vector<sp/>can</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>be<sp/>used<sp/>as<sp/>the<sp/>&apos;mapIndex&apos;<sp/>argument<sp/>in<sp/>the<sp/>methods<sp/>involving<sp/>MC<sp/>information</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(see<sp/>e.g.<sp/>the<sp/>&lt;a<sp/>href=&quot;#basic&quot;&gt;basic<sp/>usage&lt;/a&gt;<sp/>section).</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/>Analogous<sp/>keywords<sp/>(with<sp/>B<sp/>replaced<sp/>with<sp/>C,<sp/>T,<sp/>Light)<sp/>can<sp/>be<sp/>used<sp/>to<sp/>specify<sp/>the<sp/>objects<sp/>to<sp/>be<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>charm,<sp/>tau,<sp/>and<sp/>light-flavour<sp/>jets,<sp/>respectively.<sp/>Note<sp/>that<sp/>the<sp/>&quot;default&quot;<sp/>object<sp/>should<sp/>always<sp/>exist<sp/>and<sp/>reflect</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>the<sp/>recommended<sp/>choice<sp/>of<sp/>object<sp/>unless<sp/>analysis-specific<sp/>needs<sp/>dictate<sp/>otherwise.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/>&lt;/li&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/>&lt;li&gt;jet<sp/>aliasing:</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliases:<sp/><sp/><sp/><sp/>semicolon-separated<sp/>list<sp/>of<sp/>jet<sp/>collection<sp/>aliases</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>The<sp/>feature<sp/>of<sp/>jet<sp/>aliasing<sp/>follows<sp/>the<sp/>strategy<sp/>also<sp/>used<sp/>in<sp/>the<sp/>CalibrationBroker<sp/>Athena<sp/>class.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>It<sp/>allows<sp/>for<sp/>the<sp/>use<sp/>of<sp/>a<sp/>calibration<sp/>for<sp/>different<sp/>jet<sp/>collection<sp/>names<sp/>than<sp/>those<sp/>actually</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>employed<sp/>in<sp/>physics<sp/>analysis<sp/>(caveat<sp/>emptor!).<sp/>Each<sp/>alias<sp/>consists<sp/>of<sp/>the<sp/>specification</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&amp;gt;target</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>where<sp/>source<sp/>indicates<sp/>the<sp/>name<sp/>used<sp/>in<sp/>physics<sp/>analysis,<sp/>while<sp/>target<sp/>is<sp/>the<sp/>name<sp/>to<sp/>be<sp/>used<sp/>for<sp/>calibration<sp/>purposes.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>&lt;/li&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/>&lt;li&gt;eigenvector<sp/>decomposition:</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>&lt;pre&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runEigenVectorMethod:<sp/><sp/>if<sp/>set<sp/>to<sp/>true<sp/>this<sp/>will<sp/>carry<sp/>out<sp/>an<sp/>eigenvector<sp/>decomposition,<sp/>the<sp/>results</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>which<sp/>can<sp/>subsequently<sp/>be<sp/>used<sp/>as<sp/>calibration<sp/>scale<sp/>factor<sp/>&quot;variations&quot;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctly<sp/>accounting<sp/>for<sp/>bin-to-bin<sp/>correlations.<sp/>For<sp/>detailed<sp/>usage<sp/>of</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-tagging<sp/>results<sp/>(e.g.<sp/>in<sp/>profile<sp/>likelihood<sp/>fits)<sp/>this<sp/>is<sp/>recommended<sp/>(default:<sp/>false)</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excludeFromCovMatrix:<sp/><sp/>semicolon-separated<sp/>list<sp/>of<sp/>uncertainties<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>the<sp/>eigenvector</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decomposition.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/>&lt;/pre&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/>&lt;/li&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="comment">&lt;/ul&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="comment">End_Html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataInterfaceROOT.cxx,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataInterfaceROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataEigenVariations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TEnv.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TObjString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cerr;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">Analysis::CalibrationDataContainer</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::UncertaintyResult;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">Analysis::CalibrationDataEigenVariations</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" kindref="compound">Analysis::CalibrationDataInterfaceROOT</ref>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>local<sp/>utility<sp/>function:<sp/>trim<sp/>leading<sp/>and<sp/>trailing<sp/>whitespace<sp/>in<sp/>the<sp/>configuration<sp/>.env<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>std::string<sp/>trim(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>whitespace<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strBegin<sp/>=<sp/>str.find_first_not_of(whitespace);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strBegin<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strEnd<sp/>=<sp/>str.find_last_not_of(whitespace);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strRange<sp/>=<sp/>strEnd<sp/>-<sp/>strBegin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.substr(strBegin,<sp/>strRange);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a735e3cfef1f9b5284ca6237078c26228" kindref="member">Analysis::CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>taggerName,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>configname,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pathname)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/>m_runEigenVectorMethod(false),<sp/>m_absEtaStrategy(GiveUp),<sp/>m_otherStrategy(Flag)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>taggerName:<sp/><sp/>this<sp/>should<sp/>correspond<sp/>to<sp/>the<sp/>tagger<sp/>name<sp/>as<sp/>used<sp/>in<sp/>the<sp/>calibration<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>configname:<sp/><sp/>full<sp/>name<sp/>of<sp/>the<sp/>configuration<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>pathname:<sp/><sp/><sp/><sp/>directory<sp/>specification<sp/>for<sp/>separate<sp/>scale<sp/>factor<sp/>or<sp/>efficiency<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>m_taggerName<sp/>=<sp/>taggerName;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>TEnv<sp/>env(configname.c_str());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ROOT<sp/>file<sp/>containing<sp/>the<sp/>calibrations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>TString<sp/>filename<sp/>=<sp/>env.GetValue(</highlight><highlight class="stringliteral">&quot;File&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BTaggingPerformanceCalibrations.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>m_filenameEff<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(</highlight><highlight class="stringliteral">&quot;FileEff&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>m_filenameSF<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(</highlight><highlight class="stringliteral">&quot;FileSF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_filenameEff<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>m_filenameEff<sp/>=<sp/>pathname<sp/>+<sp/>filename.Data();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_filenameSF<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>m_filenameSF<sp/>=<sp/>pathname<sp/>+<sp/>filename.Data();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;===<sp/>CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT<sp/>===&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Config<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>configname<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>taggerName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>taggerName<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Efficiency<sp/>file<sp/>name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_filenameEff<sp/>&lt;&lt;<sp/>endl<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>SF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_filenameSF<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>m_fileEff<sp/>=<sp/>TFile::Open(m_filenameEff.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_filenameEff<sp/>==<sp/>m_filenameSF)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileSF<sp/>=<sp/>m_fileEff;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileSF<sp/>=<sp/>TFile::Open(m_filenameSF.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>TObjString*<sp/>s;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>m_fileSF-&gt;GetObject(</highlight><highlight class="stringliteral">&quot;VersionInfo/BuildNumber&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>CDI<sp/>file<sp/>build<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s-&gt;GetName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibration<sp/>names<sp/>for<sp/>the<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>testPrefix(taggerName);<sp/>testPrefix<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>test(testPrefix);<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EfficiencyCalibrationBName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>calibrationBName(trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EfficiencyCalibrationCName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>calibrationCName(trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EfficiencyCalibrationTName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>calibrationTName(trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EfficiencyCalibrationLightName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>calibrationLightName(trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>TEnv<sp/>doesn&apos;t<sp/>allow<sp/>for<sp/>straight<sp/>retrieval<sp/>of<sp/>vectors<sp/>of<sp/>strings,<sp/>expect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>semicolon-separated<sp/>entries<sp/>(semicolon<sp/>because<sp/>ROOT<sp/>considers<sp/>this<sp/>as<sp/>a<sp/>&quot;special&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>token<sp/>anyway<sp/>in<sp/>object<sp/>names).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>string::size_type<sp/>end;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationBNames;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationBName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>calibrationBName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationBNames.push_back(trim(calibrationBName.substr(0,end)));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>calibrationBName<sp/>=<sp/>calibrationBName.substr(end+1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationCNames;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationCName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>calibrationCName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationCNames.push_back(trim(calibrationCName.substr(0,end)));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>calibrationCName<sp/>=<sp/>calibrationCName.substr(end+1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationTNames;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationTName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>calibrationTName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationTNames.push_back(trim(calibrationTName.substr(0,end)));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>calibrationTName<sp/>=<sp/>calibrationTName.substr(end+1);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationLightNames;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationLightName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>calibrationLightName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationLightNames.push_back(trim(calibrationLightName.substr(0,end)));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>calibrationLightName<sp/>=<sp/>calibrationLightName.substr(end+1);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>calibration<sp/>names<sp/>into<sp/>a<sp/>common<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>std::vector&lt;string&gt;<sp/>&gt;<sp/>effNames;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationBNames;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationCNames;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationTNames;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationLightNames;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>setEffCalibrationNames(effNames);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibration<sp/>names<sp/>for<sp/>the<sp/>efficiency<sp/>scale<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;ScaleFactorCalibrationBName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>calibrationBName<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;ScaleFactorCalibrationCName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>calibrationCName<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;ScaleFactorCalibrationTName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>calibrationTName<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;ScaleFactorCalibrationLightName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>calibrationLightName<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>calibration<sp/>names<sp/>into<sp/>a<sp/>common<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>names[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationBName;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>names[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationCName;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>names[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationTName;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>names[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationLightName;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>setSFCalibrationNames(names);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>TEnv<sp/>doesn&apos;t<sp/>allow<sp/>for<sp/>straight<sp/>retrieval<sp/>of<sp/>vectors<sp/>of<sp/>strings,<sp/>expect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>semicolon-separated<sp/>entries<sp/>(semicolon<sp/>because<sp/>ROOT<sp/>considers<sp/>this<sp/>as<sp/>a<sp/>&quot;special&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>token<sp/>anyway<sp/>in<sp/>object<sp/>names).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>prefix<sp/>this<sp/>since<sp/>the<sp/>aliases<sp/>are<sp/>common<sp/>to<sp/>all<sp/>taggers<sp/>(even<sp/>if<sp/>they<sp/>are<sp/>read<sp/>again<sp/>for<sp/>each<sp/>tagger).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>AL(env.GetValue(</highlight><highlight class="stringliteral">&quot;aliases&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AL.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>AL.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alias<sp/>=<sp/>AL.substr(0,<sp/>end);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>alias<sp/>specification<sp/>uses<sp/>an<sp/>arrow<sp/>(&quot;-&gt;&quot;).<sp/>Forget<sp/>about<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>properly<sp/>following<sp/>this<sp/>specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>TEnv<sp/>imposes<sp/>a<sp/>maximum<sp/>string<sp/>length<sp/>of<sp/>1024<sp/>characters<sp/>--<sp/>is<sp/>this<sp/>a<sp/>problem?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string::size_type<sp/>arrow<sp/>=<sp/>alias.find(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arrow<sp/>==<sp/>string::npos)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_aliases[trim(alias.substr(0,arrow))]<sp/>=<sp/>trim(alias.substr(arrow+2));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>AL<sp/>=<sp/>AL.substr(end+1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//run<sp/>egenvector<sp/>method<sp/>or<sp/>not?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>test=</highlight><highlight class="stringliteral">&quot;runEigenVectorMethod&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>m_runEigenVectorMethod=(bool)env.GetValue(test.c_str(),0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_runEigenVectorMethod)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>list<sp/>of<sp/>systematic<sp/>uncertainties<sp/>not<sp/>to<sp/>be<sp/>considered<sp/>when<sp/>building<sp/>up<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>full<sp/>covariance<sp/>matrix<sp/>used<sp/>for<sp/>the<sp/>eigenvector<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;excludeFromCovMatrix&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>uncList(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>string::size_type<sp/>end2;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end2<sp/>=<sp/>uncList.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_excludeFromCovMatrix.push_back(trim(uncList.substr(0,end2)));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end2<sp/>!=<sp/>string::npos)<sp/>uncList<sp/>=<sp/>uncList.substr(end2+1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end2<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>List<sp/>of<sp/>uncertainties<sp/>to<sp/>exclude:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_excludeFromCovMatrix.size()<sp/>==<sp/>0)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(none)&quot;</highlight><highlight class="normal">;<sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_excludeFromCovMatrix.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>m_excludeFromCovMatrix[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>also<sp/>the<sp/>eigenvector<sp/>reduction<sp/>strategies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>EVReductionStrategy&gt;<sp/>mappings;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>string&gt;<sp/>reductions;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EigenvectorReductionB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>reductions[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EigenvectorReductionC&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>reductions[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>testPrefix;<sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;EigenvectorReductionLight&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>reductions[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(test.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Loose;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Medium&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Medium;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Tight&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Tight;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;flavour<sp/>:<sp/>reductions)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_EVReductions[flavour.first]<sp/>=<sp/>mappings.find(flavour.second)<sp/>==<sp/>mappings.end()<sp/>?<sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>:<sp/>mappings.find(flavour.second)-&gt;second;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>strategy<sp/>for<sp/>c<sp/>jets<sp/>over<sp/>to<sp/>tau<sp/>&quot;jets&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>m_EVReductions[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_EVReductions[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>|eta|<sp/>validity<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>m_maxAbsEta<sp/>=<sp/>env.GetValue(</highlight><highlight class="stringliteral">&quot;MaxAbsEta&quot;</highlight><highlight class="normal">,<sp/>2.5);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxAbsEta<sp/>&lt;<sp/>0)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>validation<sp/>/<sp/>protection<sp/>strategy<sp/>in<sp/>case<sp/>an<sp/>out-of-bounds<sp/>eta<sp/>value<sp/>is<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strategy<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(</highlight><highlight class="stringliteral">&quot;OutOfBoundsEta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;GiveUp&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GiveUp&quot;</highlight><highlight class="normal">)<sp/>m_absEtaStrategy<sp/>=<sp/>GiveUp;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Flag&quot;</highlight><highlight class="normal">)<sp/>m_absEtaStrategy<sp/>=<sp/>Flag;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ignore&quot;</highlight><highlight class="normal">)<sp/>m_absEtaStrategy<sp/>=<sp/>Ignore;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>|eta|<sp/>extrapolation<sp/>strategy:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strategy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>setting<sp/>to<sp/>GiveUp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>m_absEtaStrategy<sp/>=<sp/>GiveUp;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>validation<sp/>/<sp/>protection<sp/>strategy<sp/>in<sp/>case<sp/>out-of-bounds<sp/>variables<sp/>are<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>strategy<sp/>=<sp/>trim(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(env.GetValue(</highlight><highlight class="stringliteral">&quot;OutOfBoundsOther&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Flag&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GiveUp&quot;</highlight><highlight class="normal">)<sp/>m_otherStrategy<sp/>=<sp/>GiveUp;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GiveUpExtrapolated&quot;</highlight><highlight class="normal">)<sp/>m_otherStrategy<sp/>=<sp/>GiveUpExtrapolated;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Flag&quot;</highlight><highlight class="normal">)<sp/>m_otherStrategy<sp/>=<sp/>Flag;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ignore&quot;</highlight><highlight class="normal">)<sp/>m_otherStrategy<sp/>=<sp/>Ignore;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>general<sp/>extrapolation<sp/>strategy:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strategy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>setting<sp/>to<sp/>Flag&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>m_otherStrategy<sp/>=<sp/>Flag;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>tag<sp/>weight<sp/>to<sp/>accept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>m_maxTagWeight<sp/>=<sp/>env.GetValue(</highlight><highlight class="stringliteral">&quot;MaxTagWeight&quot;</highlight><highlight class="normal">,<sp/>10.0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC/MC<sp/>(hadronisation)<sp/>scale<sp/>factors:<sp/>making<sp/>this<sp/>user-steerable<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>*temporary*<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>m_useMCMCSF<sp/>=<sp/>(bool)<sp/>env.GetValue(</highlight><highlight class="stringliteral">&quot;useMCMCSF&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC/MC<sp/>(topology)<sp/>scale<sp/>factors:<sp/>making<sp/>this<sp/>user-steerable<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>*temporary*<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>m_useTopologyRescaling<sp/>=<sp/>(bool)<sp/>env.GetValue(</highlight><highlight class="stringliteral">&quot;useTopologySF&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=======<sp/>end<sp/>of<sp/>CalibrationDataInterfaceROOT<sp/>instantiation<sp/>========&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a735e3cfef1f9b5284ca6237078c26228" kindref="member">Analysis::CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>taggerName,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileSF,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileEff,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>jetAliases,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;&amp;<sp/>SFNames,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::vector&lt;std::string&gt;<sp/>&gt;&amp;<sp/>EffNames,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>excludeFromEV,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>EVReductionStrategy&gt;<sp/>EVReductions,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useEV,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useMCMCSF,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useTopologyRescaling)<sp/>:</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>m_filenameSF(fileSF),<sp/>m_filenameEff(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>m_runEigenVectorMethod(useEV),<sp/>m_EVReductions(EVReductions),<sp/>m_useMCMCSF(useMCMCSF),<sp/>m_useTopologyRescaling(useTopologyRescaling),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>m_maxAbsEta(2.5),<sp/>m_absEtaStrategy(GiveUp),</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>m_otherStrategy(Flag),<sp/>m_maxTagWeight(10.0)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>constructor<sp/>avoiding<sp/>the<sp/>need<sp/>for<sp/>a<sp/>.env<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>taggerName:<sp/><sp/><sp/><sp/><sp/>this<sp/>should<sp/>correspond<sp/>to<sp/>the<sp/>tagger<sp/>name<sp/>as<sp/>used<sp/>in<sp/>the<sp/>calibration<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fileSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full<sp/>path<sp/>of<sp/>the<sp/>calibration<sp/>ROOT<sp/>file<sp/>containing<sp/>the<sp/>calibration<sp/>scale<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fileEff:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional<sp/>full<sp/>path<sp/>name<sp/>of<sp/>a<sp/>ROOT<sp/>file<sp/>containing<sp/>additional<sp/>MC<sp/>efficiency<sp/>maps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(use<sp/>a<sp/>null<sp/>pointer<sp/>to<sp/>disable<sp/>the<sp/>use<sp/>of<sp/>such<sp/>additional<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>jetAliases:<sp/><sp/><sp/><sp/><sp/>this<sp/>can<sp/>be<sp/>used<sp/>to<sp/>convert<sp/>jet<sp/>collection<sp/>names<sp/>to<sp/>the<sp/>corresponding<sp/>names<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>ROOT<sp/>file<sp/>(this<sp/>may<sp/>be<sp/>useful<sp/>as<sp/>e.g.<sp/>the<sp/>collection<sp/>names<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibration<sp/>ROOT<sp/>file<sp/>have<sp/>the<sp/>JVF<sp/>criterion<sp/>attached<sp/>as<sp/>a<sp/>suffix).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>alias<sp/>is<sp/>specified<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameOrig-&gt;nameTarget,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>nameOrig<sp/>and<sp/>nameTarget<sp/>are<sp/>the<sp/>names<sp/>of<sp/>the<sp/>input<sp/>jet<sp/>collection<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>collection<sp/>name<sp/>as<sp/>used<sp/>in<sp/>the<sp/>calibration<sp/>ROOT<sp/>file,<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>SFNames:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map<sp/>specifying<sp/>for<sp/>each<sp/>of<sp/>the<sp/>calibration<sp/>flavours<sp/>(&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;T&quot;,<sp/>&quot;Light&quot;)<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EffNames:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>map<sp/>specifying<sp/>for<sp/>each<sp/>of<sp/>the<sp/>calibration<sp/>flavours<sp/>(&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;T&quot;,<sp/>&quot;Light&quot;)<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names<sp/>of<sp/>the<sp/>possibly<sp/>relevant<sp/>efficiency<sp/>calibration<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>excludeFromEV:<sp/><sp/>list<sp/>of<sp/>systematic<sp/>uncertainties<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>the<sp/>Eigenvector<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>treatment<sp/>(this<sp/>is<sp/>used<sp/>only<sp/>if<sp/>Eigenvector<sp/>variations<sp/>are<sp/>used<sp/>to<sp/>begin<sp/>with)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EVReductions:<sp/><sp/><sp/>Eigenvector<sp/>variation<sp/>reduction<sp/>strategies<sp/>for<sp/>&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;Light&quot;<sp/>jets<sp/>(again,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>only<sp/>relevant<sp/>if<sp/>Eigenvector<sp/>variations<sp/>are<sp/>used<sp/>to<sp/>begin<sp/>with)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>useEV:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>specifying<sp/>if<sp/>Eigenvector<sp/>variations<sp/>will<sp/>be<sp/>used<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>useMCMCSF:<sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>specifying<sp/>if<sp/>generator-dependent<sp/>scale<sp/>factors<sp/>are<sp/>to<sp/>be<sp/>applied<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>at<sp/>present,<sp/>the<sp/>means<sp/>to<sp/>change<sp/>the<sp/>strategies<sp/>and<sp/>maximum<sp/>values<sp/>initialized<sp/>above<sp/>do<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>using<sp/>this<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;===<sp/>CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT<sp/>===&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>taggerName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>taggerName.c_str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileEff)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Efficiency<sp/>file<sp/>name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileEff<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>SF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileSF<sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>m_taggerName<sp/>=<sp/>taggerName;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>m_fileSF<sp/>=<sp/>TFile::Open(fileSF,<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileEff<sp/>&amp;&amp;<sp/>strcmp(fileSF,<sp/>fileEff)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>m_filenameEff<sp/>=<sp/>string(fileEff);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileEff<sp/>=<sp/>TFile::Open(fileEff,<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileEff<sp/>=<sp/>m_fileSF;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>TObjString*<sp/>s;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>m_fileSF-&gt;GetObject(</highlight><highlight class="stringliteral">&quot;VersionInfo/BuildNumber&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>CDI<sp/>file<sp/>build<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s-&gt;GetName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>jetAliases.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>alias<sp/>specification<sp/>uses<sp/>an<sp/>arrow<sp/>(&quot;-&gt;&quot;).<sp/>Forget<sp/>about<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>properly<sp/>following<sp/>this<sp/>specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>string::size_type<sp/>arrow<sp/>=<sp/>jetAliases[i].find(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arrow<sp/>==<sp/>string::npos)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>m_aliases[jetAliases[i].substr(0,arrow)]<sp/>=<sp/>jetAliases[i].substr(arrow+2);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>setEffCalibrationNames(EffNames);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>setSFCalibrationNames(SFNames);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_runEigenVectorMethod)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>m_excludeFromCovMatrix<sp/>=<sp/>excludeFromEV;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>List<sp/>of<sp/>uncertainties<sp/>to<sp/>exclude:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_excludeFromCovMatrix.size()<sp/>==<sp/>0)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(none)&quot;</highlight><highlight class="normal">;<sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_excludeFromCovMatrix.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>m_excludeFromCovMatrix[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=======<sp/>end<sp/>of<sp/>CalibrationDataInterfaceROOT<sp/>instantiation<sp/>========&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a735e3cfef1f9b5284ca6237078c26228" kindref="member">Analysis::CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT</ref>()</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor<sp/>for<sp/>PROOF<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>m_fileEff=0;<sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>m_fileSF=0;<sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a735e3cfef1f9b5284ca6237078c26228" kindref="member">Analysis::CalibrationDataInterfaceROOT::CalibrationDataInterfaceROOT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" kindref="compound">Analysis::CalibrationDataInterfaceROOT</ref>&amp;<sp/>other)<sp/>:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>Analysis::CalibrationDataInterfaceBase(other),<sp/>m_aliases(other.m_aliases),<sp/>m_objects(),<sp/>m_objectIndices(),</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>m_filenameSF(other.m_filenameSF),<sp/>m_filenameEff(other.m_filenameEff),</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>m_eigenVariationsMap(),<sp/>m_runEigenVectorMethod(other.m_runEigenVectorMethod),</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>m_excludeFromCovMatrix(other.m_excludeFromCovMatrix),<sp/>m_useMCMCSF(other.m_useMCMCSF),<sp/>m_useTopologyRescaling(other.m_useTopologyRescaling),</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>m_refMap(),<sp/>m_hadronisationReference(),</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>m_maxAbsEta(other.m_maxAbsEta),<sp/>m_absEtaStrategy(other.m_absEtaStrategy),<sp/>m_otherStrategy(other.m_otherStrategy),</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>m_etaCounters(other.m_etaCounters),<sp/>m_mainCounters(other.m_mainCounters),<sp/>m_extrapolatedCounters(other.m_extrapolatedCounters),</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>m_checkedWeightScaleFactors(other.m_checkedWeightScaleFactors),<sp/>m_maxTagWeight(other.m_maxTagWeight)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.<sp/>Note<sp/>that<sp/>the<sp/>&quot;cacheable&quot;<sp/>items<sp/>aren&apos;t<sp/>copied<sp/>(they<sp/>will<sp/>be<sp/>re-created<sp/>if<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>TFile<sp/>objects<sp/>cannot<sp/>be<sp/>copied.<sp/>Therefore,<sp/>create<sp/>duplicate<sp/>objects<sp/>starting<sp/>from<sp/>the<sp/>filenames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>m_fileSF<sp/>=<sp/>TFile::Open(m_filenameSF.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_filenameEff<sp/>==<sp/>m_filenameSF)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileSF<sp/>=<sp/>m_fileEff;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileEff<sp/>=<sp/>TFile::Open(m_filenameEff.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a6c45be083d8763e20b820cf65c2bd493" kindref="member">Analysis::CalibrationDataInterfaceROOT::~CalibrationDataInterfaceROOT</ref>()</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_fileEff!=0)<sp/>&amp;&amp;<sp/>(m_fileSF!=0))<sp/>{<sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_fileEff<sp/>==<sp/>m_fileSF)<sp/>{<sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_fileEff-&gt;Close();<sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileEff;<sp/>m_fileEff<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_fileEff-&gt;Close();<sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_fileSF-&gt;Close();<sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileEff;<sp/>m_fileEff<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileSF;<sp/><sp/>m_fileSF<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>also<sp/>the<sp/>stored<sp/>objects<sp/>(these<sp/>are<sp/>owned<sp/>by<sp/>us)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;CalibrationDataContainer*&gt;::iterator<sp/>it<sp/>=<sp/>m_objects.begin();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_objects.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_runEigenVectorMethod<sp/>&amp;&amp;<sp/>m_eigenVariationsMap[*it])<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_eigenVariationsMap[*it];<sp/>m_eigenVariationsMap[*it]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*it;<sp/>*it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>summary<sp/>output<sp/>on<sp/>out-of-bounds<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_absEtaStrategy<sp/>==<sp/>Flag)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\tCalibrationDataInterfaceROOT<sp/>|eta|<sp/>out-of-bounds<sp/>summary:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>m_mainCounters.size();<sp/>++index)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_etaCounters[index]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(index)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_etaCounters[index]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\tNo<sp/>issues<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\tCalibrationDataInterfaceROOT<sp/>object<sp/>out-of-bounds<sp/>summary:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>m_mainCounters.size();<sp/>++index)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mainCounters[index]<sp/>+<sp/>m_extrapolatedCounters[index]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(index)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>general:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_mainCounters[index]</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>extrapolated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_extrapolatedCounters[index]</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\tNo<sp/>issues<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac270a987041f673054ff5c1bb4b60b69" kindref="member">Analysis::CalibrationDataInterfaceROOT::retrieveCalibrationIndex</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>index,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="684"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>integer<sp/>index<sp/>corresponding<sp/>to<sp/>a<sp/>given<sp/>combination<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flavour<sp/>label<sp/>/<sp/>tagger<sp/>/<sp/>working<sp/>point<sp/>/<sp/>jet<sp/>collection<sp/>name,<sp/>and<sp/>separately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>calibration<sp/>scale<sp/>factors<sp/>and<sp/>MC<sp/>efficiencies<sp/>(all<sp/>these<sp/>ingredients<sp/>are<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>specify<sp/>fully<sp/>the<sp/>calibration<sp/>object).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>fact<sp/>this<sp/>method<sp/>will<sp/>also<sp/>trigger<sp/>the<sp/>retrieval<sp/>of<sp/>the<sp/>object<sp/>itself,<sp/>if<sp/>not<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>done,<sp/>and<sp/>will<sp/>cache<sp/>it<sp/>internally.<sp/>The<sp/>absence<sp/>of<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>flagged<sp/>by<sp/>a<sp/>false<sp/>return<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>used<sp/>internally<sp/>but<sp/>should<sp/>also<sp/>be<sp/>called<sp/>by<sp/>users<sp/>in<sp/>order<sp/>to<sp/>exploit<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;code<sp/>speed-up&quot;<sp/>features<sp/>documented<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/><sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>isSF:<sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>to<sp/>true<sp/>(false)<sp/>for<sp/>scale<sp/>factors<sp/>(MC<sp/>efficiencies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/><sp/><sp/>resulting<sp/>index<sp/>(meaningful<sp/>only<sp/>for<sp/>a<sp/>&apos;true&apos;<sp/>function<sp/>return<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/>index<sp/>to<sp/>the<sp/>MC<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>full<sp/>name<sp/>from<sp/>the<sp/>label,<sp/>operating<sp/>point,<sp/>SF/Eff<sp/>choice;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>look<sp/>up<sp/>this<sp/>full<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/>isSF,<sp/>mapIndex);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_objectIndices.find(name);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_objectIndices.end())<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>container<sp/>is<sp/>found,<sp/>attempt<sp/>to<sp/>retrieve<sp/>it<sp/>here<sp/>(this<sp/>is<sp/>so<sp/>that<sp/>users<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>call<sp/>the<sp/>named<sp/>scale<sp/>factor<sp/>etc.<sp/>methods<sp/>once<sp/>just<sp/>to<sp/>retrieve<sp/>the<sp/>container).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>(label<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal"><sp/>:<sp/>label;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>dirname<sp/>=<sp/>m_taggerName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>getAlias(author)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>OP<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>flavour;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>cntname<sp/>=<sp/>getContainername(flavour,<sp/>isSF,<sp/>mapIndex);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" kindref="compound">Analysis::CalibrationDataInterfaceROOT</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;retrieveContainer(dirname,<sp/>cntname,<sp/>isSF);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_objectIndices.find(name);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_objectIndices.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad33fccde418c8c16d7d07cdededed21c" kindref="member">Analysis::CalibrationDataInterfaceROOT::getScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="730"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used<sp/>(this<sp/>is<sp/>needed<sp/>for<sp/>MC/MC<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>application)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,<sp/>indexSF;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>indexEff,<sp/>mapIndex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>indexSF)))<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad33fccde418c8c16d7d07cdededed21c" kindref="member">Analysis::CalibrationDataInterfaceROOT::getScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="765"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad33fccde418c8c16d7d07cdededed21c" kindref="member">Analysis::CalibrationDataInterfaceROOT::getScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="788"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>depending<sp/>on<sp/>the<sp/>unc<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[indexSF];</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>container!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>out-of-bound<sp/>check<sp/>of<sp/>jet<sp/>eta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>checkAbsEta(variables,<sp/>indexSF);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>MC/MC<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MCMCSF<sp/>=<sp/>m_useMCMCSF<sp/>?<sp/>getMCMCScaleFactor(variables,<sp/>indexSF,<sp/>indexEff)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_runEigenVectorMethod<sp/>&amp;&amp;<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ERROR.<sp/>Trying<sp/>to<sp/>call<sp/>eigenvector<sp/>method<sp/>but<sp/>initialization<sp/>not<sp/>switched<sp/>on<sp/>in<sp/>b-tagging<sp/>.env<sp/>config<sp/>file.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Please<sp/>correct<sp/>your<sp/>.env<sp/>config<sp/>file<sp/>first.<sp/>Nominal<sp/>uncertainties<sp/>used.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*<sp/>eigenVariation=m_eigenVariationsMap[container];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>eigenVariation)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Could<sp/>not<sp/>retrieve<sp/>eigenvector<sp/>variation,<sp/>while<sp/>it<sp/>should<sp/>have<sp/>been<sp/>there.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxVariations<sp/>=<sp/>(unc<sp/>==<sp/>SFEigen)<sp/>?<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2b5582e07ecfdd70a4f37bbef51e0079" kindref="member">getNumberOfEigenVariations</ref>()<sp/>:<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a6f803f49682617c5080aa1c4bac1b4c6" kindref="member">getNumberOfNamedVariations</ref>();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVariation<sp/>&gt;<sp/>maxVariations-1)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Asked<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>((unc<sp/>==<sp/>SFEigen)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;eigenvariation&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;named<sp/>variation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numVariation<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>overall<sp/>number<sp/>of<sp/>available<sp/>variations<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxVariations<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>up=0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>down=0;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/>(unc<sp/>==<sp/>SFEigen)<sp/>?</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a31536647df599cd88199e053eb6994e4" kindref="member">getEigenvectorVariation</ref>(numVariation,up,down)<sp/>:</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a656102f186485b43406b1e40c4d00b86" kindref="member">getNamedVariation</ref>(numVariation,up,down);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isOK)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Eigenvector<sp/>object<sp/>is<sp/>there<sp/>but<sp/>cannot<sp/>retrieve<sp/>up<sp/>and<sp/>down<sp/>uncertainty<sp/>histograms.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&apos;extrapolation&apos;<sp/>uncertainty<sp/>(always<sp/>a<sp/>named<sp/>one)<sp/>needs<sp/>a<sp/>somewhat<sp/>special<sp/>treatment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate<sp/>=<sp/>(unc<sp/>==<sp/>SFNamed)<sp/>?<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2be867ccf265171004a526aae71286bb" kindref="member">isExtrapolationVariation</ref>(numVariation)<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueUp;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueDown;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::CalibrationStatus<sp/>statUp<sp/><sp/><sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>valueUp,<sp/><sp/>up,<sp/><sp/><sp/>extrapolate);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::CalibrationStatus<sp/>statDown<sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>valueDown,down,<sp/>extrapolate);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statUp<sp/>==<sp/>Analysis::kError<sp/>||<sp/>statDown<sp/>==<sp/>Analysis::kError)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUp)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(statUp<sp/>!=<sp/>Analysis::kRange);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>test<sp/>also<sp/>statDown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUpExtrapolated)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(statUp<sp/>!=<sp/>Analysis::kExtrapolatedRange);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>test<sp/>also<sp/>statDown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statUp<sp/>==<sp/>Analysis::kRange)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statUp<sp/>==<sp/>Analysis::kExtrapolatedRange)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>Extrapolated);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>MCMCSF*valueUp;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>MCMCSF*valueDown;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>negative<sp/>return<sp/>values.<sp/>Should<sp/>the<sp/>comparison<sp/>be<sp/>against<sp/>a<sp/>strict<sp/>0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>std::max(Analysis::CalibZERO,<sp/>result.first);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>std::max(Analysis::CalibZERO,<sp/>result.second);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>statUp;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>eigenvector<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Proceed<sp/>with<sp/>no-eigenvector<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>retrieve<sp/>the<sp/>result<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>status<sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>value);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>result<sp/>in<sp/>non-EV<sp/>context!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUp)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(status<sp/>!=<sp/>Analysis::kRange);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUpExtrapolated)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(status<sp/>!=<sp/>Analysis::kExtrapolatedRange);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kRange)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kExtrapolatedRange)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>Extrapolated);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stat(0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Statistical)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" kindref="member">getStatUncertainty</ref>(variables,<sp/>stat)<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>covariance<sp/>matrix!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>Analysis::UncertaintyResult<sp/>resSyst(0,0);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Systematic)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" kindref="member">getSystUncertainty</ref>(variables,<sp/>resSyst)<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>systematic<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Extrapolation)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>uncertainty<sp/>is<sp/>special,<sp/>since<sp/>it<sp/>is<sp/>not<sp/>normally<sp/>to<sp/>be<sp/>combined<sp/>into<sp/>the<sp/>overall<sp/>systematic<sp/>uncertainty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty</ref>(</highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">,<sp/>variables,<sp/>resSyst)<sp/>==<sp/>Analysis::kError)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>extrapolation<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>TauExtrapolation)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>this<sp/>uncertainty<sp/>is<sp/>special,<sp/>since<sp/>it<sp/>it<sp/>singles<sp/>out<sp/>an<sp/>uncertainty<sp/>relevant<sp/>only<sp/>for<sp/>tau<sp/>&quot;jets&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>some<sp/>care<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>not<sp/>to<sp/>duplicate<sp/>or<sp/>omit<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty</ref>(</highlight><highlight class="stringliteral">&quot;extrapolation<sp/>from<sp/>charm&quot;</highlight><highlight class="normal">,<sp/>variables,<sp/>resSyst)<sp/>==<sp/>Analysis::kError)</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>extrapolation<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>combinedUncertainty(stat,<sp/>resSyst);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/>MCMCSF*value;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>MCMCSF*uncertainty;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>negative<sp/>return<sp/>values.<sp/>Should<sp/>the<sp/>comparison<sp/>be<sp/>against<sp/>a<sp/>strict<sp/>0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>std::max(Analysis::CalibZERO,<sp/>result.first);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a79d54d6e6345d190b880ddc0b3f4139f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="930"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>pair,<sp/>as<sp/>documented<sp/>above,<sp/>and<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>index,<sp/>mapIndex))<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getMCEfficiency:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>index,<sp/>unc,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a79d54d6e6345d190b880ddc0b3f4139f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="958"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>pair,<sp/>as<sp/>documented<sp/>above,<sp/>and<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>index,<sp/>unc,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a79d54d6e6345d190b880ddc0b3f4139f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>Uncertainty<sp/>unc,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="977"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>variation<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[index];</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>out-of-bound<sp/>check<sp/>of<sp/>jet<sp/>eta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>checkAbsEta(variables,<sp/>index);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>retrieve<sp/>the<sp/>result<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>status<sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>value);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUp)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(status<sp/>!=<sp/>Analysis::kRange);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>test<sp/>also<sp/>statDown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kRange)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(index);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stat(0);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Statistical)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" kindref="member">getStatUncertainty</ref>(variables,<sp/>stat)<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getMCEfficiency:<sp/>error<sp/>retrieving<sp/>MC<sp/>efficiency<sp/>parameter<sp/>covariance<sp/>matrix!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary(?)<sp/>hack:<sp/>comment<sp/>this<sp/>out<sp/>since<sp/>the<sp/>present<sp/>MC<sp/>results<sp/>don&apos;t<sp/>have<sp/>&quot;systematics&quot;<sp/>contributions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Analysis::UncertaintyResult<sp/>resSyst(0,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Systematic)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(container-&gt;getSystUncertainty(variables,<sp/>resSyst)<sp/>==<sp/>Analysis::kError)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>covariance<sp/>matrix!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>there<sp/>is<sp/>no<sp/>combination<sp/>of<sp/>stat/syst<sp/>uncertainties<sp/>to<sp/>be<sp/>made,<sp/>comment<sp/>this<sp/>out<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>stat;<sp/></highlight><highlight class="comment">//<sp/>combinedUncertainty(stat,<sp/>resSyst);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/>std::max(0.,<sp/>std::min(1.,<sp/>value));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>uncertainty;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>efficiency<sp/>retrieval<sp/>==========================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad55af75d4d11312fb700862bc42224dc" kindref="member">Analysis::CalibrationDataInterfaceROOT::getEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1036"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/>indexEff;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>indexEff,<sp/>mapIndex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>indexSF)))<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getEfficiency:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1a889cdb7d20dbd38a3e13627b6d4ee130" kindref="member">getEfficiency</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad55af75d4d11312fb700862bc42224dc" kindref="member">Analysis::CalibrationDataInterfaceROOT::getEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1071"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1a889cdb7d20dbd38a3e13627b6d4ee130" kindref="member">getEfficiency</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad55af75d4d11312fb700862bc42224dc" kindref="member">Analysis::CalibrationDataInterfaceROOT::getEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1095"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>efficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>depending<sp/>on<sp/>the<sp/>unc<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>sfResult;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>sfStatus<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>sfResult);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sfStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>effStatus=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>indexEff,<sp/>unc,<sp/>effResult);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effStatus;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relative<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>effResult.first;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TMath::Abs(sfResult.first)<sp/>&gt;<sp/>Analysis::CalibZERO)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>std::min(effResult.first*sfResult.first,<sp/>1.);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>the<sp/>scale<sp/>factor<sp/>variation<sp/>cases<sp/>separately<sp/>since<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>CalibResult<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>&apos;value&apos;<sp/>above<sp/>contains<sp/>the<sp/>upward<sp/>variation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueDown<sp/>=<sp/>effResult.first*sfResult.second;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>valueDown;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>effResult.second/effResult.first;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sfRelative<sp/>=<sp/>sfResult.second/sfResult.first;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;sferr=&quot;<sp/>&lt;&lt;<sp/>sfResult.second</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;btag<sp/>Calib<sp/>relative=&quot;<sp/>&lt;&lt;<sp/>relative<sp/>&lt;&lt;<sp/>&quot;<sp/>sfRelative=&quot;<sp/>&lt;&lt;<sp/>sfRelative<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>TMath::Sqrt(sfRelative*sfRelative<sp/>+<sp/>relative*relative);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>never<sp/>happens<sp/>due<sp/>to<sp/>protection<sp/>of<sp/>SF<sp/>return<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>CalibrationDataInterfaceROOT::getEfficiency:<sp/>SF<sp/>null<sp/>result,<sp/>SF=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfResult.first</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MC<sp/>eff=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>effResult.first<sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>setting<sp/>SF=1.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>Analysis::dummyValue;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>value*relative;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Select&quot;<sp/>the<sp/>status<sp/>code<sp/>for<sp/>the<sp/>actual<sp/>calibration<sp/>(it<sp/>is<sp/>subject<sp/>to<sp/>more<sp/>constraints)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ab1901622a30f06ddc4d04652f7f592ac" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiencyScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1158"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inefficiency<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>scale<sp/>factor<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>ratio<sp/>of<sp/>data<sp/>to<sp/>MC<sp/>inefficiencies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/>indexEff;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>indexEff,<sp/>mapIndex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>indexSF)))<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getInefficiencyScaleFactor:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getInefficiencyScaleFactor(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ab1901622a30f06ddc4d04652f7f592ac" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiencyScaleFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1194"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inefficiency<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>scale<sp/>factor<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>ratio<sp/>of<sp/>data<sp/>to<sp/>MC<sp/>inefficiencies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getInefficiencyScaleFactor(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ab1901622a30f06ddc4d04652f7f592ac" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiencyScaleFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1219"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inefficiency<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>scale<sp/>factor<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>ratio<sp/>of<sp/>data<sp/>to<sp/>MC<sp/>inefficiencies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>depending<sp/>on<sp/>the<sp/>unc<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>sfResult;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>sfStatus<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>sfResult);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sfStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>effStatus=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>indexEff,<sp/>unc,<sp/>effResult);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effStatus;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eff<sp/>=<sp/>std::min(effResult.first,<sp/>1.);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>efferr<sp/>=<sp/>effResult.second;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sf<sp/>=<sp/>sfResult.first;<sp/></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sferr<sp/>=<sp/>sfResult.second;<sp/></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.;<sp/></highlight><highlight class="comment">//<sp/>Analysis::dummyValue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0.;<sp/></highlight><highlight class="comment">//<sp/>Analysis::dummyValue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1.<sp/>-<sp/>eff<sp/>&gt;<sp/>CalibZERO)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>negative<sp/>scale<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>std::max((1.<sp/>-<sp/>eff*sf),<sp/>CalibZERO)<sp/>/<sp/>(1.<sp/>-<sp/>eff);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>the<sp/>scale<sp/>factor<sp/>variation<sp/>cases<sp/>separately<sp/>since<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>CalibResult<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(&apos;sf&apos;<sp/>and<sp/>&apos;sferr&apos;<sp/>above<sp/>contain<sp/>the<sp/>upward<sp/>and<sp/>downward<sp/>variations,<sp/>respectively).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valDown<sp/>=<sp/>std::max((1.<sp/>-<sp/>eff*sferr),<sp/>CalibZERO)<sp/>/<sp/>(1.<sp/>-<sp/>eff);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>valDown;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>pow((1.<sp/>-<sp/>sf)<sp/>/<sp/>(1.<sp/>-<sp/>eff)<sp/>*<sp/>efferr,<sp/>2)<sp/>+<sp/>pow(eff*sferr,<sp/>2);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&gt;<sp/>0.)</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>1./(1.<sp/>-<sp/>eff)<sp/>*<sp/>TMath::Sqrt(err);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;btag<sp/>Calib<sp/>Ineff<sp/>err=&quot;<sp/>&lt;&lt;<sp/>err<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/>std::max(CalibZERO,<sp/>val);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Select&quot;<sp/>the<sp/>status<sp/>code<sp/>for<sp/>the<sp/>actual<sp/>calibration<sp/>(it<sp/>is<sp/>subject<sp/>to<sp/>more<sp/>constraints)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a60930b42a98d37beb849718f6eaf589f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc,</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1276"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>inefficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>1<sp/>minus<sp/>the<sp/>efficiency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/>indexEff;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>indexEff,<sp/>mapIndex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>indexSF)))<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getInefficiency:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getInefficiency(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a60930b42a98d37beb849718f6eaf589f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1312"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>inefficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>1<sp/>minus<sp/>the<sp/>efficiency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getInefficiency(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a60930b42a98d37beb849718f6eaf589f" kindref="member">Analysis::CalibrationDataInterfaceROOT::getInefficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1337"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>inefficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>efficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>product<sp/>of<sp/>MC<sp/>efficiency<sp/>and<sp/>data/MC<sp/>efficiency<sp/>scale<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inefficiency<sp/>is<sp/>then<sp/>computed<sp/>as<sp/>the<sp/>1<sp/>minus<sp/>the<sp/>efficiency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>depending<sp/>on<sp/>the<sp/>unc<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>sfResult;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>sfStatus<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>sfResult);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sfStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>effStatus=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>indexEff,<sp/>unc,<sp/>effResult);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effStatus;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>std::max(0.,<sp/>1.<sp/>-<sp/>effResult.first<sp/>*<sp/>sfResult.first);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0.;<sp/></highlight><highlight class="comment">//<sp/>Analysis::dummyValue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bail<sp/>out<sp/>here<sp/>if<sp/>not<sp/>both<sp/>results<sp/>are<sp/>strictly<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effResult.first<sp/>&lt;=<sp/>0.<sp/>||<sp/>sfResult.first<sp/>&lt;=<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>the<sp/>scale<sp/>factor<sp/>variation<sp/>cases<sp/>separately<sp/>since<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>CalibResult<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>&apos;val&apos;<sp/>above<sp/>contains<sp/>the<sp/>upward<sp/>variation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valDown<sp/>=<sp/>std::max(0.,<sp/>1.<sp/>-<sp/>effResult.first*sfResult.second);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>valDown;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>safer<sp/>than<sp/>pow(x,<sp/>2):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>effResult.second/effResult.first*effResult.second/effResult.first</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sfResult.second/sfResult.first*sfResult.second/sfResult.first;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>val*TMath::Sqrt(err);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>std::max(0.,<sp/>std::min(1.,<sp/>val));</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Select&quot;<sp/>the<sp/>status<sp/>code<sp/>for<sp/>the<sp/>actual<sp/>calibration<sp/>(it<sp/>is<sp/>subject<sp/>to<sp/>more<sp/>constraints)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sfStatus;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a7c5a377b6c9c949a2587b859dbfff19d" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCInefficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1390"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>inefficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>objects<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>inefficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>1<sp/>minus<sp/>the<sp/>efficiency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>(value,<sp/>uncertainty),<sp/>as<sp/>documented<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>label,<sp/>OP,<sp/>unc,<sp/>mapIndex);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::max(0.,<sp/>1.<sp/>-<sp/>effResult.first),<sp/>effResult.second);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a7c5a377b6c9c949a2587b859dbfff19d" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCInefficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1412"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC<sp/>inefficiency<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>inefficiency<sp/>is<sp/>computed<sp/>as<sp/>the<sp/>1<sp/>minus<sp/>the<sp/>efficiency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>(value,<sp/>uncertainty),<sp/>as<sp/>documented<sp/>above,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(variables,<sp/>index,<sp/>unc);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::max(0.,<sp/>1.<sp/>-<sp/>effResult.first),<sp/>effResult.second);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1aa14152d891cb580cfe769e9c1bab78f2" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCMCScaleFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1432"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>MC/MC<sp/>scale<sp/>factor<sp/>given<sp/>the<sp/>set<sp/>of<sp/>scale<sp/>factor<sp/>and<sp/>efficiency<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>efficiency<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>reference<sp/>doesn&apos;t<sp/>exist,<sp/>or<sp/>if<sp/>they<sp/>are<sp/>the<sp/>same,<sp/>nothing<sp/>can<sp/>/<sp/>needs<sp/>to<sp/>be<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSFRef<sp/>=<sp/>m_hadronisationReference[indexSF],<sp/>indexEffRef<sp/>=<sp/>m_hadronisationReference[indexEff];</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexSFRef<sp/>&lt;<sp/>0<sp/>||<sp/>indexEffRef<sp/>&lt;<sp/>0<sp/>||<sp/>indexSFRef<sp/>==<sp/>indexEffRef)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>also<sp/>that<sp/>the<sp/>individual<sp/>efficiencies<sp/>are<sp/>physically<sp/>meaningful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>effSFRef;<sp/><sp/>m_objects[indexSFRef]-&gt;getResult(variables,<sp/>effSFRef);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>effEffRef;<sp/>m_objects[indexEffRef]-&gt;getResult(variables,<sp/>effEffRef);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(effSFRef<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>effEffRef<sp/>&gt;<sp/>0)<sp/>?<sp/>effSFRef/effEffRef<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a8db4852e7ea35ef43c1464c4f269d611" kindref="member">Analysis::CalibrationDataInterfaceROOT::getWeightScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,<sp/>Uncertainty<sp/>unc,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1453"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>weight<sp/>fraction<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(if<sp/>eigenvector<sp/>or<sp/>named<sp/>variations<sp/>are<sp/>specified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>in<sp/>contrast<sp/>to<sp/>the<sp/>&quot;regular&quot;<sp/>(non-continuous)<sp/>case,<sp/>the<sp/>computation<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>general<sp/>needs<sp/>the<sp/>(selection-<sp/>or<sp/>even<sp/>process-specific)<sp/>MC<sp/>tag<sp/>weight<sp/>fractions,<sp/>in<sp/>order<sp/>to<sp/>rescale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>factors.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>tag<sp/>weight<sp/>fractions<sp/>(both<sp/>in<sp/>data<sp/>and<sp/>in<sp/>MC)<sp/>sum<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unity<sp/>for<sp/>each<sp/>given<sp/>kinematic<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>the<sp/>MC<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used<sp/>for<sp/>scale<sp/>factor<sp/>rescaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>cont(</highlight><highlight class="stringliteral">&quot;Continuous&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/>indexEff;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(retrieveCalibrationIndex<sp/>(label,<sp/>cont,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>indexEff,<sp/>mapIndex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retrieveCalibrationIndex<sp/>(label,<sp/>cont,<sp/>variables.jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>indexSF)))<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>cont,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(variables.jetAuthor,<sp/>cont,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getWeightScaleFactor(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a8db4852e7ea35ef43c1464c4f269d611" kindref="member">Analysis::CalibrationDataInterfaceROOT::getWeightScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1491"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>weight<sp/>fraction<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>either<sp/>a<sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(if<sp/>eigenvector<sp/>or<sp/>named<sp/>variations<sp/>are<sp/>specified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>and<sp/>will<sp/>be<sp/>a<sp/>dummy<sp/>value<sp/>in<sp/>case<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>in<sp/>contrast<sp/>to<sp/>the<sp/>&quot;regular&quot;<sp/>(non-continuous)<sp/>case,<sp/>the<sp/>computation<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>general<sp/>needs<sp/>the<sp/>(selection-<sp/>or<sp/>even<sp/>process-specific)<sp/>MC<sp/>tag<sp/>weight<sp/>fractions,<sp/>in<sp/>order<sp/>to<sp/>rescale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>factors.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>tag<sp/>weight<sp/>fractions<sp/>(both<sp/>in<sp/>data<sp/>and<sp/>in<sp/>MC)<sp/>sum<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unity<sp/>for<sp/>each<sp/>given<sp/>kinematic<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>tag<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getWeightScaleFactor(variables,<sp/>indexSF,<sp/>indexEff,<sp/>unc,<sp/>numVariation,<sp/>result)<sp/>==<sp/>Analysis::kError)<sp/>?</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::dummyResult<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal">Analysis::CalibrationStatus</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a8db4852e7ea35ef43c1464c4f269d611" kindref="member">Analysis::CalibrationDataInterfaceROOT::getWeightScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff,</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVariation,</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::CalibResult&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1518"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>weight<sp/>fraction<sp/>scale<sp/>factor<sp/>retrieval<sp/>identifying<sp/>the<sp/>requested<sp/>calibration<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>in<sp/>contrast<sp/>to<sp/>the<sp/>&quot;regular&quot;<sp/>(non-continuous)<sp/>case,<sp/>the<sp/>computation<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>general<sp/>needs<sp/>the<sp/>(selection-<sp/>or<sp/>even<sp/>process-specific)<sp/>MC<sp/>tag<sp/>weight<sp/>fractions,<sp/>in<sp/>order<sp/>to<sp/>rescale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>factors.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>tag<sp/>weight<sp/>fractions<sp/>(both<sp/>in<sp/>data<sp/>and<sp/>in<sp/>MC)<sp/>sum<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unity<sp/>for<sp/>each<sp/>given<sp/>kinematic<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>variables:<sp/><sp/><sp/><sp/><sp/>object<sp/>holding<sp/>kinematic<sp/>(and<sp/>other)<sp/>information<sp/>needed<sp/>to<sp/>compute<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexSF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>indexEff:<sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>to<sp/>MC<sp/>tag<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>what<sp/>uncertainties<sp/>to<sp/>evaluate<sp/>(or<sp/>whether<sp/>eigenvector<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>numVariation:<sp/><sp/>variation<sp/>index<sp/>(in<sp/>case<sp/>of<sp/>eigenvector<sp/>or<sp/>named<sp/>variations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value,<sp/>uncertainty)<sp/>or<sp/>(up,<sp/>down)<sp/>variation<sp/>pair,<sp/>depending<sp/>on<sp/>the<sp/>unc<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>dummy<sp/>value<sp/>will<sp/>be<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[indexSF];</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>effContainer<sp/>=<sp/>m_objects[indexEff];</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>effContainer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>time<sp/>this<sp/>combination<sp/>of<sp/>scale<sp/>factor<sp/>and<sp/>&quot;efficiency&quot;<sp/>objects<sp/>is<sp/>given,<sp/>check<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>factors<sp/>that<sp/>will<sp/>result<sp/>from<sp/>their<sp/>combination<sp/>(where<sp/>the<sp/>computations<sp/>reproduce<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shown<sp/>below)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>checkWeightScaleFactors(indexSF,<sp/>indexEff);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>out-of-bound<sp/>check<sp/>of<sp/>jet<sp/>eta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>checkAbsEta(variables,<sp/>indexSF);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>retrieve<sp/>the<sp/>result<sp/>itself<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>status<sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>value);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUp)<sp/>assert<sp/>(status<sp/>!=<sp/>Analysis::kRange);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUpExtrapolated)<sp/>assert<sp/>(status<sp/>!=<sp/>Analysis::kExtrapolatedRange);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kRange)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>Analysis::kExtrapolatedRange)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>Extrapolated);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>reference<sp/>MC<sp/>tag<sp/>weight<sp/>fraction<sp/>(corresponding<sp/>to<sp/>the<sp/>calibration<sp/>scale<sp/>factors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>Analysis::UncertaintyResult<sp/>refMCResult(0,0);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty</ref>(</highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal">,<sp/>variables,<sp/>refMCResult)<sp/>==<sp/>Analysis::kError)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fracMCref<sp/>=<sp/>refMCResult.first;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>MC<sp/>reference<sp/>information,<sp/>if<sp/>requested<sp/>(the<sp/>initialisation<sp/>below<sp/>is<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>no<sp/>exceptions<sp/>in<sp/>the<sp/>code<sp/>will<sp/>be<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fracSFref<sp/>=<sp/>fracMCref,<sp/>fracEffref<sp/>=<sp/>fracMCref;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSFref<sp/>=<sp/>m_hadronisationReference[indexSF],<sp/>indexEffref<sp/>=<sp/>m_hadronisationReference[indexEff];</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexSFref<sp/>&lt;<sp/>0<sp/>||<sp/>indexEffref<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>error:<sp/>generator-specific<sp/>corrections<sp/>requested<sp/>but<sp/>necessary<sp/>reference<sp/>containers<sp/>lacking<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_objects[indexSFref]-&gt;getResult(variables,<sp/>fracSFref);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_objects[indexEffref]-&gt;getResult(variables,<sp/>fracEffref);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(fracSFref<sp/>&gt;<sp/>0.<sp/>&amp;&amp;<sp/>fracEffref<sp/>&gt;<sp/>0.))<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>error:<sp/>invalid<sp/>reference<sp/>tag<sp/>weight<sp/>fraction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>MC<sp/>tag<sp/>weight<sp/>fraction<sp/>for<sp/>the<sp/>sample<sp/>we<sp/>need<sp/>to<sp/>reweight<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fracMCnew;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>Analysis::CalibrationStatus<sp/>effStatus<sp/>=<sp/>effContainer-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effStatus<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effStatus;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>GiveUp)<sp/>assert<sp/>(effStatus<sp/>!=<sp/>Analysis::kRange);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_otherStrategy<sp/>==<sp/>Flag)</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effStatus<sp/>==<sp/>Analysis::kRange)<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexEff);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>need<sp/>to<sp/>divide<sp/>by<sp/>this<sp/>quantity,<sp/>check<sp/>that<sp/>it<sp/>is<sp/>well-defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fracMCnew<sp/>&gt;<sp/>0.))<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>error:<sp/>null<sp/>fracMCnew<sp/>would<sp/>lead<sp/>to<sp/>invalid<sp/>operation&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_runEigenVectorMethod<sp/>&amp;&amp;<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>ERROR.<sp/>Trying<sp/>to<sp/>call<sp/>eigenvector<sp/>method<sp/>but<sp/>initialization<sp/>not<sp/>switched<sp/>on<sp/>in<sp/>b-tagging<sp/>.env<sp/>config<sp/>file.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Please<sp/>correct<sp/>your<sp/>.env<sp/>config<sp/>file<sp/>first.<sp/>Nominal<sp/>uncertainties<sp/>used.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*<sp/>eigenVariation=m_eigenVariationsMap[container];</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>eigenVariation)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>could<sp/>not<sp/>retrieve<sp/>eigenvector<sp/>variation,<sp/>while<sp/>it<sp/>should<sp/>have<sp/>been<sp/>there.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxVariations<sp/>=<sp/>(unc<sp/>==<sp/>SFEigen)<sp/>?<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2b5582e07ecfdd70a4f37bbef51e0079" kindref="member">getNumberOfEigenVariations</ref>()<sp/>:<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a6f803f49682617c5080aa1c4bac1b4c6" kindref="member">getNumberOfNamedVariations</ref>();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVariation<sp/>&gt;<sp/>maxVariations-1)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>asked<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>((unc<sp/>==<sp/>SFEigen)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;eigenvariation&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;named<sp/>variation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numVariation<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>overall<sp/>number<sp/>of<sp/>available<sp/>variations<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxVariations<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>up=0;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>down=0;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/>(unc<sp/>==<sp/>SFEigen)<sp/>?</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a31536647df599cd88199e053eb6994e4" kindref="member">getEigenvectorVariation</ref>(numVariation,up,down)<sp/>:</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a656102f186485b43406b1e40c4d00b86" kindref="member">getNamedVariation</ref>(numVariation,up,down);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isOK)<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>Eigenvector<sp/>object<sp/>is<sp/>there<sp/>but<sp/>cannot<sp/>retrieve<sp/>up<sp/>and<sp/>down<sp/>uncertainty<sp/>histograms.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&apos;extrapolation&apos;<sp/>uncertainty<sp/>(always<sp/>a<sp/>named<sp/>one)<sp/>needs<sp/>a<sp/>somewhat<sp/>special<sp/>treatment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate<sp/>=<sp/>SFNamed<sp/>?<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2be867ccf265171004a526aae71286bb" kindref="member">isExtrapolationVariation</ref>(numVariation)<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueUp;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueDown;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::CalibrationStatus<sp/>statusUp<sp/><sp/><sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>valueUp,<sp/><sp/>up,<sp/><sp/><sp/>extrapolate);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>Analysis::CalibrationStatus<sp/>statusDown<sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(variables,<sp/>valueDown,down,<sp/>extrapolate);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statusUp<sp/>==<sp/>Analysis::kError<sp/>||<sp/>statusDown<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>carry<sp/>out<sp/>the<sp/>rescaling.<sp/>Protect<sp/>against<sp/>unphysical<sp/>or<sp/>suspiciously<sp/>large<sp/>scale<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variationUp<sp/>=<sp/>valueUp<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variationDown<sp/>=<sp/>valueDown<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>step:<sp/>from<sp/>the<sp/>calibration<sp/>sample<sp/>to<sp/>its<sp/>reference<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>value<sp/>=<sp/>1.0<sp/>+<sp/>(value<sp/>-<sp/>1.0)<sp/>*<sp/>(fracMCref<sp/>/<sp/>fracSFref);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>step:<sp/>from<sp/>the<sp/>calibration<sp/>reference<sp/>sample<sp/>to<sp/>the<sp/>MC<sp/>object&apos;s<sp/>reference<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)<sp/>value<sp/>*=<sp/>(fracSFref<sp/>/<sp/>fracEffref);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Third<sp/>step:<sp/>from<sp/>the<sp/>MC<sp/>object&apos;s<sp/>reference<sp/>sample<sp/>to<sp/>the<sp/>MC<sp/>sample<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>value<sp/>=<sp/>1.0<sp/>+<sp/>(value<sp/>-<sp/>1.0)<sp/>*<sp/>(fracEffref<sp/>/<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>all<sp/>transformations<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>itself<sp/>are<sp/>linear,<sp/>the<sp/>transformation<sp/>of<sp/>the<sp/>variations<sp/>is<sp/>simpler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>(fracMCref<sp/>/<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variationUp<sp/><sp/><sp/>*=<sp/>f;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variationDown<sp/>*=<sp/>f;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>(fracSFref<sp/>/<sp/>fracEffref);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variationUp<sp/><sp/><sp/>*=<sp/>f;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variationDown<sp/>*=<sp/>f;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>valueUp<sp/><sp/><sp/>=<sp/>value<sp/>+<sp/>variationUp;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>valueDown<sp/>=<sp/>value<sp/>+<sp/>variationDown;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueUp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueUp<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueUp<sp/>&gt;<sp/>m_maxTagWeight)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueUp<sp/>=<sp/>m_maxTagWeight;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueDown<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueDown<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueDown<sp/>&gt;<sp/>m_maxTagWeight)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueDown<sp/>=<sp/>m_maxTagWeight;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/><sp/>=<sp/>valueUp;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>valueDown;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>statusUp;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>eigenvector<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Proceed<sp/>with<sp/>no-eigenvector<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stat(0);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Statistical)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" kindref="member">getStatUncertainty</ref>(variables,<sp/>stat)<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>covariance<sp/>matrix!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>Analysis::UncertaintyResult<sp/>uncertaintyResult(0,0);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Systematic)<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" kindref="member">getSystUncertainty</ref>(variables,<sp/>uncertaintyResult)<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getWeightScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>systematic<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>combinedUncertainty(stat,<sp/>uncertaintyResult);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>carry<sp/>out<sp/>the<sp/>rescaling.<sp/>Again<sp/>protect<sp/>against<sp/>unphysical<sp/>or<sp/>suspiciously<sp/>large<sp/>scale<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>step:<sp/>from<sp/>the<sp/>calibration<sp/>sample<sp/>to<sp/>its<sp/>reference<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>value<sp/>=<sp/>1.0<sp/>+<sp/>(value<sp/>-<sp/>1.0)<sp/>*<sp/>(fracMCref<sp/>/<sp/>fracSFref);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>step:<sp/>from<sp/>the<sp/>calibration<sp/>reference<sp/>sample<sp/>to<sp/>the<sp/>MC<sp/>object&apos;s<sp/>reference<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)<sp/>value<sp/>*=<sp/>(fracSFref<sp/>/<sp/>fracEffref);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Third<sp/>step:<sp/>from<sp/>the<sp/>MC<sp/>object&apos;s<sp/>reference<sp/>sample<sp/>to<sp/>the<sp/>MC<sp/>sample<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>value<sp/>=<sp/>1.0<sp/>+<sp/>(value<sp/>-<sp/>1.0)<sp/>*<sp/>(fracEffref<sp/>/<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>m_maxTagWeight)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>m_maxTagWeight;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(indexSF,<sp/>TagWeight);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>all<sp/>transformations<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>itself<sp/>are<sp/>linear,<sp/>the<sp/>transformation<sp/>of<sp/>the<sp/>uncertainty<sp/>is<sp/>simpler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useTopologyRescaling)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>uncertainty<sp/>*=<sp/>(fracMCref<sp/>/<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>uncertainty<sp/>*=<sp/>(fracSFref<sp/>/<sp/>fracEffref);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/>std::max(0.,<sp/>value);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>uncertainty;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Select&quot;<sp/>the<sp/>status<sp/>code<sp/>for<sp/>the<sp/>actual<sp/>calibration<sp/>object<sp/>(it<sp/>is<sp/>subject<sp/>to<sp/>more<sp/>constraints)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::checkWeightScaleFactors(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexSF,</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexEff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1719"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>tag<sp/>weight<sp/>scale<sp/>factors<sp/>that<sp/>would<sp/>result<sp/>from<sp/>the<sp/>combination<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>provided<sp/>scale<sp/>factor<sp/>and<sp/>MC<sp/>tag<sp/>weight<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>way<sp/>this<sp/>is<sp/>done<sp/>is<sp/>by<sp/>determining<sp/>the<sp/>binning<sp/>that<sp/>would<sp/>apply<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>combination<sp/>of<sp/>the<sp/>two<sp/>individual<sp/>inputs,<sp/>and<sp/>then<sp/>by<sp/>explicitly<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>factors<sp/>in<sp/>each<sp/>of<sp/>these<sp/>resulting<sp/>bins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>&gt;::const_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>std::find(m_checkedWeightScaleFactors.begin(),<sp/>m_checkedWeightScaleFactors.end(),</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(indexSF,<sp/>indexEff));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_checkedWeightScaleFactors.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>only<sp/>histogram<sp/>containers<sp/>are<sp/>involved<sp/>here<sp/>(this<sp/>should<sp/>be<sp/>the<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>at<sp/>least<sp/>a<sp/>strict<sp/>tag<sp/>weight<sp/>binning<sp/>should<sp/>be<sp/>applied).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataHistogramContainer*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objects[indexSF]);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>error:<sp/>container<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nameFromIndex(indexSF)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>error:<sp/>no<sp/>MCreference<sp/>histogram<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nameFromIndex(indexSF)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataHistogramContainer*<sp/>effContainer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objects[indexEff]);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>effContainer)<sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>error:<sp/>container<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nameFromIndex(indexEff)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>variable<sp/>types<sp/>and<sp/>corresponding<sp/>bin<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>vars<sp/><sp/><sp/><sp/>=<sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" kindref="member">getVariableTypes</ref>();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>effVars<sp/>=<sp/>effContainer-&gt;getVariableTypes();</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>corresponding<sp/>bin<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>boundaries,<sp/>effBoundaries,<sp/>mergedBoundaries;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>vars.size();<sp/>++t)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries[vars[t]]<sp/>=<sp/>container-&gt;getBinBoundaries(vars[t]);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>effVars.size();<sp/>++t)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>effBoundaries[effVars[t]]<sp/>=<sp/>effContainer-&gt;getBinBoundaries(effVars[t]);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>handle<sp/>|eta|<sp/>versus<sp/>eta<sp/>differences,<sp/>by<sp/>transforming<sp/>to<sp/>the<sp/>latter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries.find(CalibrationDataContainer::kEta)<sp/>==<sp/>boundaries.end()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boundaries.find(CalibrationDataContainer::kAbsEta)<sp/>!=<sp/>boundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries[CalibrationDataContainer::kEta]<sp/>=<sp/>boundaries[CalibrationDataContainer::kAbsEta];</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries.erase(CalibrationDataContainer::kAbsEta);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effBoundaries.find(CalibrationDataContainer::kEta)<sp/>==<sp/>effBoundaries.end()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effBoundaries.find(CalibrationDataContainer::kAbsEta)<sp/>!=<sp/>effBoundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>effBoundaries[CalibrationDataContainer::kEta]<sp/>=<sp/>effBoundaries[CalibrationDataContainer::kAbsEta];</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>effBoundaries.erase(CalibrationDataContainer::kAbsEta);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries.find(CalibrationDataContainer::kEta)<sp/>!=<sp/>boundaries.end()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effBoundaries.find(CalibrationDataContainer::kEta)<sp/>!=<sp/>effBoundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>v<sp/>=<sp/>boundaries[CalibrationDataContainer::kEta];</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>vEff<sp/>=<sp/>effBoundaries[CalibrationDataContainer::kEta];</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[0]<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>vEff[0]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case,<sp/>supplement<sp/>the<sp/>positive<sp/>entries<sp/>in<sp/>vEff<sp/>with<sp/>their<sp/>negative<sp/>analogues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vtmp(vEff);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;double&gt;::iterator<sp/>it<sp/>=<sp/>vtmp.begin();<sp/>it<sp/>!=<sp/>vtmp.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>&gt;<sp/>0)<sp/>vEff.insert(vEff.begin(),<sp/>-(*it));</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[0]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vEff[0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case,<sp/>supplement<sp/>the<sp/>positive<sp/>entries<sp/>in<sp/>v<sp/>with<sp/>their<sp/>negative<sp/>analogues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vtmp(v);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;double&gt;::iterator<sp/>it<sp/>=<sp/>vtmp.begin();<sp/>it<sp/>!=<sp/>vtmp.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>&gt;<sp/>0)<sp/>v.insert(v.begin(),<sp/>-(*it));</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>the<sp/>individual<sp/>sets<sp/>of<sp/>boundaries<sp/>have<sp/>been<sp/>determined,<sp/>merge<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>vars.size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effBoundaries.find(vars[t])<sp/>==<sp/>effBoundaries.end())</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variables<sp/>not<sp/>present<sp/>in<sp/>the<sp/>efficiency<sp/>object<sp/>can<sp/>go<sp/>in<sp/>unmodified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergedBoundaries[vars[t]]<sp/>=<sp/>boundaries[vars[t]];</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>the<sp/>boundaries<sp/>for<sp/>variables<sp/>existing<sp/>in<sp/>both<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>MC<sp/>array<sp/>as<sp/>a<sp/>starting<sp/>point,<sp/>as<sp/>it&apos;s<sp/>likely<sp/>to<sp/>be<sp/>the<sp/>longest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergedBoundaries[vars[t]]<sp/>=<sp/>effBoundaries[vars[t]];</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;double&gt;::iterator<sp/>it<sp/>=<sp/>boundaries[vars[t]].begin();</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>boundaries[vars[t]].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;::iterator<sp/>itcmp<sp/>=<sp/>mergedBoundaries[vars[t]].begin();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>until<sp/>we&apos;ve<sp/>found<sp/>a<sp/>value<sp/>in<sp/>the<sp/>target<sp/>array<sp/>equal<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>larger<sp/>than<sp/>the<sp/>given<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" kindref="member">CalibrationDataContainer::isNearlyEqual</ref>(*itcmp,<sp/>*it))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itcmp<sp/>&lt;<sp/>*it<sp/>&amp;&amp;<sp/>itcmp<sp/>!=<sp/>mergedBoundaries[vars[t]].end())<sp/>++itcmp;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>if<sp/>the<sp/>values<sp/>are<sp/>&quot;nearly<sp/>identical&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" kindref="member">CalibrationDataContainer::isNearlyEqual</ref>(*itcmp,<sp/>*it))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>insert<sp/>the<sp/>given<sp/>element<sp/>(this<sp/>can<sp/>mean<sp/>adding<sp/>to<sp/>the<sp/>end)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>mergedBoundaries[vars[t]].insert(itcmp,<sp/>*it);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Variables<sp/>not<sp/>present<sp/>in<sp/>the<sp/>scale<sp/>factor<sp/>object<sp/>still<sp/>need<sp/>to<sp/>go<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>effVars.size();<sp/>++t)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries.find(effVars[t])<sp/>==<sp/>boundaries.end())</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergedBoundaries[effVars[t]]<sp/>=<sp/>effBoundaries[effVars[t]];</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Carry<sp/>out<sp/>a<sp/>rudimentary<sp/>cross-check<sp/>of<sp/>the<sp/>tag<sp/>weight<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>binning<sp/>used<sp/>for<sp/>the<sp/>scale<sp/>factor<sp/>and<sp/>MC<sp/>objects<sp/>should<sp/>be<sp/>identical).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries.find(CalibrationDataContainer::kTagWeight)<sp/>==<sp/>boundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>tag<sp/>weight<sp/>axis<sp/>found<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(indexSF)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(effBoundaries.find(CalibrationDataContainer::kTagWeight)<sp/>==<sp/>effBoundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>tag<sp/>weight<sp/>axis<sp/>found<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(indexEff)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries[CalibrationDataContainer::kTagWeight].size()<sp/>!=</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effBoundaries[CalibrationDataContainer::kTagWeight].size())<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;different<sp/>tag<sp/>weight<sp/>binning<sp/>for<sp/>objects<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(indexSF)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>v<sp/>=<sp/>boundaries[CalibrationDataContainer::kTagWeight];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>0;<sp/>ib<sp/>&lt;<sp/>v.size()-1;<sp/>++ib)<sp/>cerr<sp/>&lt;&lt;<sp/>v[ib]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>v[v.size()-1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(indexEff)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>effBoundaries[CalibrationDataContainer::kTagWeight];</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>0;<sp/>ib<sp/>&lt;<sp/>v.size()-1;<sp/>++ib)<sp/>cerr<sp/>&lt;&lt;<sp/>v[ib]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>v[v.size()-1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>do<sp/>not<sp/>match!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>(possibly)<sp/>dummy<sp/>vectors<sp/>exist<sp/>for<sp/>_all_<sp/>known<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>is<sp/>a<sp/>mere<sp/>technicality<sp/>allowing<sp/>to<sp/>loop<sp/>over<sp/>all<sp/>variables<sp/>explicitly).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mergedBoundaries.find(CalibrationDataContainer::kPt)<sp/>==<sp/>mergedBoundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>v;<sp/>v.push_back(20.);<sp/>v.push_back(300.);<sp/>mergedBoundaries[CalibrationDataContainer::kPt]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mergedBoundaries.find(CalibrationDataContainer::kEta)<sp/>==<sp/>mergedBoundaries.end())<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>v;<sp/>v.push_back(-2.5);<sp/>v.push_back(2.5);<sp/>mergedBoundaries[CalibrationDataContainer::kEta]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>carry<sp/>out<sp/>the<sp/>cross-check<sp/>that<sp/>all<sp/>this<sp/>is<sp/>about:<sp/>recompute<sp/>the<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>each<sp/>pseudo-bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataInterfaceROOT::checkWeightScaleFactors:<sp/>cross-checking<sp/>scale<sp/>factors<sp/>for<sp/>objects<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nameFromIndex(indexSF)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameFromIndex(indexEff)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(100)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>CalibrationDataVariables<sp/>x;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>vPt<sp/>=<sp/>mergedBoundaries[CalibrationDataContainer::kPt],</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vEta<sp/>=<sp/>mergedBoundaries[CalibrationDataContainer::kEta],</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTagWeight<sp/>=<sp/>mergedBoundaries[CalibrationDataContainer::kTagWeight];</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipt<sp/>=<sp/>0;<sp/>ipt<sp/>&lt;<sp/>vPt.size()-1;<sp/>++ipt)<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x.jetPt<sp/>=<sp/>(vPt[ipt]<sp/>+<sp/>vPt[ipt+1])<sp/>*<sp/>500.;<sp/></highlight><highlight class="comment">//<sp/>account<sp/>for<sp/>MeV<sp/>-&gt;<sp/>GeV<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ieta<sp/>=<sp/>0;<sp/>ieta<sp/>&lt;<sp/>vEta.size()-1;<sp/>++ieta)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>x.jetEta<sp/>=<sp/>(vEta[ieta]<sp/>+<sp/>vEta[ieta+1])<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iwt<sp/>=<sp/>0;<sp/>iwt<sp/>&lt;<sp/>vTagWeight.size()-1;<sp/>++iwt)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x.jetTagWeight<sp/>=<sp/>(vTagWeight[iwt]<sp/>+<sp/>vTagWeight[iwt+1])<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>central<sp/>scale<sp/>factor<sp/>value<sp/>and<sp/>the<sp/>old<sp/>and<sp/>new<sp/>MC<sp/>tag<sp/>weight<sp/>fractions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>container-&gt;getResult(x,<sp/>value);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Analysis::UncertaintyResult<sp/>uncertaintyResult(0,0);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>container-&gt;getUncertainty(</highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>uncertaintyResult);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fracMCref<sp/>=<sp/>uncertaintyResult.first;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fracMCnew;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effContainer-&gt;getResult(x,<sp/>fracMCnew);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>new<sp/>scale<sp/>factor<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fracMCnew<sp/>&gt;<sp/>0.))<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tfor<sp/>(pt=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetPt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,eta=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetEta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,tagweight=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetTagWeight</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>invalid<sp/>new<sp/>MC<sp/>fraction:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fracMCnew<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newvalue<sp/>=<sp/>1.0<sp/>+<sp/>(value<sp/>-<sp/>1.0)<sp/>*<sp/>fracMCref/fracMCnew;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newvalue<sp/>&lt;=<sp/>0<sp/>||<sp/>newvalue<sp/>&gt;<sp/>m_maxTagWeight)</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tfor<sp/>(pt=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetPt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,eta=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetEta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,tagweight=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.jetTagWeight</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>old<sp/>(value=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,MC=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fracMCref<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>new<sp/>(value=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>newvalue<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,MC=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fracMCnew<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>m_checkedWeightScaleFactors.push_back(std::make_pair(indexSF,<sp/>indexEff));</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::checkAbsEta(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>variables,</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1890"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>jet<sp/>eta<sp/>value<sp/>is<sp/>outside<sp/>the<sp/>range<sp/>of<sp/>validity,<sp/>subject<sp/>to<sp/>the<sp/>strategy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>in<sp/>the<sp/>configuration<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_absEtaStrategy<sp/>==<sp/>Ignore)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_absEtaStrategy)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GiveUp:</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!(std::fabs(variables.jetEta)<sp/>&gt;<sp/>m_maxAbsEta));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Flag:</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(variables.jetEta)<sp/>&gt;<sp/>m_maxAbsEta)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CalibrationDataInterfaceROOT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;increaseCounter(index,<sp/>Eta);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a983981840a3cc6fd35b1030bd1de3e0a" kindref="member">Analysis::CalibrationDataInterfaceROOT::nameFromIndex</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1908"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>object<sp/>name<sp/>corresponding<sp/>to<sp/>the<sp/>given<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;std::string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_objectIndices.begin();</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_objectIndices.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second<sp/>==<sp/>index)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>never<sp/>happen..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::increaseCounter(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutOfBoundsType<sp/>oob)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>method<sp/>bumping<sp/>the<sp/>relevant<sp/>counter<sp/>out-of-bounds<sp/>counter<sp/>for<sp/>the<sp/>specified<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>oob:<sp/><sp/><sp/><sp/>further<sp/>classification<sp/>of<sp/>out-of-bounds<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>index:<sp/><sp/>object<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>vectors<sp/>are<sp/>appropriately<sp/>dimensioned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>m_mainCounters.size())<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minsize<sp/>=<sp/>(index<sp/>==<sp/>0)<sp/>?<sp/>2<sp/>:<sp/>2*index;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainCounters.resize(minsize,<sp/>0);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>m_etaCounters.resize(minsize,<sp/>0);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>m_extrapolatedCounters.resize(minsize,<sp/>0);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(oob)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Main:</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainCounters[index]++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Eta:</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>m_etaCounters[index]++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Extrapolated:</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>m_extrapolatedCounters[index]++;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal">std::vector&lt;string&gt;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">Analysis::CalibrationDataInterfaceROOT::listScaleFactorUncertainties</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>author,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>named)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1953"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>sources<sp/>of<sp/>uncertainty<sp/>relevant<sp/>for<sp/>the<sp/>given<sp/>scale<sp/>factor<sp/>calibration<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>named:<sp/><sp/><sp/>if<sp/>false,<sp/>an<sp/>unsorted<sp/>list<sp/>of<sp/>sources<sp/>of<sp/>uncertainties<sp/>will<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>true,<sp/>only<sp/>&apos;named&apos;<sp/>uncertainties<sp/>will<sp/>be<sp/>returned,<sp/>and<sp/>the<sp/>position<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>vector<sp/>that<sp/>is<sp/>the<sp/>return<sp/>value<sp/>determines<sp/>the<sp/>&apos;numVariation&apos;<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>is<sp/>to<sp/>be<sp/>used<sp/>if<sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>retrieved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;listScaleFactorUncertainties:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>dummy;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listScaleFactorUncertainties(index,<sp/>named);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal">std::vector&lt;string&gt;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">Analysis::CalibrationDataInterfaceROOT::listScaleFactorUncertainties</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>named)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1980"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>sources<sp/>of<sp/>uncertainty<sp/>relevant<sp/>for<sp/>the<sp/>given<sp/>scale<sp/>factor<sp/>calibration<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/>index<sp/>to<sp/>scale<sp/>factor<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>named:<sp/><sp/><sp/>if<sp/>false,<sp/>an<sp/>unsorted<sp/>list<sp/>of<sp/>sources<sp/>of<sp/>uncertainties<sp/>will<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>true,<sp/>only<sp/>&apos;named&apos;<sp/>uncertainties<sp/>will<sp/>be<sp/>returned,<sp/>and<sp/>the<sp/>position<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>vector<sp/>that<sp/>is<sp/>the<sp/>return<sp/>value<sp/>determines<sp/>the<sp/>&apos;numVariation&apos;<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>is<sp/>to<sp/>be<sp/>used<sp/>if<sp/>named<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>retrieved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>dummy;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[index];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(named)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>out<sp/>which<sp/>uncertainties<sp/>are<sp/>excluded<sp/>from<sp/>eigenvector<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_runEigenVectorMethod)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*<sp/>eigenVariation=m_eigenVariationsMap[container];</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>unordered<sp/>=<sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa90160739463b564b4be60279b3b17c6" kindref="member">listNamedVariations</ref>();</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>ordered(unordered.size());</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unordered.size();<sp/>++i)</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>ordered[eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a457f87f18fd4c788d16738787009c8bc" kindref="member">getNamedVariationIndex</ref>(unordered[i])]<sp/>=<sp/>unordered[i];</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; accessible to this object. A few uncertainty...">listUncertainties</ref>();</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a85f69f76c73608b407b7c879bbb397e1" kindref="member" tooltip="retrieve the number of variations relevant to the calibration object. The Uncertainty...">Analysis::CalibrationDataInterfaceROOT::getNumVariations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2015"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>number<sp/>of<sp/>eigenvector<sp/>variations<sp/>or<sp/>named<sp/>variations<sp/>relevant<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>scale<sp/>factor<sp/>calibration<sp/>object,<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>to<sp/>SFEigen<sp/>or<sp/>SFNamed<sp/>for<sp/>the<sp/>cases<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenvector<sp/>variations<sp/>or<sp/>named<sp/>variations,<sp/>respectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>index))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getNumVariations(index,<sp/>unc);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a85f69f76c73608b407b7c879bbb397e1" kindref="member" tooltip="retrieve the number of variations relevant to the calibration object. The Uncertainty...">Analysis::CalibrationDataInterfaceROOT::getNumVariations</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2035"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>number<sp/>of<sp/>eigenvector<sp/>variations<sp/>or<sp/>named<sp/>variations<sp/>relevant<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>scale<sp/>factor<sp/>calibration<sp/>object,<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>index:<sp/><sp/><sp/>index<sp/>to<sp/>calibration<sp/>scale<sp/>factor<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>to<sp/>SFEigen<sp/>or<sp/>SFNamed<sp/>for<sp/>the<sp/>cases<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenvector<sp/>variations<sp/>or<sp/>named<sp/>variations,<sp/>respectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[index];</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*<sp/>eigenVariation=m_eigenVariationsMap[container];</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>SFEigen)<sp/>?</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2b5582e07ecfdd70a4f37bbef51e0079" kindref="member">getNumberOfEigenVariations</ref>()<sp/>:</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a6f803f49682617c5080aa1c4bac1b4c6" kindref="member">getNumberOfNamedVariations</ref>();</highlight></codeline>
<codeline lineno="2050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a57b8f48651644a2627f2683c45fe5465" kindref="member">Analysis::CalibrationDataInterfaceROOT::getBinnedScaleFactors</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2057"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>histogrammed<sp/>calibration<sp/>scale<sp/>factors,<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getBinnedScaleFactors:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>CalibrationDataHistogramContainer*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objects[index]);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(container)<sp/>?<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TObject*</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1af53a0f82e2dca47f6eddf160343f2900" kindref="member">Analysis::CalibrationDataInterfaceROOT::getMCEfficiencyObject</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2081"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>central<sp/>values<sp/>object<sp/>for<sp/>the<sp/>MC<sp/>efficiences,<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>object<sp/>returned<sp/>can<sp/>be<sp/>either<sp/>a<sp/>TH1<sp/>or<sp/>a<sp/>TF1;<sp/>it<sp/>is<sp/>up<sp/>to<sp/>the<sp/>user<sp/>to<sp/>determine<sp/>which.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/>index<sp/>to<sp/>the<sp/>efficiency<sp/>map<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>index,<sp/>mapIndex))<sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getMCEfficiencyObject:<sp/>unable<sp/>to<sp/>find<sp/>efficiency<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapIndex)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>m_objects[index];</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(container)<sp/>?<sp/>container-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>retrieval<sp/>of<sp/>shifted<sp/>calibration<sp/>object<sp/>===========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1af74672b8e5ea2aadbe0b211161978cec" kindref="member">Analysis::CalibrationDataInterfaceROOT::getShiftedScaleFactors</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc,</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigmas)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2110"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>histogrammed<sp/>calibration<sp/>scale<sp/>factors,<sp/>identifying<sp/>the<sp/>object<sp/>by<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>with<sp/>the<sp/>scale<sp/>factors<sp/>shifted<sp/>by<sp/>the<sp/>uncertainties<sp/>due<sp/>to<sp/>the<sp/>given<sp/>source<sp/>of<sp/>uncertainty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(where<sp/>bin-to-bin<sp/>correlations<sp/>are<sp/>accounted<sp/>for,<sp/>i.e.,<sp/>shifts<sp/>may<sp/>be<sp/>either<sp/>positive<sp/>or<sp/>negative).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>uncertainty<sp/>to<sp/>consider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>sigmas:<sp/><sp/>number<sp/>of<sp/>standard<sp/>deviations<sp/>by<sp/>which<sp/>to<sp/>shift<sp/>the<sp/>scale<sp/>factor<sp/>central<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>quick<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/>||<sp/>unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/>||<sp/>unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>||<sp/>unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>null<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getShiftedScaleFactors:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>CalibrationDataHistogramContainer*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objects[index]);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>TH1*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>TH1*<sp/>hunc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(unc.c_str()));</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>sanity<sp/>check...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!<sp/>hunc)<sp/>||<sp/>(!<sp/>result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hunc-&gt;GetDimension()<sp/>!=<sp/>result-&gt;GetDimension()<sp/>||<sp/>hunc-&gt;GetNbinsX()<sp/>!=<sp/>result-&gt;GetNbinsX()<sp/>||</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hunc-&gt;GetNbinsX()<sp/>!=<sp/>result-&gt;GetNbinsX()<sp/>||<sp/>hunc-&gt;GetNbinsX()<sp/>!=<sp/>result-&gt;GetNbinsX())</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>check<sp/>that<sp/>the<sp/>uncertainty<sp/>is<sp/>to<sp/>be<sp/>treated<sp/>as<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(for<sp/>the<sp/>variation<sp/>is<sp/>applied<sp/>coherently,<sp/>which<sp/>isn&apos;t<sp/>appropriate<sp/>for<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>aren&apos;t<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container-&gt;isBinCorrelated(unc))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>everything<sp/>is<sp/>consistent,<sp/>the<sp/>actual<sp/>operation<sp/>simply<sp/>consists<sp/>of<sp/>adding<sp/>histograms...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>std::string<sp/>name(container-&gt;GetName());<sp/>name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">;<sp/>name<sp/>+=<sp/>unc;<sp/>name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/>TH1*<sp/>shifted<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result-&gt;Clone(name.c_str()));</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>shifted-&gt;Add(hunc,<sp/>sigmas);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shifted;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>put<sp/>some<sp/>utility<sp/>functions<sp/>here<sp/>===================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>(diagonal)<sp/>covariance<sp/>matrix<sp/>for<sp/>the<sp/>statistical<sp/>uncertainties<sp/>on<sp/>the<sp/>&quot;ref&quot;<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>getStatCovarianceMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hist)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nbinx<sp/>=<sp/>hist-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>hist-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>hist-&gt;GetNbinsZ()+2;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>rows<sp/>=<sp/>nbinx;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>&gt;<sp/>1)<sp/>rows<sp/>*=<sp/>nbiny;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>&gt;<sp/>2)<sp/>rows<sp/>*=<sp/>nbinz;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrixDSym<sp/>stat(rows);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx;<sp/>++binx)</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny;<sp/>++biny)</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hist-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat(bin,<sp/>bin)<sp/>=<sp/>err*err;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>covariance<sp/>matrix<sp/>assuming<sp/>that<sp/>histogram<sp/>&quot;unc&quot;<sp/>contains<sp/>systematic<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pertaining<sp/>to<sp/>the<sp/>&quot;ref&quot;<sp/>results,<sp/>and<sp/>that<sp/>the<sp/>uncertainties<sp/>are<sp/>fully<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(unless<sp/>option<sp/>&quot;doCorrelated&quot;<sp/>is<sp/>false,<sp/>in<sp/>which<sp/>bins<sp/>are<sp/>assumed<sp/>uncorrelated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>getSystCovarianceMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>ref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>unc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doCorrelated)<sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nbinx<sp/>=<sp/>ref-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>ref-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>ref-&gt;GetNbinsZ()+2;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>rows<sp/>=<sp/>nbinx;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref-&gt;GetDimension()<sp/>&gt;<sp/>1)<sp/>rows<sp/>*=<sp/>nbiny;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref-&gt;GetDimension()<sp/>&gt;<sp/>2)<sp/>rows<sp/>*=<sp/>nbinz;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrixDSym<sp/>cov(rows);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Carry<sp/>out<sp/>a<sp/>minimal<sp/>consistency<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc-&gt;GetNbinsX()+2<sp/>!=<sp/>nbinx<sp/>||<sp/>unc-&gt;GetNbinsY()+2<sp/>!=<sp/>nbiny<sp/>||<sp/>unc-&gt;GetNbinsZ()+2<sp/>!=<sp/>nbinz</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>unc-&gt;GetDimension()<sp/>!=<sp/>ref-&gt;GetDimension())<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getSystCovarianceMatrix:<sp/>inconsistency<sp/>found<sp/>in<sp/>histograms<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ref-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>unc-&gt;GetName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>uncertainties<sp/>not<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>doCorrelated)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx;<sp/>++binx)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny;<sp/>++biny)</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>ref-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,bin)<sp/>=<sp/>err*err;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx;<sp/>++binx)</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny;<sp/>++biny)</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>ref-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx2<sp/>=<sp/>1;<sp/>binx2<sp/>&lt;<sp/>nbinx;<sp/>++binx2)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny2<sp/>=<sp/>1;<sp/>biny2<sp/>&lt;<sp/>nbiny;<sp/>++biny2)</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz2<sp/>=<sp/>1;<sp/>binz2<sp/>&lt;<sp/>nbinz;<sp/>++binz2)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin2<sp/>=<sp/>ref-&gt;GetBin(binx2,<sp/>biny2,<sp/>binz2);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err2<sp/>=<sp/>ref-&gt;GetBinError(bin2);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,<sp/>bin2)<sp/>=<sp/>err*err2;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>retrieval<sp/>of<sp/>calibration<sp/>covariance<sp/>matrix<sp/>========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal">TMatrixDSym<sp/></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a0d84c38698522ead60a95d4e43d86d0b" kindref="member">Analysis::CalibrationDataInterfaceROOT::getScaleFactorCovarianceMatrix</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>author,</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2229"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>scale<sp/>factor<sp/>covariance<sp/>matrix<sp/>for<sp/>the<sp/>given<sp/>calibration<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>deprecated<sp/>since<sp/>its<sp/>functionality<sp/>is<sp/>duplicated<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CalibrationDataEigenVariations<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>uncertainty<sp/>to<sp/>consider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>issues<sp/>with<sp/>the<sp/>specified<sp/>input<sp/>as<sp/>early<sp/>as<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>dummy;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/>||<sp/>unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/>||<sp/>unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>retrieveCalibrationIndex<sp/>(label,<sp/>OP,<sp/>author,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactorCovarianceMatrix:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fullName(author,<sp/>OP,<sp/>label,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>CalibrationDataHistogramContainer*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objects[index]);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!container)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration<sp/>and<sp/>its<sp/>axes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/>TH1*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>result)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>varResult<sp/>=<sp/>CalibrationDataContainer::getVariableTypes(result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;normal&quot;<sp/>case:<sp/>single<sp/>source<sp/>of<sp/>uncertainty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getStatCovarianceMatrix(result);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1*<sp/>hunc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(unc.c_str()));</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hunc)<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactorCovarianceMatrix:<sp/>no<sp/>uncertainty<sp/>object<sp/>found<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;corresponding<sp/>to<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>unc<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getSystCovarianceMatrix(result,<sp/>hunc,<sp/>container-&gt;isBinCorrelated(unc));</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case:<sp/>complete<sp/>covariance<sp/>matrix.<sp/>This<sp/>is<sp/>to<sp/>be<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>sum<sp/>over<sp/>all<sp/>individual<sp/>contributions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>treat<sp/>the<sp/>statistics<sp/>separately<sp/>(as<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>cov<sp/>=<sp/>getStatCovarianceMatrix(result);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>loop<sp/>through<sp/>the<sp/>list<sp/>of<sp/>(other)<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>uncs<sp/>=<sp/>container-&gt;listUncertainties();</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>uncs.size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>hunc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(container-&gt;GetValue(uncs[t].c_str()));</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>cov<sp/>+=<sp/>getSystCovarianceMatrix(result,<sp/>hunc,<sp/>container-&gt;isBinCorrelated(uncs[t]));</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad3928d877f3c25a99add738ea8ff65d0" kindref="member">Analysis::CalibrationDataInterfaceROOT::initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>jetauthor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc)<sp/></highlight></codeline>
<codeline lineno="2293"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Preload<sp/>objects<sp/>necessary<sp/>so<sp/>that<sp/>the<sp/>input<sp/>calibration<sp/>file<sp/>can<sp/>be<sp/>closed.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>functionality<sp/>is<sp/>only<sp/>needed<sp/>when<sp/>using<sp/>PROOF.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!m_fileEff)||(!m_fileSF))<sp/>{<sp/></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;initialize<sp/>can<sp/>only<sp/>be<sp/>called<sp/>once<sp/>per<sp/>CalibrationDataInterfaceROOT<sp/>object&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;initializing<sp/>BTagCalibrationDataInterfaceROOT<sp/>for<sp/>PROOF<sp/>with<sp/>jetAuthor<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>jetauthor<sp/><sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>tagger<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_taggerName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>operating<sp/>point<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OP<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>uncertainty<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>unc<sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>quark<sp/>flavours<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>label;<sp/></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>label.push_back(</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>label.push_back(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>label.push_back(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>label.push_back(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>CalibrationDataVariables<sp/>BTagVars;<sp/></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>BTagVars.jetAuthor<sp/>=<sp/>jetauthor;<sp/></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>BTagVars.jetPt<sp/><sp/>=<sp/>100000.;<sp/></highlight><highlight class="comment">//Irrelevant,<sp/>just<sp/>has<sp/>to<sp/>be<sp/>valid<sp/>to<sp/>retrieve<sp/>objects<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>BTagVars.jetEta<sp/>=<sp/>1.5;<sp/></highlight><highlight class="comment">//Irrelevant,<sp/>just<sp/>has<sp/>to<sp/>be<sp/>valid<sp/>to<sp/>retrieve<sp/>objects<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;::iterator<sp/>flav<sp/>=<sp/>label.begin();<sp/></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>flav!=label.end();<sp/>flav++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>BTagCalibResult;<sp/></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>BTagCalibResult<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(BTagVars,(*flav),<sp/>OP,<sp/>unc);<sp/></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>BTagCalibMCEff;<sp/></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>BTagCalibMCEff<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(BTagVars,(*flav),<sp/>OP,<sp/>unc);<sp/></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_fileEff<sp/>!=<sp/>m_fileSF)<sp/>{<sp/></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>m_fileEff-&gt;Close();<sp/></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileEff;<sp/></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>m_fileSF-&gt;Close();<sp/></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileSF;<sp/></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>m_fileEff<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//prevents<sp/>repeat<sp/>deletion<sp/>in<sp/>destructor<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>m_fileSF<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//prevents<sp/>repeat<sp/>deletion<sp/>in<sp/>destructor<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*</highlight></codeline>
<codeline lineno="2338"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::retrieveContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>cntname,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSF)</highlight></codeline>
<codeline lineno="2339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>retrieve<sp/>the<sp/>given<sp/>container<sp/>from<sp/>file.<sp/>Note<sp/>that<sp/>also<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;hadronisation&quot;<sp/>reference<sp/>is<sp/>retrieved<sp/>(if<sp/>possible<sp/>and<sp/>not<sp/>yet<sp/>done).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>dir:<sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>directory<sp/>containing<sp/>the<sp/>requested<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cntname:<sp/>name<sp/>of<sp/>the<sp/>requested<sp/>container<sp/>itself<sp/>(not<sp/>including<sp/>the<sp/>full<sp/>path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>isSF:<sp/><sp/><sp/><sp/>set<sp/>to<sp/>false<sp/>(true)<sp/>if<sp/>the<sp/>object<sp/>is<sp/>to<sp/>be<sp/>retrieved<sp/>from<sp/>the<sp/>MC<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>(the<sp/>calibration<sp/>scale<sp/>factor<sp/>file).<sp/>Note<sp/>that<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/>objects<sp/>will<sp/>always<sp/>be<sp/>retrieved<sp/>from<sp/>the<sp/>calibration<sp/>scale<sp/>factor<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>full<sp/>object<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>cntname;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>object<sp/>cannot<sp/>be<sp/>found,<sp/>then<sp/>each<sp/>call<sp/>will<sp/>result<sp/>in<sp/>a<sp/>new<sp/>attempt<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>object<sp/>from<sp/>the<sp/>ROOT<sp/>file.<sp/>Hopefully<sp/>this<sp/>will<sp/>not<sp/>happen<sp/>too<sp/>often...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>m_objectIndices[name]<sp/>=<sp/>m_objects.size();</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CalibrationDataContainer*<sp/>cnt<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>dynamic_cast&lt;CalibrationDataContainer*&gt;((isSF<sp/>?<sp/>m_fileSF<sp/>:<sp/>m_fileEff)<sp/>-&gt;Get(name.c_str()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>cnt;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>(isSF<sp/>?<sp/>m_fileSF<sp/>:<sp/>m_fileEff)-&gt;GetObject(name.c_str(),<sp/>cnt);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>requested<sp/>object<sp/>is<sp/>a<sp/>MC<sp/>efficiency<sp/>container<sp/>and<sp/>is<sp/>not<sp/>found,<sp/>make<sp/>a<sp/>second<sp/>attempt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>retrieve<sp/>it<sp/>from<sp/>the<sp/>calibration<sp/>scale<sp/>factor<sp/>file.<sp/>This<sp/>will<sp/>avoid<sp/>the<sp/>need<sp/>to<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>efficiency<sp/>containers<sp/>so<sp/>that<sp/>the<sp/>MC<sp/>efficiency<sp/>file<sp/>needs<sp/>to<sp/>store<sp/>only<sp/>those<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>already<sp/>present<sp/>in<sp/>the<sp/>calibration<sp/>scale<sp/>factor<sp/>file.<sp/>Of<sp/>course<sp/>this<sp/>is<sp/>meaningful<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>separate<sp/>files<sp/>are<sp/>used<sp/>to<sp/>begin<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isSF<sp/>&amp;&amp;<sp/>!cnt<sp/>&amp;&amp;<sp/>m_fileSF<sp/>!=<sp/>m_fileEff)<sp/>m_fileSF-&gt;GetObject(name.c_str(),<sp/>cnt);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>m_objects.push_back(cnt);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cnt)<sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;btag<sp/>Calib:<sp/>retrieveContainer:<sp/>failed<sp/>to<sp/>retrieve<sp/>container<sp/>named<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name.c_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>requested<sp/>object<sp/>is<sp/>a<sp/>MC<sp/>efficiency<sp/>container,<sp/>make<sp/>sure<sp/>to<sp/>retrieve<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calibration<sp/>scale<sp/>factor<sp/>container<sp/>first<sp/>(a<sp/>feature<sp/>first<sp/>thought<sp/>to<sp/>be<sp/>necessary,<sp/>erroneously,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>left<sp/>in<sp/>since<sp/>this<sp/>ordering<sp/>should<sp/>not<sp/>hurt<sp/>in<sp/>any<sp/>case).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_refMap.find(dir)<sp/>==<sp/>m_refMap.end())<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSF)<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>mapping<sp/>objects<sp/>from<sp/>both<sp/>files<sp/>and<sp/>merge<sp/>their<sp/>information<sp/>using<sp/>the<sp/>&apos;helper&apos;<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>map<sp/>resulting<sp/>from<sp/>this<sp/>is<sp/>used<sp/>to<sp/>retrieve<sp/>the<sp/>information<sp/>required<sp/>to<sp/>compute<sp/>MC/MC<sp/>scale<sp/>factors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>hadronisationRefs(dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/MChadronisation_ref&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMap*<sp/>mapSF<sp/>=<sp/>0;<sp/>m_fileSF-&gt;GetObject(hadronisationRefs.c_str(),<sp/>mapSF);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMap*<sp/>mapEff<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_fileEff<sp/>!=<sp/>m_fileSF)<sp/>m_fileEff-&gt;GetObject(hadronisationRefs.c_str(),<sp/>mapEff);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_refMap[dir]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HadronisationReferenceHelper(mapSF,<sp/>mapEff);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapSF)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapSF;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapEff)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapEff;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>SFCalibName<sp/>=<sp/>getContainername(getBasename(dir),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_objectIndices.find(SFCalibName)<sp/>==<sp/>m_objectIndices.end())<sp/>retrieveContainer(dir,<sp/>SFCalibName,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>find<sp/>the<sp/>corresponding<sp/>hadronisation<sp/>reference<sp/>container<sp/>needed<sp/>for<sp/>the<sp/>application<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MC/MC<sp/>scale<sp/>factors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx+1<sp/>&gt;<sp/>m_hadronisationReference.size())<sp/>m_hadronisationReference.resize(idx+1,<sp/>-1);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>m_hadronisationReference[idx]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>spec<sp/>=<sp/>cnt-&gt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" kindref="member" tooltip="retrieve the &amp;#39;hadronisation reference&amp;#39; entered for this calibration, if any...">getHadronisation</ref>();</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>HadronisationReferenceHelper*&gt;::const_iterator<sp/>mapit<sp/>=<sp/>m_refMap.find(dir);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapit<sp/>!=<sp/>m_refMap.end())<sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ref;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapit-&gt;second-&gt;getReference(spec,<sp/>ref))<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>hadronisation<sp/>reference<sp/>if<sp/>not<sp/>already<sp/>done.<sp/>Note<sp/>that<sp/>the<sp/>&quot;isSF&quot;<sp/>is<sp/>left<sp/>unchanged:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>allows<sp/>to<sp/>retrieve<sp/>the<sp/>reference<sp/>from<sp/>the<sp/>same<sp/>file<sp/>as<sp/>the<sp/>scale<sp/>factor<sp/>object.<sp/>An<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>reference<sp/>for<sp/>the<sp/>calibration<sp/>scale<sp/>factor<sp/>object,<sp/>which<sp/>should<sp/>always<sp/>be<sp/>obtained<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>factor<sp/>file.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>efficiency<sp/>container<sp/>can<sp/>be<sp/>its<sp/>own<sp/>hadronisation<sp/>reference<sp/>(this<sp/>is<sp/>not<sp/>&quot;protected&quot;<sp/>against).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>refname(dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>ref);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_objectIndices.find(refname);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reference<sp/>cannot<sp/>be<sp/>found,<sp/>assume<sp/>that<sp/>it<sp/>hasn&apos;t<sp/>yet<sp/>been<sp/>retrieved<sp/>so<sp/>attempt<sp/>it<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_objectIndices.end())<sp/>{<sp/></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retrieveContainer(dir,<sp/>ref,<sp/>isSF);<sp/>it<sp/>=<sp/>m_objectIndices.find(refname);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hadronisationReference[idx]<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;btag<sp/>Calib:<sp/>retrieveContainer:<sp/>MC<sp/>hadronisation<sp/>reference<sp/>map<sp/>not<sp/>found<sp/>--<sp/>this<sp/>should<sp/>not<sp/>happen!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hadronisationReference[idx]<sp/>==<sp/>-1<sp/>||<sp/>!<sp/>m_objects[m_hadronisationReference[idx]])</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>being<sp/>able<sp/>to<sp/>construct<sp/>the<sp/>MC/MC<sp/>scale<sp/>factors<sp/>will<sp/>lead<sp/>to<sp/>a<sp/>potential<sp/>bias.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>this<sp/>is<sp/>not<sp/>considered<sp/>sufficiently<sp/>severe<sp/>that<sp/>we<sp/>will<sp/>flag<sp/>it<sp/>as<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMCMCSF)</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;btag<sp/>Calib:<sp/>retrieveContainer:<sp/>warning:<sp/>unable<sp/>to<sp/>apply<sp/>MC/MC<sp/>scale<sp/>factors<sp/>for<sp/>container<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>hadronisation<sp/>reference<sp/>=<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>Eigenvector<sp/>variation<sp/>object<sp/>corresponding<sp/>to<sp/>this<sp/>object,<sp/>if<sp/>applicable.<sp/>Note<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dual<sp/>use<sp/>of<sp/>&quot;isSF&quot;<sp/>(both<sp/>referring<sp/>to<sp/>the<sp/>file<sp/>and<sp/>to<sp/>the<sp/>object,<sp/>see<sp/>above)<sp/>requires<sp/>another<sp/>protection<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_runEigenVectorMethod<sp/>&amp;&amp;<sp/>isSF<sp/>&amp;&amp;<sp/>name.find(</highlight><highlight class="stringliteral">&quot;_SF&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataHistogramContainer*<sp/>histoContainer=</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">CalibrationDataHistogramContainer*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cnt);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histoContainer==0)<sp/>{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>cast<sp/>Container<sp/>to<sp/>a<sp/>HistogramContainer.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*<sp/>newEigenVariation=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>(histoContainer);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;::const_iterator<sp/>listBegin=m_excludeFromCovMatrix.begin();</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;::const_iterator<sp/>listEnd=m_excludeFromCovMatrix.end();</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::string&gt;::const_iterator<sp/>listIter=listBegin;listIter!=listEnd;++listIter)<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newEigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2d4229db57eaab49b22c4413ededba2d" kindref="member">excludeNamedUncertainty</ref>(*listIter);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>newEigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa4cc0703d86a192ecefa243081bbd329" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point<sp/>we<sp/>may<sp/>also<sp/>want<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>eigenvector<sp/>variations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>choices<sp/>are<sp/>stored<sp/>with<sp/>the<sp/>container<sp/>object;<sp/>but<sp/>first<sp/>we<sp/>need<sp/>to<sp/>know<sp/>what<sp/>flavour<sp/>we<sp/>are<sp/>dealing<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>dir.substr(dir.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)+1);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to_retain<sp/>=<sp/>histoContainer-&gt;getEigenvectorReduction(m_EVReductions[flavour]);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_retain<sp/>&gt;<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;btag<sp/>Calib:<sp/>reducing<sp/>number<sp/>of<sp/>eigenvector<sp/>variations<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>to_retain<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>merged<sp/>variations<sp/>will<sp/>end<sp/>up<sp/>as<sp/>the<sp/>first<sp/>entry<sp/>in<sp/>the<sp/>specified<sp/>list,<sp/>i.e.,<sp/>as<sp/>the<sp/>last<sp/>of<sp/>the<sp/>variations<sp/>to<sp/>be<sp/>&quot;retained&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newEigenVariation-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a72e073c183734d308452c1e2bdb20812" kindref="member">mergeVariationsFrom</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(to_retain-1));</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EVReductions[flavour]<sp/>!=<sp/>Loose)</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;btag<sp/>Calib:<sp/>unable<sp/>to<sp/>retrieve<sp/>eigenvector<sp/>reduction<sp/>information<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>scheme<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_EVReductions[flavour]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>not<sp/>applying<sp/>any<sp/>reduction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eigenVariationsMap[cnt]=newEigenVariation;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::getAlias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>author)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2461"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>alias<sp/>for<sp/>the<sp/>given<sp/>jet<sp/>collection<sp/>name,<sp/>if<sp/>an<sp/>alias<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>case,<sp/>the<sp/>return<sp/>value<sp/>will<sp/>simply<sp/>equal<sp/>the<sp/>input<sp/>jet<sp/>collection<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>std::map&lt;string,string&gt;::const_iterator<sp/>it<sp/>=<sp/>m_aliases.find(author);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_aliases.end())<sp/>?<sp/>author<sp/>:<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a0d72f80e9b4d417f81c31cea328bb06f" kindref="member">Analysis::CalibrationDataInterfaceROOT::fullName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>author,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSF,</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mapIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2474"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>full<sp/>calibration<sp/>object&apos;s<sp/>pathname<sp/>within<sp/>the<sp/>calibration<sp/>ROOT<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>author:<sp/><sp/><sp/>jet<sp/>collection<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>OP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagger<sp/>working<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>label:<sp/><sp/><sp/><sp/>jet<sp/>flavour<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>isSF:<sp/><sp/><sp/><sp/><sp/>set<sp/>to<sp/>true<sp/>(false)<sp/>for<sp/>scale<sp/>factors<sp/>(MC<sp/>efficiencies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapIndex:<sp/>index<sp/>in<sp/>the<sp/>list<sp/>of<sp/>MC<sp/>efficiency<sp/>calibration<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>(label<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal"><sp/>:<sp/>label;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>full(m_taggerName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>getAlias(author)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>OP<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>flavour<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>full<sp/>+=<sp/>getContainername(flavour,<sp/>isSF,<sp/>mapIndex);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>+=<sp/>getAlias(author);<sp/>full<sp/>+=<sp/>&quot;/&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>name<sp/>=<sp/>(isSF)<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>getBasename(OP,<sp/>label,<sp/>&quot;_SF&quot;,<sp/>true)<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>getBasename(OP,<sp/>label,<sp/>&quot;_Eff&quot;,<sp/>false,<sp/>mapIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>+=<sp/>name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal">Analysis::CalibrationDataInterfaceROOT::HadronisationReferenceHelper::HadronisationReferenceHelper(TMap*<sp/>mapSF,<sp/>TMap*<sp/>mapEff)</highlight></codeline>
<codeline lineno="2496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>map<sp/>from<sp/>hadronisation<sp/>specifications<sp/>to<sp/>reference<sp/>container<sp/>names<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>given<sp/>ROOT<sp/>file<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapSF:<sp/><sp/>reference<sp/>specification<sp/>as<sp/>extracted<sp/>from<sp/>calibration<sp/>scale<sp/>factor<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapEff:<sp/>reference<sp/>specification<sp/>as<sp/>extracted<sp/>from<sp/>MC<sp/>efficiency<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(null<sp/>if<sp/>the<sp/>two<sp/>files<sp/>are<sp/>identical)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>take<sp/>the<sp/>scale<sp/>factor<sp/>file&apos;s<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapSF)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>TMapIter<sp/>next(mapSF);<sp/>TObjString*<sp/>spec;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((spec<sp/>=<sp/>(TObjString*)<sp/>next()))<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObjString*<sp/>ref<sp/>=<sp/>(TObjString*)<sp/>mapSF-&gt;GetValue(spec);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_refs[string(spec-&gt;GetName())]<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(ref-&gt;GetName());</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>do<sp/>the<sp/>same<sp/>with<sp/>the<sp/>efficiency<sp/>file&apos;s<sp/>map.<sp/>The<sp/>result<sp/>will<sp/>be<sp/>to<sp/>override<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>items<sp/>from<sp/>the<sp/>SF<sp/>file&apos;s<sp/>map.<sp/>An<sp/>exception<sp/>is<sp/>made<sp/>for<sp/>the<sp/>scale<sp/>factor<sp/>calibration<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>which<sp/>(for<sp/>the<sp/>sake<sp/>of<sp/>consistency)<sp/>the<sp/>SF<sp/>reference<sp/>must<sp/>be<sp/>retained.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapEff)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>TMapIter<sp/>next(mapEff);<sp/>TObjString*<sp/>spec;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((spec<sp/>=<sp/>(TObjString*)<sp/>next()))<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObjString*<sp/>ref<sp/>=<sp/>(TObjString*)<sp/>mapEff-&gt;GetValue(spec);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_refs[string(spec-&gt;GetName())]<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(ref-&gt;GetName());</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><ref refid="da/daf/classAnalysis_1_1CalibrationDataInterfaceROOT_1_1HadronisationReferenceHelper_1acc694e3248e937c6a9aca4413402a303" kindref="member">Analysis::CalibrationDataInterfaceROOT::HadronisationReferenceHelper::getReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>spec,</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>ref)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2528"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>reference<sp/>histogram<sp/>name<sp/>corresponding<sp/>to<sp/>the<sp/>given<sp/>hadronisation<sp/>specification<sp/>(if<sp/>existing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>used<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>specification<sp/>could<sp/>be<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>spec:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadronisation<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ref:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container<sp/>name<sp/>corresponding<sp/>to<sp/>this<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>string&gt;::const_iterator<sp/>it<sp/>=<sp/>m_refs.find(spec);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_refs.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceROOT.cxx"/>
  </compounddef>
</doxygen>
