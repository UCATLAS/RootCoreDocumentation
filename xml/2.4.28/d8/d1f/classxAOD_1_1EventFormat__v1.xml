<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d1f/classxAOD_1_1EventFormat__v1" kind="class" prot="public">
    <compoundname>xAOD::EventFormat_v1</compoundname>
    <includes refid="d2/d41/EventFormat__v1_8h" local="no">EventFormat_v1.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a760d509ab360f1cd15b0a49569449e1d" prot="private" static="no">
        <type>std::map&lt; std::string, <ref refid="d3/d08/classxAOD_1_1EventFormatElement" kindref="compound">EventFormatElement</ref> &gt;</type>
        <definition>typedef std::map&lt; std::string, EventFormatElement &gt; xAOD::EventFormat_v1::KeyedData_t</definition>
        <argsstring></argsstring>
        <name>KeyedData_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> of the key-&gt;data in-memory object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a16ae08368d941946e62368cf14f5ed29" prot="private" static="no">
        <type>std::map&lt; uint32_t, <ref refid="d3/d08/classxAOD_1_1EventFormatElement" kindref="compound">EventFormatElement</ref> &gt;</type>
        <definition>typedef std::map&lt; uint32_t, EventFormatElement &gt; xAOD::EventFormat_v1::HashedData_t</definition>
        <argsstring></argsstring>
        <name>HashedData_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> of the hash-&gt;data in-memory object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a00b5f4818148a6d52970942aaa88109c" prot="public" static="no">
        <type>KeyedData_t::const_iterator</type>
        <definition>typedef KeyedData_t::const_iterator xAOD::EventFormat_v1::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Iterator for looping over the elements of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a5061bac3b63acffbe4437cdff8bcbb62" prot="private" static="no" mutable="no">
        <type>KeyedData_t</type>
        <definition>KeyedData_t xAOD::EventFormat_v1::m_keyedData</definition>
        <argsstring></argsstring>
        <name>m_keyedData</name>
        <briefdescription>
<para>Object associating string keys with the descriptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1af986cf1b53ed78c366a58d7194a5c243" prot="private" static="no" mutable="no">
        <type>HashedData_t</type>
        <definition>HashedData_t xAOD::EventFormat_v1::m_hashedData</definition>
        <argsstring></argsstring>
        <name>m_hashedData</name>
        <briefdescription>
<para>Object associating hash keys with the descriptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a9469bc295706b1df5a08b5a85b886494" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; xAOD::EventFormat_v1::m_branchNames</definition>
        <argsstring></argsstring>
        <name>m_branchNames</name>
        <briefdescription>
<para>Names of the branches that we are describing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a98c29cfae8e3082cebb68613aa0888af" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; xAOD::EventFormat_v1::m_classNames</definition>
        <argsstring></argsstring>
        <name>m_classNames</name>
        <briefdescription>
<para>Names of the transient objects belonging to the branch names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a73a645b1d7e64b439b7351432b12991a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; xAOD::EventFormat_v1::m_parentNames</definition>
        <argsstring></argsstring>
        <name>m_parentNames</name>
        <briefdescription>
<para>Names of the auxiliary parents of the branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a4a458dfbbd72581903b2dc3be7279d2b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; xAOD::EventFormat_v1::m_branchHashes</definition>
        <argsstring></argsstring>
        <name>m_branchHashes</name>
        <briefdescription>
<para>Hashed versions of the branch names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a25c0a2a5484cce7b0ff01d335d14d87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::EventFormat_v1::EventFormat_v1</definition>
        <argsstring>()</argsstring>
        <name>EventFormat_v1</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a6c4ecf43ad749480fa80cbeec99f6472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::EventFormat_v1::add</definition>
        <argsstring>(const EventFormatElement &amp;element, bool updatePersistent=true)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="d3/d08/classxAOD_1_1EventFormatElement" kindref="compound">EventFormatElement</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>updatePersistent</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add the description of a new branch. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to extend the object with a new element.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="39" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a2609f1d26579228fa2c002ea37340b13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EventFormat_v1::exists</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check if a description exists about a given branch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the branch is knows, <computeroutput>false</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a28b628bc29a65bd087922e4305148463" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EventFormat_v1::exists</definition>
        <argsstring>(uint32_t hash) const </argsstring>
        <name>exists</name>
        <param>
          <type>uint32_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Check if a description exists about a given branch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashed version of the branch name to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the branch is knows, <computeroutput>false</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1aff17a92788b214105dc0a06c912c6389" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d3/d08/classxAOD_1_1EventFormatElement" kindref="compound">EventFormatElement</ref> *</type>
        <definition>const EventFormatElement * xAOD::EventFormat_v1::get</definition>
        <argsstring>(const std::string &amp;key, bool quiet=false) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the description of a given branch. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to get access to one element in the object. Notice that the user code should first check if an element exists, and only use this function if it does.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to get the information for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quiet</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, silently return 0 if the hash isn&apos;t found; otherwise, print an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pointer to the element describing the requested branch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="87" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a0e3c4fc6a8104d63b297cb354e4ead34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d3/d08/classxAOD_1_1EventFormatElement" kindref="compound">EventFormatElement</ref> *</type>
        <definition>const EventFormatElement * xAOD::EventFormat_v1::get</definition>
        <argsstring>(uint32_t hash, bool quiet=false) const </argsstring>
        <name>get</name>
        <param>
          <type>uint32_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the description of a given branch. </para>        </briefdescription>
        <detaileddescription>
<para>This function can return the element describing a given branch. Notice that the user code should first check if an element exists, and only use this function if it does.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashed version of the name of the branch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quiet</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, silently return 0 if the hash isn&apos;t found; otherwise, print an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pointer to the element describing the requested branch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="112" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1ae6ab6174622b62bf471ef42cd0f707f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::EventFormat_v1::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="140" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1afd4e5656858bd579f9de227d470370bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a00b5f4818148a6d52970942aaa88109c" kindref="member">const_iterator</ref></type>
        <definition>EventFormat_v1::const_iterator xAOD::EventFormat_v1::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>STL-like function for getting the beginning of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1a76ec34b547b967095860679615f3826e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a00b5f4818148a6d52970942aaa88109c" kindref="member">const_iterator</ref></type>
        <definition>EventFormat_v1::const_iterator xAOD::EventFormat_v1::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>STL-like function for getting the end of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="66" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1ae4418f67ed1c26aa2d893e03e854bf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::EventFormat_v1::toTransient</definition>
        <argsstring>()</argsstring>
        <name>toTransient</name>
        <briefdescription>
<para>Interpret the persistent members of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="69" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="164" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1f/classxAOD_1_1EventFormat__v1_1aa889ef411d3e304396505b6d1e9f852e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::EventFormat_v1::dump</definition>
        <argsstring>() const </argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump the contents of this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/Root/EventFormat_v1.cxx" bodystart="219" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Event format metadata for <ref refid="dd/d44/namespacexAOD" kindref="compound">xAOD</ref> files</para><para>This class is used to save file-level metadata about the format of <ref refid="dd/d44/namespacexAOD" kindref="compound">xAOD</ref> files. It is not meant to be used directly by analysers, but just by the code that they use, behind the scenes.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>641134 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-01-22 20:35:12 +0100 (Thu, 22 Jan 2015) </para></simplesect>
</para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEventFormat/xAODEventFormat/versions/EventFormat_v1.h" bodystart="33" bodyend="89"/>
    <listofallmembers>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a6c4ecf43ad749480fa80cbeec99f6472" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>add</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1afd4e5656858bd579f9de227d470370bd" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>begin</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1ae6ab6174622b62bf471ef42cd0f707f5" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>clear</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a00b5f4818148a6d52970942aaa88109c" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>const_iterator</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1aa889ef411d3e304396505b6d1e9f852e" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>dump</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a76ec34b547b967095860679615f3826e" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>end</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a25c0a2a5484cce7b0ff01d335d14d87b" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>EventFormat_v1</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a2609f1d26579228fa2c002ea37340b13" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>exists</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a28b628bc29a65bd087922e4305148463" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>exists</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1aff17a92788b214105dc0a06c912c6389" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>get</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a0e3c4fc6a8104d63b297cb354e4ead34" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>get</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a16ae08368d941946e62368cf14f5ed29" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>HashedData_t</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a760d509ab360f1cd15b0a49569449e1d" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>KeyedData_t</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a4a458dfbbd72581903b2dc3be7279d2b" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_branchHashes</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a9469bc295706b1df5a08b5a85b886494" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_branchNames</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a98c29cfae8e3082cebb68613aa0888af" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_classNames</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1af986cf1b53ed78c366a58d7194a5c243" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_hashedData</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a5061bac3b63acffbe4437cdff8bcbb62" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_keyedData</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1a73a645b1d7e64b439b7351432b12991a" prot="private" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>m_parentNames</name></member>
      <member refid="d8/d1f/classxAOD_1_1EventFormat__v1_1ae4418f67ed1c26aa2d893e03e854bf80" prot="public" virt="non-virtual"><scope>xAOD::EventFormat_v1</scope><name>toTransient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
