<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d0e/DVLIterator__test_8cxx" kind="file">
    <compoundname>DVLIterator_test.cxx</compoundname>
    <includes refid="d3/dc7/DVLIterator_8h" local="yes">AthContainers/tools/DVLIterator.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">list</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="73960">
        <label>list</label>
      </node>
      <node id="73955">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="73956">
        <label>functional</label>
      </node>
      <node id="73945">
        <label>boost/version.hpp</label>
      </node>
      <node id="73931">
        <label>limits</label>
      </node>
      <node id="73946">
        <label>iterator</label>
      </node>
      <node id="73947">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="73948" relation="include">
        </childnode>
        <childnode refid="73957" relation="include">
        </childnode>
        <childnode refid="73958" relation="include">
        </childnode>
        <childnode refid="73933" relation="include">
        </childnode>
        <childnode refid="73954" relation="include">
        </childnode>
      </node>
      <node id="73930">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="73931" relation="include">
        </childnode>
        <childnode refid="73932" relation="include">
        </childnode>
        <childnode refid="73933" relation="include">
        </childnode>
        <childnode refid="73934" relation="include">
        </childnode>
        <childnode refid="73935" relation="include">
        </childnode>
      </node>
      <node id="73938">
        <label>RVersion.h</label>
      </node>
      <node id="73949">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="73950" relation="include">
        </childnode>
        <childnode refid="73940" relation="include">
        </childnode>
        <childnode refid="73956" relation="include">
        </childnode>
      </node>
      <node id="73953">
        <label>cmath</label>
      </node>
      <node id="73943">
        <label>cassert</label>
      </node>
      <node id="73958">
        <label>stdexcept</label>
      </node>
      <node id="73944">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="73954">
        <label>string</label>
      </node>
      <node id="73928">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="73929" relation="include">
        </childnode>
        <childnode refid="73930" relation="include">
        </childnode>
        <childnode refid="73936" relation="include">
        </childnode>
        <childnode refid="73944" relation="include">
        </childnode>
        <childnode refid="73945" relation="include">
        </childnode>
        <childnode refid="73946" relation="include">
        </childnode>
        <childnode refid="73934" relation="include">
        </childnode>
      </node>
      <node id="73939">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="73936">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="73929" relation="include">
        </childnode>
        <childnode refid="73937" relation="include">
        </childnode>
        <childnode refid="73940" relation="include">
        </childnode>
        <childnode refid="73941" relation="include">
        </childnode>
      </node>
      <node id="73927">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx</label>
        <link refid="DVLIterator_test.cxx"/>
        <childnode refid="73928" relation="include">
        </childnode>
        <childnode refid="73947" relation="include">
        </childnode>
        <childnode refid="73959" relation="include">
        </childnode>
        <childnode refid="73960" relation="include">
        </childnode>
        <childnode refid="73943" relation="include">
        </childnode>
      </node>
      <node id="73937">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="73938" relation="include">
        </childnode>
        <childnode refid="73939" relation="include">
        </childnode>
      </node>
      <node id="73932">
        <label>limits.h</label>
      </node>
      <node id="73948">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="73935" relation="include">
        </childnode>
        <childnode refid="73949" relation="include">
        </childnode>
      </node>
      <node id="73950">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="73951" relation="include">
        </childnode>
        <childnode refid="73952" relation="include">
        </childnode>
        <childnode refid="73946" relation="include">
        </childnode>
        <childnode refid="73935" relation="include">
        </childnode>
        <childnode refid="73934" relation="include">
        </childnode>
        <childnode refid="73953" relation="include">
        </childnode>
        <childnode refid="73931" relation="include">
        </childnode>
        <childnode refid="73954" relation="include">
        </childnode>
        <childnode refid="73955" relation="include">
        </childnode>
      </node>
      <node id="73942">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="73943" relation="include">
        </childnode>
      </node>
      <node id="73941">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="73930" relation="include">
        </childnode>
        <childnode refid="73942" relation="include">
        </childnode>
      </node>
      <node id="73933">
        <label>typeinfo</label>
      </node>
      <node id="73959">
        <label>vector</label>
      </node>
      <node id="73952">
        <label>utility</label>
      </node>
      <node id="73934">
        <label>cstdlib</label>
      </node>
      <node id="73957">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="73935">
        <label>cstddef</label>
      </node>
      <node id="73951">
        <label>algorithm</label>
      </node>
      <node id="73929">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="73940">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="d2/d45/structX1" prot="public">X1</innerclass>
    <innerclass refid="db/d34/structX2" prot="public">X2</innerclass>
    <innerclass refid="d9/df4/structCont1" prot="public">Cont1</innerclass>
    <innerclass refid="d9/d5d/structCont2" prot="public">Cont2</innerclass>
    <innerclass refid="de/da3/structCont3" prot="public">Cont3</innerclass>
    <innerclass refid="d9/d98/structCont4" prot="public">Cont4</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d0e/DVLIterator__test_8cxx_1a0a15de3cc4b89ff6408bbf2020311678" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
          <param>
            <type>class CAT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test1_extra</definition>
        <argsstring>(CAT)</argsstring>
        <name>test1_extra</name>
        <param>
          <type>CAT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" line="157" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="d8/d0e/DVLIterator__test_8cxx_1a91e1c7396df77e228dc7a91fa9f57385" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test1_extra</definition>
        <argsstring>(std::random_access_iterator_tag)</argsstring>
        <name>test1_extra</name>
        <param>
          <type>std::random_access_iterator_tag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" line="161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" bodystart="160" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="d8/d0e/DVLIterator__test_8cxx_1ab3f191a0e67bef63e7a1e241298c904b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test1_cont</definition>
        <argsstring>()</argsstring>
        <name>test1_cont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" line="244" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" bodystart="243" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="d8/d0e/DVLIterator__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" line="297" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="d8/d0e/DVLIterator__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" line="306" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx" bodystart="305" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for DVLIterator. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2010 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>DVLIterator_test.cxx<sp/>470529<sp/>2011-11-24<sp/>23:54:22Z<sp/>ssnyder<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/tools/DVLIterator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d45/structX1" kindref="compound">X1</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d2/d45/structX1" kindref="compound">X1</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d34/structX2" kindref="compound">X2</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/><ref refid="d3/d2d/structCont" kindref="compound">Cont</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref><sp/>base_value_type;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;X1*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_value_type*<sp/>value_type;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base_value_type*<sp/>const_value_type;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_value_type**<sp/>pointer;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;Cont&gt;</ref><sp/>ElementProxy;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;Cont&gt;</ref><sp/>const_iterator;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_insert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_ownPolicy<sp/>(ownPolicy),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_can_insert<sp/>(can_insert)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_insert)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_can_insert;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="d9/d5d/structCont2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d5d/structCont2" kindref="compound">Cont2</ref></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/d5d/structCont2" kindref="compound">Cont2</ref><sp/><ref refid="d9/d5d/structCont2" kindref="compound">Cont</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;X1*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>*<sp/><ref refid="db/d34/structX2" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>*<sp/><ref refid="db/d34/structX2" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>**<sp/><ref refid="db/d34/structX2" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;Cont&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;Cont&gt;</ref><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="d9/d5d/structCont2" kindref="compound">Cont2</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_insert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_ownPolicy<sp/>(ownPolicy),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_can_insert<sp/>(can_insert)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_insert)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_can_insert;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="de/da3/structCont3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/da3/structCont3" kindref="compound">Cont3</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="de/da3/structCont3" kindref="compound">Cont3</ref><sp/><ref refid="de/da3/structCont3" kindref="compound">Cont</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;X1*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>*<sp/><ref refid="d2/d45/structX1" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>*<sp/><ref refid="d2/d45/structX1" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>**<sp/><ref refid="d2/d45/structX1" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;Cont&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;Cont&gt;</ref><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="de/da3/structCont3" kindref="compound">Cont3</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_insert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_ownPolicy<sp/>(ownPolicy),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_can_insert<sp/>(can_insert)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_insert)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_can_insert;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="d9/d98/structCont4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d98/structCont4" kindref="compound">Cont4</ref></highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/d98/structCont4" kindref="compound">Cont4</ref><sp/><ref refid="d9/d98/structCont4" kindref="compound">Cont</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;X1*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>*<sp/><ref refid="db/d34/structX2" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>*<sp/><ref refid="db/d34/structX2" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>**<sp/><ref refid="db/d34/structX2" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;Cont&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;Cont&gt;</ref><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="d9/d98/structCont4" kindref="compound">Cont4</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_insert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_ownPolicy<sp/>(ownPolicy),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_can_insert<sp/>(can_insert)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_insert)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_can_insert;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CONT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CAT&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1_extra<sp/>(CAT<sp/></highlight><highlight class="comment">/*cat*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CONT&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1_extra<sp/>(std::random_access_iterator_tag<sp/></highlight><highlight class="comment">/*cat*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;CONT&gt;</ref><sp/>const_iterator;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;CONT&gt;</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::BaseContainer<sp/>v;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::base_value_type<sp/><ref refid="d1/def/classT" kindref="compound">T</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>CONT<sp/>cont;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t3);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>const_iterator<sp/>c1<sp/>(v.begin());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>const_iterator<sp/>c2<sp/>(v.begin()+2);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>iterator<sp/>i1<sp/>(v.begin(),<sp/>&amp;cont);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>iterator<sp/>i2<sp/>(v.begin()+2,<sp/>&amp;cont);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;<sp/>c2);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c2<sp/>&lt;<sp/>c1));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&lt;<sp/>c1));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;=<sp/>c2);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;=<sp/>c1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c2<sp/>&lt;=<sp/>c1));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>&gt;<sp/>c1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;<sp/>c2));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;<sp/>c1));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>&gt;=<sp/>c1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;=<sp/>c2));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&gt;=<sp/>c1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;<sp/>i2);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i2<sp/>&lt;<sp/>i1));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&lt;<sp/>i1));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>i2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>i1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i2<sp/>&lt;=<sp/>i1));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;<sp/>i1);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;<sp/>i2));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;<sp/>i1));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;=<sp/>i2));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;<sp/>i2);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i2<sp/>&lt;<sp/>c1));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&lt;<sp/>c1));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;=<sp/>i2);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&lt;=<sp/>c1);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i2<sp/>&lt;=<sp/>c1));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;<sp/>c1);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;<sp/>i2));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;<sp/>c1));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;=<sp/>c1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c1<sp/>&gt;=<sp/>i2));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>&gt;=<sp/>c1);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;<sp/>c2);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c2<sp/>&lt;<sp/>i1));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&lt;<sp/>i1));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>c2);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>i1);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>assert<sp/>(!(c2<sp/>&lt;=<sp/>i1));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>&gt;<sp/>i1);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;<sp/>c2));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;<sp/>i1));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>assert<sp/>(!(i1<sp/>&gt;=<sp/>c2));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>-<sp/>c1<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>-<sp/>i1<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>-<sp/>i1<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>-<sp/>c1<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>assert<sp/>(i1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>assert<sp/>(i1[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>assert<sp/>(i1[2]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CONT&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1_cont()</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;CONT&gt;</ref><sp/>const_iterator;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;CONT&gt;</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::BaseContainer<sp/>v;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>CONT<sp/>cont;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(t3);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>const_iterator<sp/>c1;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>const_iterator<sp/>c2<sp/>(v.begin());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>assert<sp/>(*c2<sp/>==<sp/>t1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>CONT<sp/>cont3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>iterator<sp/>i1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>iterator<sp/>i2<sp/>(v.begin(),<sp/>&amp;cont3);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>assert<sp/>(i2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>i2.testInsert(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>assert<sp/>(*i2<sp/>==<sp/>t1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>assert<sp/>(i1.container()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>assert<sp/>(i2.container()<sp/>==<sp/>&amp;cont3);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>CONT<sp/>cont2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>iterator<sp/>i3<sp/>(v.begin(),<sp/>&amp;cont2);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>assert<sp/>(i3.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>i3.testInsert(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>==<sp/>c2);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>!=<sp/>c2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>==<sp/>i2);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>!=<sp/>i2);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>==<sp/>c2);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>assert<sp/>(c2<sp/>==<sp/>i2);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>!=<sp/>c2);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>assert<sp/>(c1<sp/>!=<sp/>i2);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>test1_extra&lt;CONT&gt;<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator::iterator_category());</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>test1_cont&lt;Cont1&gt;();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>test1_cont&lt;Cont2&gt;();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>test1_cont&lt;Cont3&gt;();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>test1_cont&lt;Cont4&gt;();</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLIterator_test.cxx"/>
  </compounddef>
</doxygen>
