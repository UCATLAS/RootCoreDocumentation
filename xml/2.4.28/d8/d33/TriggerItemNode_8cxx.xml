<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d33/TriggerItemNode_8cxx" kind="file">
    <compoundname>TriggerItemNode.cxx</compoundname>
    <includes refid="d7/d8a/TriggerItemNode_8h" local="yes">TrigConfL1Data/TriggerItemNode.h</includes>
    <includes refid="d1/de2/TriggerThreshold_8h" local="yes">TrigConfL1Data/TriggerThreshold.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">inttypes.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <incdepgraph>
      <node id="310415">
        <label>TrigConfL1Data/TriggerThresholdValue.h</label>
        <link refid="dd/d1d/TriggerThresholdValue_8h_source"/>
        <childnode refid="310416" relation="include">
        </childnode>
        <childnode refid="310410" relation="include">
        </childnode>
      </node>
      <node id="310416">
        <label>TrigConfL1Data/L1DataBaseclass.h</label>
        <link refid="d8/db1/L1DataBaseclass_8h_source"/>
        <childnode refid="310417" relation="include">
        </childnode>
      </node>
      <node id="310420">
        <label>iomanip</label>
      </node>
      <node id="310425">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="310413">
        <label>stdint.h</label>
      </node>
      <node id="310407">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfL1Data/Root/TriggerItemNode.cxx</label>
        <link refid="TriggerItemNode.cxx"/>
        <childnode refid="310408" relation="include">
        </childnode>
        <childnode refid="310414" relation="include">
        </childnode>
        <childnode refid="310420" relation="include">
        </childnode>
        <childnode refid="310419" relation="include">
        </childnode>
        <childnode refid="310410" relation="include">
        </childnode>
        <childnode refid="310421" relation="include">
        </childnode>
        <childnode refid="310422" relation="include">
        </childnode>
        <childnode refid="310423" relation="include">
        </childnode>
        <childnode refid="310424" relation="include">
        </childnode>
        <childnode refid="310425" relation="include">
        </childnode>
      </node>
      <node id="310423">
        <label>stdexcept</label>
      </node>
      <node id="310410">
        <label>string</label>
      </node>
      <node id="310408">
        <label>TrigConfL1Data/TriggerItemNode.h</label>
        <link refid="d7/d8a/TriggerItemNode_8h_source"/>
        <childnode refid="310409" relation="include">
        </childnode>
        <childnode refid="310410" relation="include">
        </childnode>
        <childnode refid="310413" relation="include">
        </childnode>
      </node>
      <node id="310411">
        <label>map</label>
      </node>
      <node id="310417">
        <label>TrigConfL1Data/TrigConfData.h</label>
        <link refid="da/da8/TrigConfData_8h_source"/>
        <childnode refid="310418" relation="include">
        </childnode>
        <childnode refid="310410" relation="include">
        </childnode>
      </node>
      <node id="310424">
        <label>sys/types.h</label>
      </node>
      <node id="310412">
        <label>vector</label>
      </node>
      <node id="310418">
        <label>iosfwd</label>
      </node>
      <node id="310421">
        <label>cstdlib</label>
      </node>
      <node id="310419">
        <label>iostream</label>
      </node>
      <node id="310409">
        <label>TrigConfL1Data/L1DataDef.h</label>
        <link refid="da/d67/L1DataDef_8h_source"/>
        <childnode refid="310410" relation="include">
        </childnode>
        <childnode refid="310411" relation="include">
        </childnode>
        <childnode refid="310412" relation="include">
        </childnode>
      </node>
      <node id="310414">
        <label>TrigConfL1Data/TriggerThreshold.h</label>
        <link refid="d1/de2/TriggerThreshold_8h_source"/>
        <childnode refid="310415" relation="include">
        </childnode>
        <childnode refid="310409" relation="include">
        </childnode>
        <childnode refid="310416" relation="include">
        </childnode>
        <childnode refid="310410" relation="include">
        </childnode>
        <childnode refid="310412" relation="include">
        </childnode>
        <childnode refid="310419" relation="include">
        </childnode>
      </node>
      <node id="310422">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TrigConfL1Data/TriggerItemNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfL1Data/TriggerThreshold.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">TrigConf;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">TrigConf::TriggerItemNode::TriggerItemNode(NodeType<sp/>type)<sp/>:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>m_NodeType(type),<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/>m_ThresholdName(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>m_Position(0),<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>m_Multiplicity(0),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>m_Threshold(0),<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>m_InternalTrigger(InternalType_t(<ref refid="d2/d44/classTrigConf_1_1L1DataDef" kindref="compound">L1DataDef</ref>::UNDEF,0))</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">TrigConf::TriggerItemNode::~TriggerItemNode()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">TrigConf::TriggerItemNode::NodeType</highlight></codeline>
<codeline lineno="34"><highlight class="normal">TrigConf::TriggerItemNode::typeFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::AND;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::OR;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::NOT;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;OBJ&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::OBJ;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;TriggerCondition&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::OBJ;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==</highlight><highlight class="stringliteral">&quot;InternalTrigger&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::OBJ;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::UNDEF;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">TriggerItemNode::NodeType</highlight></codeline>
<codeline lineno="45"><highlight class="normal">TriggerItemNode::typeFromChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::AND;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==</highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::OR;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c==</highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::NOT;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TriggerItemNode::UNDEF;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="53"><highlight class="normal">TrigConf::TriggerItemNode::typeAsString(NodeType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>typelabel[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;OBJ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UNDEF&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typelabel[type];</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">TrigConf::TriggerItemNode::isThreshold()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_InternalTrigger.first<sp/>==<sp/>L1DataDef::UNDEF;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TrigConf::TriggerItemNode::isInternalTrigger()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_InternalTrigger.first<sp/>!=<sp/>L1DataDef::UNDEF;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">TrigConf::TriggerItemNode::setTriggerThreshold(<ref refid="db/de5/classTrigConf_1_1TriggerThreshold" kindref="compound">TriggerThreshold</ref>*<sp/>thr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thr-&gt;isInternal())<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>database<sp/>internal<sp/>triggers<sp/>are<sp/>also<sp/>loaded<sp/>as<sp/>TriggerThresholds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setInternalTrigger(thr-&gt;name());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_InternalTrigger.first<sp/>=<sp/>L1DataDef::UNDEF;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_InternalTrigger.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>m_Threshold<sp/>=<sp/>thr;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>m_ThresholdName<sp/>=<sp/>thr-&gt;name();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">TrigConf::TriggerItemNode::setInternalTrigger(L1DataDef::TriggerType<sp/>x,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thresholdNumber)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>m_InternalTrigger.first<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>m_InternalTrigger.second<sp/>=<sp/>thresholdNumber;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>m_ThresholdName<sp/>=<sp/>L1DataDef::typeConfig(x).name<sp/>+<sp/>boost::lexical_cast&lt;string,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(thresholdNumber);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>m_Threshold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">TrigConf::TriggerItemNode::setInternalTrigger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="d6/db2/structTrigConf_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>string::size_type<sp/>pos<sp/>=<sp/>name.find_first_of(</highlight><highlight class="stringliteral">&quot;0123456789&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>L1DataDef::TriggerType<sp/>tt<sp/>=<sp/>L1DataDef::stringAsType(name.substr(0,pos));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>L1DataDef::typeConfig(tt).internal<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TriggerItemNode::setInternalTrigger:<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>an<sp/>internal<sp/>trigger&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;TriggerItemNode::setInternalTrigger:<sp/>type<sp/>is<sp/>not<sp/>an<sp/>internal<sp/>trigger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>m_InternalTrigger.first<sp/>=<sp/>tt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>m_InternalTrigger.second<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;(name.substr(pos));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>m_ThresholdName<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>m_Threshold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">TrigConf::TriggerItemNode::addChild(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;TriggerItemNode::addChild:<sp/>trying<sp/>to<sp/>add<sp/>child<sp/>to<sp/>leaf<sp/>node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>m_Children.push_back(node);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">TrigConf::TriggerItemNode::getAllFinalNodes(std::vector&lt;const<sp/>TriggerItemNode*&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec.push_back(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllFinalNodes(vec);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">TrigConf::TriggerItemNode::getAllThresholds(std::vector&lt;TriggerThreshold*&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInternalTrigger())<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_Threshold)<sp/>vec.push_back(m_Threshold);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllThresholds(vec);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>bit-pattern<sp/>for<sp/>the<sp/>bunchgroups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">TrigConf::TriggerItemNode::getAllBunchGroups(std::vector&lt;bool&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_bgrp<sp/>=<sp/>L1DataDef::typeConfig(L1DataDef::BGRP).max;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vec.size()<sp/>&lt;<sp/>max_bgrp)<sp/>vec.resize(<sp/>max_bgrp<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(internalTriggerType()<sp/>==<sp/>L1DataDef::BGRP)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec[m_InternalTrigger.second]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllBunchGroups(vec);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>bit-pattern<sp/>for<sp/>the<sp/>just<sp/>as<sp/>the<sp/>previous<sp/>one<sp/>but<sp/>as<sp/>uint16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">TrigConf::TriggerItemNode::getBunchGroupsMask(uint16_t<sp/>&amp;<sp/>bgmask)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(internalTriggerType()<sp/>==<sp/>L1DataDef::BGRP)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>mask(0x1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgmask<sp/>|=<sp/>(mask<sp/>&lt;&lt;<sp/>m_InternalTrigger.second);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getBunchGroupsMask(bgmask);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">TrigConf::TriggerItemNode::getAllBunchGroups(std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(internalTriggerType()<sp/>==<sp/>L1DataDef::BGRP)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.push_back(m_InternalTrigger.second);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllBunchGroups(vec);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">TrigConf::TriggerItemNode::getAllRandomTriggers(std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(internalTriggerType()<sp/>==<sp/>L1DataDef::RNDM)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.push_back(m_InternalTrigger.second);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllRandomTriggers(vec);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">TrigConf::TriggerItemNode::getAllPrescaledClockTriggers(std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>vec)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type()<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(internalTriggerType()<sp/>==<sp/>L1DataDef::PCLK)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.push_back(m_InternalTrigger.second);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;getAllPrescaledClockTriggers(vec);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">TrigConf::TriggerItemNode::writeXML(std::ostream<sp/>&amp;<sp/>xmlfile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indentLevel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indentWidth,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*omitDelimiter*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isInternalTrigger())<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;InternalTrigger<sp/>name=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_ThresholdName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;/&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;TriggerCondition<sp/>multi=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_Multiplicity<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>name=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_ThresholdName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_Multiplicity<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>triggerthreshold=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_ThresholdName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;/&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>AND<sp/>||<sp/>m_NodeType<sp/>==<sp/>OR)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>logic<sp/>=<sp/>(m_NodeType==AND?</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logic<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*node<sp/>:<sp/>children())</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;writeXML(xmlfile,<sp/>indentLevel+1,<sp/>indentWidth);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal">&lt;&lt;logic&lt;&lt;</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>NOT)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;NOT&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>children()[0]-&gt;writeXML(xmlfile,<sp/>indentLevel+1,<sp/>indentWidth);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent(xmlfile,<sp/>indentLevel,<sp/>indentWidth)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/NOT&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TrigConf::TriggerItemNode::buildLogic(std::vector&lt;std::string&gt;<sp/>&amp;<sp/>conditionList,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>&amp;<sp/>logic)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>condition(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_Threshold)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_Threshold-&gt;type()<sp/>!=<sp/>L1DataDef::rndmType()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Threshold-&gt;type()<sp/>!=<sp/>L1DataDef::pclkType()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Threshold-&gt;type()<sp/>!=<sp/>L1DataDef::bgrpType())<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>m_Threshold-&gt;name();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_x&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(m_Multiplicity);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>m_Multiplicity;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_Threshold-&gt;name();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition<sp/>=<sp/>m_Threshold-&gt;name();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition<sp/>=<sp/>thresholdName();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>pos<sp/>=<sp/>conditionList.size()+1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos&gt;9)<sp/>logic<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+pos/10;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logic<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+pos%10;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conditionList.push_back(condition);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>AND<sp/>||<sp/>m_NodeType<sp/>==<sp/>OR)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logic<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*node<sp/>:<sp/>children())<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!first)<sp/>{<sp/>logic<sp/>+=<sp/>(m_NodeType==AND?</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>first=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;buildLogic(conditionList,<sp/>logic);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logic<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>NOT)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logic<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>children()[0]-&gt;buildLogic(conditionList,<sp/>logic);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">TrigConf::TriggerItemNode::print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>indent,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detail)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TriggerItemNode:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(type()==OBJ?</highlight><highlight class="stringliteral">&quot;OBJ&quot;</highlight><highlight class="normal">:(type()==AND?</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">:(type()==OR?</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">)))<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>position<sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_Position<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_NodeType<sp/>==<sp/>OBJ)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>multiplicity:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_Multiplicity<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_Threshold)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>threshold<sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_Threshold-&gt;name()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Threshold-&gt;print(indent<sp/>+<sp/>indent,<sp/>detail);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isInternalTrigger())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>InternalTrigger:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>thresholdName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>thresholdName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref><sp/>*<sp/>node<sp/>:<sp/>m_Children)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>subnode<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;print(indent<sp/>+<sp/>indent);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">std::ostream&amp;<sp/>TrigConf::TriggerItemNode::indent(std::ostream&amp;<sp/>o,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lvl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lvl*size==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/>std::setw(lvl*size)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">std::ostream<sp/>&amp;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">TrigConf::operator&lt;&lt;(std::ostream<sp/>&amp;<sp/>o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TrigConf::TriggerItemNode</ref><sp/>&amp;<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriggerItemNode:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(node.type()==TriggerItemNode::OBJ?<sp/></highlight><highlight class="stringliteral">&quot;OBJ&quot;</highlight><highlight class="normal"><sp/>:<sp/>(node.type()==TriggerItemNode::AND?</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">:(node.type()==TriggerItemNode::OR?</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">)))<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node.position()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node.type()<sp/>==<sp/>TriggerItemNode::OBJ)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>multiplicity:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node.multiplicity()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node.triggerThreshold()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>threshold<sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node.thresholdName()<sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>node.triggerThreshold();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>node.isInternalTrigger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>InternalTrigger:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node.thresholdName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/>node.thresholdName()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="df/d45/classTrigConf_1_1TriggerItemNode" kindref="compound">TriggerItemNode</ref>*<sp/>subnode:<sp/>node.children())<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subnodes<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*subnode<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TriggerItemNode::__str__()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfL1Data/Root/TriggerItemNode.cxx"/>
  </compounddef>
</doxygen>
