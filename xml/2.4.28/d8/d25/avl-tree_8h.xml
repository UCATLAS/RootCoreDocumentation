<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d8/d25/avl-tree_8h" kind="file">
    <compoundname>avl-tree.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108128">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h</label>
        <link refid="avl-tree.h"/>
        <childnode refid="108129" relation="include">
        </childnode>
      </node>
      <node id="108129">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d8/d25/avl-tree_8h_1af1715b7baa2efe0c05db22ac7f34f22b" prot="public" static="no">
        <name>AVL_TREE_NULL</name>
        <initializer>((void *) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> null <ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12" prot="public" static="no">
        <name>AVLTreeNodeSide</name>
        <enumvalue id="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12a46c72811f160b978d3c3c6b75059378a" prot="public">
          <name>AVL_TREE_NODE_LEFT</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12ad612c3a6fe6d84bfa984fec2aea997fa" prot="public">
          <name>AVL_TREE_NODE_RIGHT</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An <ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> can have left and right children. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="103" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" prot="public" static="no">
        <type>struct _AVLTree</type>
        <definition>typedef struct _AVLTree AVLTree</definition>
        <argsstring></argsstring>
        <name>AVLTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An AVL tree balanced binary tree.</para><para><simplesect kind="see"><para><ref refid="d8/d25/avl-tree_8h_1ac496c67e170a58d961f09a7bf403c425" kindref="member">avl_tree_new</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* AVLTreeKey</definition>
        <argsstring></argsstring>
        <name>AVLTreeKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> key for an <ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* AVLTreeValue</definition>
        <argsstring></argsstring>
        <name>AVLTreeValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> value stored in an <ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" prot="public" static="no">
        <type>struct _AVLTreeNode</type>
        <definition>typedef struct _AVLTreeNode AVLTreeNode</definition>
        <argsstring></argsstring>
        <name>AVLTreeNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> node in an AVL tree.</para><para><simplesect kind="see"><para>avl_tree_node_left_child </para><simplesectsep/><para>avl_tree_node_right_child </para><simplesectsep/><para><ref refid="d8/d25/avl-tree_8h_1a3c35aa1c85dd918acb515baa84e54694" kindref="member">avl_tree_node_parent</ref> </para><simplesectsep/><para><ref refid="d8/d25/avl-tree_8h_1aa884a3222fca2b6dfc01392a595b4fa4" kindref="member">avl_tree_node_key</ref> </para><simplesectsep/><para><ref refid="d8/d25/avl-tree_8h_1a96139fb8f307bfe70779bb5298324ef0" kindref="member">avl_tree_node_value</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="97" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d25/avl-tree_8h_1a2803e9c750970a356a9d8397c4e2484c" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* AVLTreeCompareFunc)(AVLTreeValue value1, AVLTreeValue value2)</definition>
        <argsstring>)(AVLTreeValue value1, AVLTreeValue value2)</argsstring>
        <name>AVLTreeCompareFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of function used to compare keys in an AVL tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> negative number if value1 should be sorted before value2, a positive number if value2 should be sorted before value1, zero if the two keys are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1ac496c67e170a58d961f09a7bf403c425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
        <definition>AVLTree* avl_tree_new</definition>
        <argsstring>(AVLTreeCompareFunc compare_func)</argsstring>
        <name>avl_tree_new</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a2803e9c750970a356a9d8397c4e2484c" kindref="member">AVLTreeCompareFunc</ref></type>
          <declname>compare_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new AVL tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to use when comparing keys in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new AVL tree, or NULL if it was not possible to allocate the memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="129"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a294891d1000e683e50aa8a3a2575b532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avl_tree_free</definition>
        <argsstring>(AVLTree *tree)</argsstring>
        <name>avl_tree_free</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an AVL tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="137"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a1f08f11fed2bfc5f8e6044a230bfcfd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
        <definition>AVLTreeNode* avl_tree_insert</definition>
        <argsstring>(AVLTree *tree, AVLTreeKey key, AVLTreeValue value)</argsstring>
        <name>avl_tree_insert</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new key-value pair into an AVL tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created tree node containing the key and value, or NULL if it was not possible to allocate the new memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1ae9fdfe3711bf67711304ac8bba90bec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avl_tree_remove_node</definition>
        <argsstring>(AVLTree *tree, AVLTreeNode *node)</argsstring>
        <name>avl_tree_remove_node</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a node from a tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a483b0d744afa13cd5b601577ce119601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avl_tree_remove</definition>
        <argsstring>(AVLTree *tree, AVLTreeKey key)</argsstring>
        <name>avl_tree_remove</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an entry from a tree, specifying the key of the node to remove.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key of the node to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero (false) if no node with the specified key was found in the tree, non-zero (true) if a node with the specified key was removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a39eec95b88fec6bfe866c93a883426ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
        <definition>AVLTreeNode* avl_tree_lookup_node</definition>
        <argsstring>(AVLTree *tree, AVLTreeKey key)</argsstring>
        <name>avl_tree_lookup_node</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search an AVL tree for a node with a particular key. This uses the tree as a mapping.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The AVL tree to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tree node containing the given key, or NULL if no entry with the given key is found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="184"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a18ffbc80261017fdfe73940c43a13fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref></type>
        <definition>AVLTreeValue avl_tree_lookup</definition>
        <argsstring>(AVLTree *tree, AVLTreeKey key)</argsstring>
        <name>avl_tree_lookup</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search an AVL tree for a value corresponding to a particular key. This uses the tree as a mapping. Note that this performs identically to <ref refid="d8/d25/avl-tree_8h_1a39eec95b88fec6bfe866c93a883426ed" kindref="member">avl_tree_lookup_node</ref>, except that the value at the node is returned rather than the node itself.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The AVL tree to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value associated with the given key, or <ref refid="d8/d25/avl-tree_8h_1af1715b7baa2efe0c05db22ac7f34f22b" kindref="member">AVL_TREE_NULL</ref> if no entry with the given key is found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="199"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a5bc2b371cce90f63c39f7a77a41e0260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
        <definition>AVLTreeNode* avl_tree_root_node</definition>
        <argsstring>(AVLTree *tree)</argsstring>
        <name>avl_tree_root_node</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the root node of a tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The root node of the tree, or NULL if the tree is empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="209"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1aa884a3222fca2b6dfc01392a595b4fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref></type>
        <definition>AVLTreeKey avl_tree_node_key</definition>
        <argsstring>(AVLTreeNode *node)</argsstring>
        <name>avl_tree_node_key</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the key for a given tree node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key to the given node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="218"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a96139fb8f307bfe70779bb5298324ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref></type>
        <definition>AVLTreeValue avl_tree_node_value</definition>
        <argsstring>(AVLTreeNode *node)</argsstring>
        <name>avl_tree_node_value</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value at a given tree node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the given node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="227"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1aade83ae88d3a8014379b3eb853cddad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
        <definition>AVLTreeNode* avl_tree_node_child</definition>
        <argsstring>(AVLTreeNode *node, AVLTreeNodeSide side)</argsstring>
        <name>avl_tree_node_child</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12" kindref="member">AVLTreeNodeSide</ref></type>
          <declname>side</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the child of a given tree node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>Which child node to get (left or right) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The child of the tree node, or NULL if the node has no child on the given side. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="238"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a3c35aa1c85dd918acb515baa84e54694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
        <definition>AVLTreeNode* avl_tree_node_parent</definition>
        <argsstring>(AVLTreeNode *node)</argsstring>
        <name>avl_tree_node_parent</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the parent node of a given tree node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parent node of the tree node, or NULL if this is the root node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="248"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a9fa18edf4e095c3ae02f7982f02cc9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avl_tree_subtree_height</definition>
        <argsstring>(AVLTreeNode *node)</argsstring>
        <name>avl_tree_subtree_height</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the height of a subtree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The root node of the subtree. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The height of the subtree. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="257"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a1bc1b9c3b002d806838bda051811ad24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref> *</type>
        <definition>AVLTreeValue* avl_tree_to_array</definition>
        <argsstring>(AVLTree *tree)</argsstring>
        <name>avl_tree_to_array</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the keys in an AVL tree into a <ref refid="db/db2/structC" kindref="compound">C</ref> array. This allows the tree to be used as an ordered set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> newly allocated <ref refid="db/db2/structC" kindref="compound">C</ref> array containing all the keys in the tree, in order. The length of the array is equal to the number of entries in the tree (see <ref refid="d8/d25/avl-tree_8h_1a166d99f6bd5c0f1e5469491b910fba8d" kindref="member">avl_tree_num_entries</ref>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="270"/>
      </memberdef>
      <memberdef kind="function" id="d8/d25/avl-tree_8h_1a166d99f6bd5c0f1e5469491b910fba8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avl_tree_num_entries</definition>
        <argsstring>(AVLTree *tree)</argsstring>
        <name>avl_tree_num_entries</name>
        <param>
          <type><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the number of entries in the tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of key-value pairs stored in the tree. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h" line="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Balanced binary tree. </para>    </briefdescription>
    <detaileddescription>
<para>The AVL tree structure is a balanced binary tree which stores a collection of nodes (see <ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref>). Each node has a key and a value associated with it. The nodes are sorted within the tree based on the order of their keys. Modifications to the tree are constructed such that the tree remains balanced at all times (there are always roughly equal numbers of nodes on either side of the tree).</para><para>Balanced binary trees have several uses. They can be used as a mapping (searching for a value based on its key), or as a set of keys which is always ordered.</para><para>To create a new AVL tree, use <ref refid="d8/d25/avl-tree_8h_1ac496c67e170a58d961f09a7bf403c425" kindref="member">avl_tree_new</ref>. To destroy an AVL tree, use <ref refid="d8/d25/avl-tree_8h_1a294891d1000e683e50aa8a3a2575b532" kindref="member">avl_tree_free</ref>.</para><para>To insert a new key-value pair into an AVL tree, use <ref refid="d8/d25/avl-tree_8h_1a1f08f11fed2bfc5f8e6044a230bfcfd2" kindref="member">avl_tree_insert</ref>. To remove an entry from an AVL tree, use <ref refid="d8/d25/avl-tree_8h_1a483b0d744afa13cd5b601577ce119601" kindref="member">avl_tree_remove</ref> or <ref refid="d8/d25/avl-tree_8h_1ae9fdfe3711bf67711304ac8bba90bec7" kindref="member">avl_tree_remove_node</ref>.</para><para>To search an AVL tree, use <ref refid="d8/d25/avl-tree_8h_1a18ffbc80261017fdfe73940c43a13fe4" kindref="member">avl_tree_lookup</ref> or <ref refid="d8/d25/avl-tree_8h_1a39eec95b88fec6bfe866c93a883426ed" kindref="member">avl_tree_lookup_node</ref>.</para><para>Tree nodes can be queried using the <ref refid="d8/d25/avl-tree_8h_1aade83ae88d3a8014379b3eb853cddad3" kindref="member">avl_tree_node_child</ref>, <ref refid="d8/d25/avl-tree_8h_1a3c35aa1c85dd918acb515baa84e54694" kindref="member">avl_tree_node_parent</ref>, <ref refid="d8/d25/avl-tree_8h_1aa884a3222fca2b6dfc01392a595b4fa4" kindref="member">avl_tree_node_key</ref> and <ref refid="d8/d25/avl-tree_8h_1a96139fb8f307bfe70779bb5298324ef0" kindref="member">avl_tree_node_value</ref> functions. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_AVLTREE_H</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_AVLTREE_H</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="67" refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_AVLTree<sp/><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d8/d25/avl-tree_8h_1a585f2d1f19d990e8ef0d488c527e6868" kindref="member">AVLTreeKey</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d8/d25/avl-tree_8h_1aaab036f631b3918b682c168afbfc5fcd" kindref="member">AVLTreeValue</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="d8/d25/avl-tree_8h_1af1715b7baa2efe0c05db22ac7f34f22b" refkind="member"><highlight class="preprocessor">#define<sp/>AVL_TREE_NULL<sp/>((void<sp/>*)<sp/>0)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="97" refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_AVLTreeNode<sp/><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>AVL_TREE_NODE_LEFT<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>AVL_TREE_NODE_RIGHT<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/><ref refid="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12" kindref="member">AVLTreeNodeSide</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="d8/d25/avl-tree_8h_1a2803e9c750970a356a9d8397c4e2484c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d8/d25/avl-tree_8h_1a2803e9c750970a356a9d8397c4e2484c" kindref="member">AVLTreeCompareFunc</ref>)(AVLTreeValue<sp/>value1,<sp/>AVLTreeValue<sp/>value2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1ac496c67e170a58d961f09a7bf403c425" kindref="member">avl_tree_new</ref>(<ref refid="d8/d25/avl-tree_8h_1a2803e9c750970a356a9d8397c4e2484c" kindref="member">AVLTreeCompareFunc</ref><sp/>compare_func);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d25/avl-tree_8h_1a294891d1000e683e50aa8a3a2575b532" kindref="member">avl_tree_free</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1a1f08f11fed2bfc5f8e6044a230bfcfd2" kindref="member">avl_tree_insert</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree,<sp/>AVLTreeKey<sp/>key,<sp/>AVLTreeValue<sp/>value);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d25/avl-tree_8h_1ae9fdfe3711bf67711304ac8bba90bec7" kindref="member">avl_tree_remove_node</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree,<sp/><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d25/avl-tree_8h_1a483b0d744afa13cd5b601577ce119601" kindref="member">avl_tree_remove</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree,<sp/>AVLTreeKey<sp/>key);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1a39eec95b88fec6bfe866c93a883426ed" kindref="member">avl_tree_lookup_node</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree,<sp/>AVLTreeKey<sp/>key);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">AVLTreeValue<sp/><ref refid="d8/d25/avl-tree_8h_1a18ffbc80261017fdfe73940c43a13fe4" kindref="member">avl_tree_lookup</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree,<sp/>AVLTreeKey<sp/>key);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1a5bc2b371cce90f63c39f7a77a41e0260" kindref="member">avl_tree_root_node</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">AVLTreeKey<sp/><ref refid="d8/d25/avl-tree_8h_1aa884a3222fca2b6dfc01392a595b4fa4" kindref="member">avl_tree_node_key</ref>(<ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">AVLTreeValue<sp/><ref refid="d8/d25/avl-tree_8h_1a96139fb8f307bfe70779bb5298324ef0" kindref="member">avl_tree_node_value</ref>(<ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1aade83ae88d3a8014379b3eb853cddad3" kindref="member">avl_tree_node_child</ref>(<ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node,<sp/><ref refid="d8/d25/avl-tree_8h_1a068251e17d3f14ba85c00eb308c7ff12" kindref="member">AVLTreeNodeSide</ref><sp/>side);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*<ref refid="d8/d25/avl-tree_8h_1a3c35aa1c85dd918acb515baa84e54694" kindref="member">avl_tree_node_parent</ref>(<ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d25/avl-tree_8h_1a9fa18edf4e095c3ae02f7982f02cc9f2" kindref="member">avl_tree_subtree_height</ref>(<ref refid="d8/d25/avl-tree_8h_1aa32ea425d992859e0b1c9998440c3a47" kindref="member">AVLTreeNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">AVLTreeValue<sp/>*<ref refid="d8/d25/avl-tree_8h_1a1bc1b9c3b002d806838bda051811ad24" kindref="member">avl_tree_to_array</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d25/avl-tree_8h_1a166d99f6bd5c0f1e5469491b910fba8d" kindref="member">avl_tree_num_entries</ref>(<ref refid="d8/d25/avl-tree_8h_1ad2e7537c958415263db1ca1b988a7095" kindref="member">AVLTree</ref><sp/>*tree);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_AVLTREE_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/avl-tree.h"/>
  </compounddef>
</doxygen>
