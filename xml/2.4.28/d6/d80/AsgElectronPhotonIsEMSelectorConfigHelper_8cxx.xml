<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d80/AsgElectronPhotonIsEMSelectorConfigHelper_8cxx" kind="file">
    <compoundname>AsgElectronPhotonIsEMSelectorConfigHelper.cxx</compoundname>
    <includes refid="d3/d73/AsgElectronPhotonIsEMSelectorConfigHelper_8h" local="yes">ElectronPhotonSelectorTools/AsgElectronPhotonIsEMSelectorConfigHelper.h</includes>
    <includes refid="da/db1/egammaPIDdefs_8h" local="yes">ElectronPhotonSelectorTools/egammaPIDdefs.h</includes>
    <includes refid="d3/d61/AsgMessaging_8h" local="yes">AsgTools/AsgMessaging.h</includes>
    <includes local="yes">TEnv.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="124624">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="124613" relation="include">
        </childnode>
        <childnode refid="124619" relation="include">
        </childnode>
        <childnode refid="124625" relation="include">
        </childnode>
        <childnode refid="124626" relation="include">
        </childnode>
      </node>
      <node id="124626">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="124629">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="124622">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="124613" relation="include">
        </childnode>
        <childnode refid="124619" relation="include">
        </childnode>
        <childnode refid="124623" relation="include">
        </childnode>
      </node>
      <node id="124619">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="124616">
        <label>ElectronPhotonSelectorTools/egammaPIDdefs.h</label>
        <link refid="da/db1/egammaPIDdefs_8h_source"/>
        <childnode refid="124617" relation="include">
        </childnode>
      </node>
      <node id="124613">
        <label>string</label>
      </node>
      <node id="124615">
        <label>map</label>
      </node>
      <node id="124623">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="124611">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonSelectorTools/Root/AsgElectronPhotonIsEMSelectorConfigHelper.cxx</label>
        <link refid="AsgElectronPhotonIsEMSelectorConfigHelper.cxx"/>
        <childnode refid="124612" relation="include">
        </childnode>
        <childnode refid="124616" relation="include">
        </childnode>
        <childnode refid="124618" relation="include">
        </childnode>
        <childnode refid="124630" relation="include">
        </childnode>
        <childnode refid="124631" relation="include">
        </childnode>
        <childnode refid="124621" relation="include">
        </childnode>
      </node>
      <node id="124628">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="124619" relation="include">
        </childnode>
        <childnode refid="124622" relation="include">
        </childnode>
        <childnode refid="124629" relation="include">
        </childnode>
      </node>
      <node id="124614">
        <label>vector</label>
      </node>
      <node id="124621">
        <label>sstream</label>
      </node>
      <node id="124630">
        <label>TEnv.h</label>
      </node>
      <node id="124631">
        <label>iostream</label>
      </node>
      <node id="124612">
        <label>ElectronPhotonSelectorTools/AsgElectronPhotonIsEMSelectorConfigHelper.h</label>
        <link refid="d3/d73/AsgElectronPhotonIsEMSelectorConfigHelper_8h_source"/>
        <childnode refid="124613" relation="include">
        </childnode>
        <childnode refid="124614" relation="include">
        </childnode>
        <childnode refid="124615" relation="include">
        </childnode>
      </node>
      <node id="124627">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="124620">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="124613" relation="include">
        </childnode>
        <childnode refid="124621" relation="include">
        </childnode>
        <childnode refid="124619" relation="include">
        </childnode>
        <childnode refid="124622" relation="include">
        </childnode>
        <childnode refid="124624" relation="include">
        </childnode>
        <childnode refid="124627" relation="include">
        </childnode>
      </node>
      <node id="124625">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="124617">
        <label>climits</label>
      </node>
      <node id="124618">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="124613" relation="include">
        </childnode>
        <childnode refid="124619" relation="include">
        </childnode>
        <childnode refid="124620" relation="include">
        </childnode>
        <childnode refid="124628" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="da/df1/namespaceAsgConfigHelper">AsgConfigHelper</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ElectronPhotonSelectorTools/AsgElectronPhotonIsEMSelectorConfigHelper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ElectronPhotonSelectorTools/egammaPIDdefs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsgTools/AsgMessaging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TEnv.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">AsgConfigHelper{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::string<sp/><sp/>findConfigFile<sp/>(std::string<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,std::string&gt;&amp;<sp/>configmap){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>confFile_itr=configmap.find(input);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(confFile_itr<sp/>==<sp/>configmap.end()){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>msg(</highlight><highlight class="stringliteral">&quot;Egamma::AsgConfigHelper&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.msg(MSG::WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Key<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;input&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>map,<sp/>no<sp/>config<sp/>file<sp/>returned&quot;</highlight><highlight class="normal">&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>confFile_itr-&gt;second;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>findMask<sp/>(std::string<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,unsigned<sp/>int&gt;&amp;<sp/>maskmap){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask_itr=maskmap.find(input);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mask_itr==maskmap.end()){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>msg(</highlight><highlight class="stringliteral">&quot;Egamma::AsgConfigHelper&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.msg(MSG::WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Key<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;input&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>map,<sp/><sp/>egammaPID::EgPidUndefined<sp/>mask<sp/>returned&quot;</highlight><highlight class="normal">&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>egammaPID::EgPidUndefined;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast<sp/>&lt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(mask_itr-&gt;second);<sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strtof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input,<sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>f){<sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>first(0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>last(0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>(<sp/>input.find(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we<sp/>do<sp/>not<sp/>find<sp/>a<sp/>comment<sp/>character<sp/>&quot;#&quot;<sp/>we<sp/>are<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>buffer<sp/>(tmp);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer&gt;&gt;f;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we<sp/>have<sp/>found<sp/>comment<sp/>character<sp/>check<sp/>if<sp/>it<sp/>is<sp/>inlined<sp/>between<sp/>two<sp/>&quot;#&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>(input.find(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,first+1)<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>nor<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>msg(</highlight><highlight class="stringliteral">&quot;Egamma::AsgConfigHelper&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.msg(MSG::WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Improper<sp/>comment<sp/>format<sp/>,<sp/>inline<sp/>comment<sp/>should<sp/>be<sp/>enclosed<sp/>between<sp/>two<sp/>#<sp/><sp/>&quot;</highlight><highlight class="normal">&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>if<sp/>between<sp/>two<sp/>&quot;#&quot;<sp/>remove<sp/>this<sp/>part<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>last<sp/>-<sp/>first<sp/>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp=<sp/>tmp.erase(first,diff+1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>buffer<sp/>(tmp);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer&gt;&gt;f;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>Helper<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input,<sp/><sp/>TEnv&amp;<sp/>env){<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>CutVector;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>env_input(env.GetValue(input.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env_input.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type<sp/>end;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>env_input.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/><sp/>myValue(0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AsgConfigHelper::strtof(env_input.substr(0,end),myValue)){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CutVector.push_back(myValue);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env_input=<sp/>env_input.substr(end+1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CutVector;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//use<sp/>the<sp/>specializations<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">std::vector&lt;double&gt;<sp/>AsgConfigHelper::HelperDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input,<sp/><sp/>TEnv&amp;<sp/>env){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AsgConfigHelper::Helper&lt;double&gt;<sp/>(<sp/>input,env);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">std::vector&lt;float&gt;<sp/>AsgConfigHelper::HelperFloat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input,<sp/><sp/>TEnv&amp;<sp/>env){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AsgConfigHelper::Helper&lt;float&gt;<sp/>(input,<sp/>env);<sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">std::vector&lt;int&gt;<sp/>AsgConfigHelper::HelperInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input,<sp/>TEnv&amp;<sp/>env){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AsgConfigHelper::Helper&lt;int&gt;<sp/>(input,<sp/>env);<sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonSelectorTools/Root/AsgElectronPhotonIsEMSelectorConfigHelper.cxx"/>
  </compounddef>
</doxygen>
