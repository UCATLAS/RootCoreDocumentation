<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d08/arraylist_8h" kind="file">
    <compoundname>arraylist.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108126">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
      <node id="108125">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h</label>
        <link refid="arraylist.h"/>
        <childnode refid="108126" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d4/d6d/struct__ArrayList" prot="public">_ArrayList</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* ArrayListValue</definition>
        <argsstring></argsstring>
        <name>ArrayListValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> value to be stored in an <ref refid="d6/d08/arraylist_8h_1ae207b5cd3fdcfab5502902e314bd89a9" kindref="member">ArrayList</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d08/arraylist_8h_1ae207b5cd3fdcfab5502902e314bd89a9" prot="public" static="no">
        <type>struct <ref refid="d4/d6d/struct__ArrayList" kindref="compound">_ArrayList</ref></type>
        <definition>typedef struct _ArrayList ArrayList</definition>
        <argsstring></argsstring>
        <name>ArrayList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An ArrayList structure. New ArrayLists can be created using the arraylist_new function.</para><para><simplesect kind="see"><para><ref refid="d6/d08/arraylist_8h_1af9cebe40166c8c5c2c35ef7196e7855a" kindref="member">arraylist_new</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d08/arraylist_8h_1a2789547a6117ecd17dae69d0cf04f571" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ArrayListEqualFunc)(ArrayListValue value1, ArrayListValue value2)</definition>
        <argsstring>)(ArrayListValue value1, ArrayListValue value2)</argsstring>
        <name>ArrayListEqualFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two values in an arraylist to determine if they are equal.</para><para><simplesect kind="return"><para>Non-zero if the values are not equal, zero if they are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d08/arraylist_8h_1a430bfe0eaa944d040e7f781f7527b260" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ArrayListCompareFunc)(ArrayListValue value1, ArrayListValue value2)</definition>
        <argsstring>)(ArrayListValue value1, ArrayListValue value2)</argsstring>
        <name>ArrayListCompareFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two values in an arraylist. Used by <ref refid="d6/d08/arraylist_8h_1a82e78e3a104b8e44d5579127b6bf7f6e" kindref="member">arraylist_sort</ref> when sorting values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> negative number if value1 should be sorted before value2, a positive number if value2 should be sorted before value1, zero if the two values are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/d08/arraylist_8h_1af9cebe40166c8c5c2c35ef7196e7855a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
        <definition>ArrayList* arraylist_new</definition>
        <argsstring>(int length)</argsstring>
        <name>arraylist_new</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new ArrayList for use.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Hint to the initialise function as to the amount of memory to allocate initially to the ArrayList. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new arraylist, or NULL if it was not possible to allocate the memory. </para></simplesect>
<simplesect kind="see"><para><ref refid="d6/d08/arraylist_8h_1a9d3e92e13a289e2b2a7fb46f18a7f823" kindref="member">arraylist_free</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a9d3e92e13a289e2b2a7fb46f18a7f823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arraylist_free</definition>
        <argsstring>(ArrayList *arraylist)</argsstring>
        <name>arraylist_free</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an ArrayList and free back the memory it uses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1aa120346d41979a4578d2e622002362f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arraylist_append</definition>
        <argsstring>(ArrayList *arraylist, ArrayListValue data)</argsstring>
        <name>arraylist_append</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" kindref="member">ArrayListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a value to the end of an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the request was successful, zero if it was not possible to allocate more memory for the new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a2a62519d54ae7060528fab0ec0da30b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arraylist_prepend</definition>
        <argsstring>(ArrayList *arraylist, ArrayListValue data)</argsstring>
        <name>arraylist_prepend</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" kindref="member">ArrayListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepend a value to the beginning of an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the request was successful, zero if it was not possible to allocate more memory for the new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="145"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a25e42b2784ac85da291190cadffef3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arraylist_remove</definition>
        <argsstring>(ArrayList *arraylist, int index)</argsstring>
        <name>arraylist_remove</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the entry at the specified location in an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the entry to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="154"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1ac40490b2f7f2026fcdf53767e36af4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arraylist_remove_range</definition>
        <argsstring>(ArrayList *arraylist, int index, int length)</argsstring>
        <name>arraylist_remove_range</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a range of entries at the specified location in an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the start of the range to remove. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the range to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="164"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a2c37f00437ea380331d02aa4f1ec0779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arraylist_insert</definition>
        <argsstring>(ArrayList *arraylist, int index, ArrayListValue data)</argsstring>
        <name>arraylist_insert</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" kindref="member">ArrayListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a value at the specified index in an ArrayList. The index where the new value can be inserted is limited by the size of the ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index at which to insert the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if unsuccessful, else non-zero if successful (due to an invalid index or if it was impossible to allocate more memory). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="179"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a0f3eaa2f45192c563c3138107a09f7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arraylist_index_of</definition>
        <argsstring>(ArrayList *arraylist, ArrayListEqualFunc callback, ArrayListValue data)</argsstring>
        <name>arraylist_index_of</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1a2789547a6117ecd17dae69d0cf04f571" kindref="member">ArrayListEqualFunc</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" kindref="member">ArrayListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the index of a particular value in an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be invoked to compare values in the list with the value to be searched for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the value if found, or -1 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="194"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a2215810e82a85c4ada5ce91d560d2669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arraylist_clear</definition>
        <argsstring>(ArrayList *arraylist)</argsstring>
        <name>arraylist_clear</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all entries from an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="202"/>
      </memberdef>
      <memberdef kind="function" id="d6/d08/arraylist_8h_1a82e78e3a104b8e44d5579127b6bf7f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arraylist_sort</definition>
        <argsstring>(ArrayList *arraylist, ArrayListCompareFunc compare_func)</argsstring>
        <name>arraylist_sort</name>
        <param>
          <type><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref> *</type>
          <declname>arraylist</declname>
        </param>
        <param>
          <type><ref refid="d6/d08/arraylist_8h_1a430bfe0eaa944d040e7f781f7527b260" kindref="member">ArrayListCompareFunc</ref></type>
          <declname>compare_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort the values in an ArrayList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraylist</parametername>
</parameternamelist>
<parameterdescription>
<para>The ArrayList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to compare values in sorting. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h" line="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Automatically resizing array. </para>    </briefdescription>
    <detaileddescription>
<para>ArrayLists are arrays of pointers which automatically increase in size.</para><para>To create an ArrayList, use <ref refid="d6/d08/arraylist_8h_1af9cebe40166c8c5c2c35ef7196e7855a" kindref="member">arraylist_new</ref>. To destroy an ArrayList, use <ref refid="d6/d08/arraylist_8h_1a9d3e92e13a289e2b2a7fb46f18a7f823" kindref="member">arraylist_free</ref>.</para><para>To add a value to an ArrayList, use <ref refid="d6/d08/arraylist_8h_1a2a62519d54ae7060528fab0ec0da30b5" kindref="member">arraylist_prepend</ref>, <ref refid="d6/d08/arraylist_8h_1aa120346d41979a4578d2e622002362f5" kindref="member">arraylist_append</ref>, or <ref refid="d6/d08/arraylist_8h_1a2c37f00437ea380331d02aa4f1ec0779" kindref="member">arraylist_insert</ref>.</para><para>To remove a value from an ArrayList, use <ref refid="d6/d08/arraylist_8h_1a25e42b2784ac85da291190cadffef3b1" kindref="member">arraylist_remove</ref> or <ref refid="d6/d08/arraylist_8h_1ac40490b2f7f2026fcdf53767e36af4e2" kindref="member">arraylist_remove_range</ref>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_ARRAYLIST_H</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_ARRAYLIST_H</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="50" refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d6/d08/arraylist_8h_1ac7463298961f106d5739fbbbc25ad9bc" kindref="member">ArrayListValue</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="d6/d08/arraylist_8h_1ae207b5cd3fdcfab5502902e314bd89a9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d6d/struct__ArrayList" kindref="compound">_ArrayList</ref><sp/><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="d4/d6d/struct__ArrayList" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d6d/struct__ArrayList" kindref="compound">_ArrayList</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="d4/d6d/struct__ArrayList_1aee22b99bd1992fccca84927d81d7faa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayListValue<sp/>*<ref refid="d4/d6d/struct__ArrayList_1aee22b99bd1992fccca84927d81d7faa6" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="d4/d6d/struct__ArrayList_1ae9250a3ece32401c3330c724f9eebaff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d6d/struct__ArrayList_1ae9250a3ece32401c3330c724f9eebaff" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="d4/d6d/struct__ArrayList_1ace9acf8bb2cf678ed3096061f80d40df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d6d/struct__ArrayList_1ace9acf8bb2cf678ed3096061f80d40df" kindref="member">_alloced</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="d6/d08/arraylist_8h_1a2789547a6117ecd17dae69d0cf04f571" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d6/d08/arraylist_8h_1a2789547a6117ecd17dae69d0cf04f571" kindref="member">ArrayListEqualFunc</ref>)(ArrayListValue<sp/>value1,<sp/>ArrayListValue<sp/>value2);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="d6/d08/arraylist_8h_1a430bfe0eaa944d040e7f781f7527b260" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d6/d08/arraylist_8h_1a430bfe0eaa944d040e7f781f7527b260" kindref="member">ArrayListCompareFunc</ref>)(ArrayListValue<sp/>value1,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayListValue<sp/>value2);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*<ref refid="d6/d08/arraylist_8h_1af9cebe40166c8c5c2c35ef7196e7855a" kindref="member">arraylist_new</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a9d3e92e13a289e2b2a7fb46f18a7f823" kindref="member">arraylist_free</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1aa120346d41979a4578d2e622002362f5" kindref="member">arraylist_append</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/>ArrayListValue<sp/>data);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a2a62519d54ae7060528fab0ec0da30b5" kindref="member">arraylist_prepend</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/>ArrayListValue<sp/>data);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a25e42b2784ac85da291190cadffef3b1" kindref="member">arraylist_remove</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1ac40490b2f7f2026fcdf53767e36af4e2" kindref="member">arraylist_remove_range</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a2c37f00437ea380331d02aa4f1ec0779" kindref="member">arraylist_insert</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>ArrayListValue<sp/>data);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a0f3eaa2f45192c563c3138107a09f7d9" kindref="member">arraylist_index_of</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d08/arraylist_8h_1a2789547a6117ecd17dae69d0cf04f571" kindref="member">ArrayListEqualFunc</ref><sp/>callback,<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayListValue<sp/>data);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a2215810e82a85c4ada5ce91d560d2669" kindref="member">arraylist_clear</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/arraylist_8h_1a82e78e3a104b8e44d5579127b6bf7f6e" kindref="member">arraylist_sort</ref>(<ref refid="d4/d6d/struct__ArrayList" kindref="compound">ArrayList</ref><sp/>*arraylist,<sp/><ref refid="d6/d08/arraylist_8h_1a430bfe0eaa944d040e7f781f7527b260" kindref="member">ArrayListCompareFunc</ref><sp/>compare_func);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_ARRAYLIST_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/arraylist.h"/>
  </compounddef>
</doxygen>
