<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d6e/classElementLink" kind="class" prot="public">
    <compoundname>ElementLink</compoundname>
    <basecompoundref refid="d9/dec/classSelectNoInstance" prot="public" virt="non-virtual">SelectNoInstance</basecompoundref>
    <basecompoundref refid="df/d13/classElementLinkBase" prot="public" virt="non-virtual">ElementLinkBase</basecompoundref>
    <includes refid="dc/d24/ElementLink_8h" local="no">ElementLink.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>STORABLE</declname>
        <defname>STORABLE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Type definitions taken from the StoreGate-based implementation</header>
      <description><para><anchor id="_1amgrp3edf68b75fd7efb33ad9b724b1b994c3"/> </para></description>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" prot="public" static="no">
        <type>std::string</type>
        <definition>typedef std::string ElementLink&lt; STORABLE &gt;::ID_type</definition>
        <argsstring></argsstring>
        <name>ID_type</name>
        <briefdescription>
<para>Type of the &quot;regular&quot; identifiers in the event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t ElementLink&lt; STORABLE &gt;::sgkey_t</definition>
        <argsstring></argsstring>
        <name>sgkey_t</name>
        <briefdescription>
<para>Integer identifier for the object in the event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" prot="public" static="no">
        <type>const STORABLE &amp;</type>
        <definition>typedef const STORABLE&amp; ElementLink&lt; STORABLE &gt;::BaseConstReference</definition>
        <argsstring></argsstring>
        <name>BaseConstReference</name>
        <briefdescription>
<para>Constant reference to the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a3b1cf74cf942a2acd09d10f4fd01689e" prot="public" static="no">
        <type>const STORABLE *</type>
        <definition>typedef const STORABLE* ElementLink&lt; STORABLE &gt;::BaseConstPointer</definition>
        <argsstring></argsstring>
        <name>BaseConstPointer</name>
        <briefdescription>
<para>Constant pointer to the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t ElementLink&lt; STORABLE &gt;::index_type</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
<para>Type of the index used on the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a52afab150c15e9085527c9792a272073" prot="public" static="no">
        <type>STORABLE::value_type</type>
        <definition>typedef STORABLE::value_type ElementLink&lt; STORABLE &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Type of the values inside the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1af449d30d0cd2f7ae5cc0003489a69491" prot="public" static="no">
        <type>STORABLE::const_iterator</type>
        <definition>typedef STORABLE::const_iterator ElementLink&lt; STORABLE &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Constant iterator type for the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" prot="public" static="no">
        <type><ref refid="dd/d6f/structTypeTools_1_1Copy" kindref="compound">TypeTools::Copy</ref>&lt; <ref refid="d6/d6e/classElementLink_1a52afab150c15e9085527c9792a272073" kindref="member">value_type</ref> &gt;::type</type>
        <definition>typedef TypeTools::Copy&lt; value_type &gt;::type ElementLink&lt; STORABLE &gt;::ElementType</definition>
        <argsstring></argsstring>
        <name>ElementType</name>
        <briefdescription>
<para>Type of the elements in the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a97463eb992798c3d19cc0a98444ba7a2" prot="public" static="no">
        <type><ref refid="dd/d6f/structTypeTools_1_1Copy" kindref="compound">TypeTools::Copy</ref>&lt; <ref refid="d6/d6e/classElementLink_1a52afab150c15e9085527c9792a272073" kindref="member">value_type</ref> &gt;::const_reference</type>
        <definition>typedef TypeTools::Copy&lt; value_type &gt;::const_reference ElementLink&lt; STORABLE &gt;::ElementConstReference</definition>
        <argsstring></argsstring>
        <name>ElementConstReference</name>
        <briefdescription>
<para>Constant reference to an element in the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a1c1945a1dad76c024ef166ed96e23d41" prot="public" static="no">
        <type><ref refid="dd/d6f/structTypeTools_1_1Copy" kindref="compound">TypeTools::Copy</ref>&lt; <ref refid="d6/d6e/classElementLink_1a52afab150c15e9085527c9792a272073" kindref="member">value_type</ref> &gt;::const_pointer</type>
        <definition>typedef TypeTools::Copy&lt; value_type &gt;::const_pointer ElementLink&lt; STORABLE &gt;::ElementConstPointer</definition>
        <argsstring></argsstring>
        <name>ElementConstPointer</name>
        <briefdescription>
<para>Constant pointer to an element in the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para><anchor id="_1amgrp559a25fdb98a7d1fd1c3771ac568d5e9"/> </para></description>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ad74e9a40b1cee81878db2b54a96ed815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>()</argsstring>
        <name>ElementLink</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a1a790a31bd61c596a0646a298f523cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(xAOD::TVirtualEvent *event)</argsstring>
        <name>ElementLink</name>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Constructor setting up the link with a specific event object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1aba943f814e8c52268b32079006a95c43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(const ID_type &amp;key, index_type index, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type>const <ref refid="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" kindref="member">ID_type</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct object from storable key and element index (fast). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="35" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a867061fee344f8e93b3e2741377b30b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(sgkey_t id, index_type index, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" kindref="member">sgkey_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct object from storable id and element index (fastest). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="51" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a1d12f233127d3b65513e604a893f14d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(const ID_type &amp;key, index_type index, ElementType element, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type>const <ref refid="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" kindref="member">ID_type</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
          <declname>element</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from a storable key and element index, taking the element object from the user. Be careful, no checks are done on the received object! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="64" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a993a7ac035618d376535cac385e1b14e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(sgkey_t id, index_type index, ElementType element, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" kindref="member">sgkey_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
          <declname>element</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from a storable id and element index, taking the element object from the user. Be careful, no checks are done on the received object! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="81" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1aebac5cba1d9f2a60957948bafba87ad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(BaseConstReference container, index_type index, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
          <declname>container</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct from a container reference and element index (slower). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="102" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="95" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1acce0406bbae10b3fe73162422aab620d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(ElementType element, BaseConstReference container, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>ElementLink</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
          <declname>element</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
          <declname>container</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct from a container reference and element pointer (slowest). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="105" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="112" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a2093d6e49a6c442b0cec588e73da3432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementLink</definition>
        <argsstring>(const ElementLink &amp;parent)</argsstring>
        <name>ElementLink</name>
        <param>
          <type>const <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Copy-constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="131" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setter functions</header>
      <description><para><anchor id="_1amgrpb9f0c77f1dfb920b5d8ef4bcad79a249"/> </para></description>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a8684035f6e2b67c7fdf5ff9d241f45a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::toIndexedElement</definition>
        <argsstring>(BaseConstReference container, index_type index)</argsstring>
        <name>toIndexedElement</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
          <declname>container</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Set link to point to given index (slower). </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to set up an existing element link to point at an indexed element of a specific object in memory. The link needs to ask the event for the ID of the received object, so the function can take a bit of time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container that the link should point to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element inside the container that the link needs to point to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> dummy value. Failure is signalled by an exception. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="174" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a56216724bc028dc075fe50edaad52551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::toContainedElement</definition>
        <argsstring>(BaseConstReference container, ElementType element)</argsstring>
        <name>toContainedElement</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
          <declname>container</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Set link to point to given element (slowest). </para>        </briefdescription>
        <detaileddescription>
<para>This is probably the slowest function of the class. It first needs to look up the ID of the received container inside the event, and then needs to find the index of the object within this container.</para><para>Avoid using if at all possible!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container that the link should point to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element within the container that the link should point to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> dymmy value. Failure is signalled by an exception. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="121" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="203" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a056f02ecff42be70ad0a333c3500f612" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::setElement</definition>
        <argsstring>(ElementType element)</argsstring>
        <name>setElement</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Set link to point to an Element (slowest). </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to set the link to point to a new element inside the container that it already points to. The function is slow, as it needs to find the index of the element inside the container.</para><para>Avoid using if at all possible!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element within the container that the link should point to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> dymmy value. Failure is signalled by an exception. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="124" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="232" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1aee77dc8370e564cbed949a823d14574b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::setStorableObject</definition>
        <argsstring>(BaseConstReference data, bool replace=false)</argsstring>
        <name>setStorableObject</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set link storable to data object pointed by data (slower). </para>        </briefdescription>
        <detaileddescription>
<para>This function tells the object to start using a new container. It should be used together with the setElement function most of the time. It is however a slow function, so please avoid it if possible.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The container that the link should point to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the element pointer will be replaced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> dymmy value. Failure is signalled by an exception. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="126" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="255" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a982d19cd6240db223568303322c1aefe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ElementLink&lt; STORABLE &gt;::resetWithKeyAndIndex</definition>
        <argsstring>(const ID_type &amp;key, index_type index, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>resetWithKeyAndIndex</name>
        <param>
          <type>const <ref refid="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" kindref="member">ID_type</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reset with storable key and element index (fast). </para>        </briefdescription>
        <detaileddescription>
<para>This is probably the most preferred way of setting an existing <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> to point to a new element. It doesn&apos;t need to do any costly lookups.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The user-readable key of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element inside its container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>An alternative event object to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="130" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="287" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a76c788b161e460e2f464f4d67b364137" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ElementLink&lt; STORABLE &gt;::resetWithKeyAndIndex</definition>
        <argsstring>(sgkey_t id, index_type index, xAOD::TVirtualEvent *event=0)</argsstring>
        <name>resetWithKeyAndIndex</name>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" kindref="member">sgkey_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
          <declname>event</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reset with storable id and element index (fastest). </para>        </briefdescription>
        <detaileddescription>
<para>This is the fastest way of setting an existing <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> to point to a new element. It&apos;s just a bit more inconvenient than the function receiving a string identifier for the container.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> hashed identifier for the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element inside its container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>An alternative event object to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="133" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="314" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1af4e5131bf599e1da04689467480d2a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ElementLink&lt; STORABLE &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset to default state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="135" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="332" bodyend="339"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessor functions/operators</header>
      <description><para><anchor id="_1amgrp10a20e34adcf1ce75ad226cf8dd013e6"/> </para></description>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ae62d1d93ea5acfdb1dc8190cfb16d428" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a3b1cf74cf942a2acd09d10f4fd01689e" kindref="member">BaseConstPointer</ref></type>
        <definition>ElementLink&lt; STORABLE &gt;::BaseConstPointer ElementLink&lt; STORABLE &gt;::getStorableObjectPointer</definition>
        <argsstring>() const </argsstring>
        <name>getStorableObjectPointer</name>
        <briefdescription>
<para>Retrieve storable object pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="143" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="351" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a4d995f345299852cc84bc651c296a801" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" kindref="member">BaseConstReference</ref></type>
        <definition>ElementLink&lt; STORABLE &gt;::BaseConstReference ElementLink&lt; STORABLE &gt;::getStorableObjectRef</definition>
        <argsstring>() const </argsstring>
        <name>getStorableObjectRef</name>
        <briefdescription>
<para>Retrieve storable object reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="361" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ae5d51c9b09a501994b3c319cfe9a0fcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" kindref="member">index_type</ref></type>
        <definition>index_type ElementLink&lt; STORABLE &gt;::index</definition>
        <argsstring>() const </argsstring>
        <name>index</name>
        <briefdescription>
<para>Get the index of the element inside of its container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="148" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a3907f8e541dbe33001238a68eea9aa89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" kindref="member">ID_type</ref> &amp;</type>
        <definition>const ElementLink&lt; STORABLE &gt;::ID_type &amp; ElementLink&lt; STORABLE &gt;::dataID</definition>
        <argsstring>() const </argsstring>
        <name>dataID</name>
        <briefdescription>
<para>Get the key that we reference, as a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="151" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a02d30af1bc55d7a125ea15d3c2463bd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" kindref="member">sgkey_t</ref></type>
        <definition>sgkey_t ElementLink&lt; STORABLE &gt;::key</definition>
        <argsstring>() const </argsstring>
        <name>key</name>
        <briefdescription>
<para>Get the key that we reference, as a hash. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="153" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a0234d5cf683b5776276fe5bf56d2b6e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a97463eb992798c3d19cc0a98444ba7a2" kindref="member">ElementConstReference</ref></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementConstReference ElementLink&lt; STORABLE &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Get a reference to the object in question. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a31e58171f07ee62813919bf12b1a1e6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a1c1945a1dad76c024ef166ed96e23d41" kindref="member">ElementConstPointer</ref></type>
        <definition>ElementConstPointer ElementLink&lt; STORABLE &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Access the object as a smart pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a13c596bd88dff9703a1d29f87a98408d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ElementLink&lt; STORABLE &gt;::operator ElementConstPointer</definition>
        <argsstring>() const </argsstring>
        <name>operator ElementConstPointer</name>
        <briefdescription>
<para>Auto-convert to the element type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a179a216d884a035c47aee2902b10af13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a1c1945a1dad76c024ef166ed96e23d41" kindref="member">ElementConstPointer</ref></type>
        <definition>ElementLink&lt; STORABLE &gt;::ElementConstPointer ElementLink&lt; STORABLE &gt;::cptr</definition>
        <argsstring>() const </argsstring>
        <name>cptr</name>
        <briefdescription>
<para>Get a constant pointer to the referenced object. </para>        </briefdescription>
        <detaileddescription>
<para>This is the only function in the <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> code that tries to retrieve information from the event.</para><para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> constant pointer to the element, or a null pointer if unsuccessful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Default key, calculated just once: </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="163" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="406" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a5f30b71e430164fc4ee11880e4bb8d12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::isValid</definition>
        <argsstring>() const </argsstring>
        <name>isValid</name>
        <briefdescription>
<para>Check if the element can be found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Default key, calculated just once: </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="446" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1adefb00c9d8917365973e0c4b0782108a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::operator!</definition>
        <argsstring>() const </argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Operator checking the validity of the link. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="168" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ae5471b4e488646442cac754cfab3513c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
        <definition>ElementType ElementLink&lt; STORABLE &gt;::cachedElement</definition>
        <argsstring>() const </argsstring>
        <name>cachedElement</name>
        <briefdescription>
<para>Access the currently cached element. Doesn&apos;t trigger lookup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a72cc37bf6da2acd049401e0ee8606997" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::hasCachedElement</definition>
        <argsstring>() const </argsstring>
        <name>hasCachedElement</name>
        <briefdescription>
<para>Check if the link has a cached element pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="173" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="173" bodyend="173"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a523981754b34c144dce8a4a30623b97c" prot="public" static="no">
        <type><ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref>&lt; STORABLE &gt;</type>
        <definition>typedef ElementLink&lt; STORABLE &gt; ElementLink&lt; STORABLE &gt;::self</definition>
        <argsstring></argsstring>
        <name>self</name>
        <briefdescription>
<para>Helper definition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="220" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d6/d6e/classElementLink_1a7caf28363241300ea64c0954fad1b661" prot="private" static="no">
        <type>ROOT_SELECTION_NS::ElementLink&lt; STORABLE &gt;::<ref refid="d6/d6e/classElementLink" kindref="compound">self</ref></type>
        <definition>typedef ROOT_SELECTION_NS::ElementLink&lt; STORABLE &gt;::self ElementLink&lt; STORABLE &gt;::DictSel</definition>
        <argsstring></argsstring>
        <name>DictSel</name>
        <briefdescription>
<para>Needed to take the Reflex/Cling specifications into account. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="202" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a28af9f603f65fec48e4e9bd69aa7ee85" prot="private" static="no" mutable="yes">
        <type><ref refid="d6/d6e/classElementLink_1a3b1cf74cf942a2acd09d10f4fd01689e" kindref="member">BaseConstPointer</ref></type>
        <definition>BaseConstPointer ElementLink&lt; STORABLE &gt;::m_container</definition>
        <argsstring></argsstring>
        <name>m_container</name>
        <briefdescription>
<para>Cached pointer to the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="192" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a9ccf4d49499300924e8fc5bbbcdebfa2" prot="private" static="no" mutable="yes">
        <type><ref refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" kindref="member">ElementType</ref></type>
        <definition>ElementType ElementLink&lt; STORABLE &gt;::m_element</definition>
        <argsstring></argsstring>
        <name>m_element</name>
        <briefdescription>
<para>Cached pointer to the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a136808f7a8265b5c060efb99d196756c" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::m_elementCached</definition>
        <argsstring></argsstring>
        <name>m_elementCached</name>
        <briefdescription>
<para>Status of the cached pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="196" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1abff35269a4a733cce1d6078c1e591161" prot="private" static="no" mutable="no">
        <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
        <definition>xAOD::TVirtualEvent* ElementLink&lt; STORABLE &gt;::m_event</definition>
        <argsstring></argsstring>
        <name>m_event</name>
        <briefdescription>
<para>Pointer to the event object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="198" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a45ae62c02417d293ae2f96ce15c3cc2b" prot="public" static="no" mutable="no">
        <type>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt;</type>
        <definition>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt; ElementLink&lt; STORABLE &gt;::m_container</definition>
        <argsstring></argsstring>
        <name>m_container</name>
        <briefdescription>
<para>Mark all transient members:. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="236" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a632c9d25e687dd603b454d181ba1e871" prot="public" static="no" mutable="no">
        <type>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt;</type>
        <definition>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt; ElementLink&lt; STORABLE &gt;::m_element</definition>
        <argsstring></argsstring>
        <name>m_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a4e154e518e61b591e7f520a0b5b661da" prot="public" static="no" mutable="no">
        <type>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt;</type>
        <definition>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt; ElementLink&lt; STORABLE &gt;::m_elementCached</definition>
        <argsstring></argsstring>
        <name>m_elementCached</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d6e/classElementLink_1a46115901c6a92a2d638874df74aa412d" prot="public" static="no" mutable="no">
        <type>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt;</type>
        <definition>ROOT_SELECTION_NS::MemberAttributes&lt; kTransient &gt; ElementLink&lt; STORABLE &gt;::m_event</definition>
        <argsstring></argsstring>
        <name>m_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="239" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d6/d6e/classElementLink_1a745f239bc5e72c38f98290fc77c3c0cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> &amp;</type>
        <definition>ElementLink&lt; STORABLE &gt; &amp; ElementLink&lt; STORABLE &gt;::operator=</definition>
        <argsstring>(const ElementLink &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="113" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="143" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ac602256461982b939438901240bbe9ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/daf/classxAOD_1_1TVirtualEvent" kindref="compound">xAOD::TVirtualEvent</ref> *</type>
        <definition>xAOD::TVirtualEvent* ElementLink&lt; STORABLE &gt;::source</definition>
        <argsstring>() const </argsstring>
        <name>source</name>
        <briefdescription>
<para>Get the data source for the reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1a5e5d608091e6c4524bd5ffc69d83466d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::toPersistent</definition>
        <argsstring>()</argsstring>
        <name>toPersistent</name>
        <briefdescription>
<para>Dummy function provinding the offline interface. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="181" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="181" bodyend="181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d6/d6e/classElementLink_1a6fd8cbba60beaae86e466fc3d61f5d32" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ElementLink&lt; STORABLE &gt;::toTransient</definition>
        <argsstring>()</argsstring>
        <name>toTransient</name>
        <reimplements refid="df/d13/classElementLinkBase_1ad6ee555a2a0f0522cdc948757982b9b8">toTransient</reimplements>
        <briefdescription>
<para>Reset the object&apos;s internal cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="185" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="480" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1ae0669986e568f6305e8fa36066f9abc8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ElementLink&lt; STORABLE &gt;::findIdentifier</definition>
        <argsstring>()</argsstring>
        <name>findIdentifier</name>
        <briefdescription>
<para>Find the identifier of the object being pointed to. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used internally to find the hashed identifier for a container that was given to the <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> by reference. It throws an exception if the object can&apos;t be found in the event. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="494" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="d6/d6e/classElementLink_1afc71c5575c3cf792d50f7d4609a39712" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ElementLink&lt; STORABLE &gt;::findIndex</definition>
        <argsstring>()</argsstring>
        <name>findIndex</name>
        <briefdescription>
<para>Find the index of an element inside the container. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used internally to find the index of a given element inside the container. It has to do a linear search, so it&apos;s quite slow... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.icc" bodystart="513" bodyend="538"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> implementation for ROOT usage. </para>    </briefdescription>
    <detaileddescription>
<para>This class follows the interface of the offline implementation of <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> as closely as reasonably possible. Its functions are supposed to behave the same way as the functions of the offline <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref> class.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>649074 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-02-23 17:51:40 +0100 (Mon, 23 Feb 2015) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5938">
        <label>ElementLink&lt; STORABLE &gt;</label>
        <link refid="d6/d6e/classElementLink"/>
        <childnode refid="5939" relation="public-inheritance">
        </childnode>
        <childnode refid="5940" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5939">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="5940">
        <label>ElementLinkBase</label>
        <link refid="df/d13/classElementLinkBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5945">
        <label>STORABLE</label>
      </node>
      <node id="5941">
        <label>ElementLink&lt; STORABLE &gt;</label>
        <link refid="d6/d6e/classElementLink"/>
        <childnode refid="5942" relation="public-inheritance">
        </childnode>
        <childnode refid="5943" relation="public-inheritance">
        </childnode>
        <childnode refid="5944" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="5945" relation="usage">
          <edgelabel>m_container</edgelabel>
        </childnode>
        <childnode refid="5946" relation="usage">
          <edgelabel>m_element</edgelabel>
        </childnode>
      </node>
      <node id="5944">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="5946">
        <label>TypeTools::Copy&lt; value_type &gt;</label>
        <link refid="dd/d6f/structTypeTools_1_1Copy"/>
      </node>
      <node id="5942">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="5943">
        <label>ElementLinkBase</label>
        <link refid="df/d13/classElementLinkBase"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthLinks/AthLinks/ElementLink.h" bodystart="39" bodyend="204"/>
    <listofallmembers>
      <member refid="d6/d6e/classElementLink_1a3b1cf74cf942a2acd09d10f4fd01689e" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>BaseConstPointer</name></member>
      <member refid="d6/d6e/classElementLink_1aaf54a120406f7bfdddb37717a9a7966f" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>BaseConstReference</name></member>
      <member refid="d6/d6e/classElementLink_1ae5471b4e488646442cac754cfab3513c" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>cachedElement</name></member>
      <member refid="d6/d6e/classElementLink_1af449d30d0cd2f7ae5cc0003489a69491" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>const_iterator</name></member>
      <member refid="d6/d6e/classElementLink_1a179a216d884a035c47aee2902b10af13" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>cptr</name></member>
      <member refid="d6/d6e/classElementLink_1a3907f8e541dbe33001238a68eea9aa89" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>dataID</name></member>
      <member refid="d6/d6e/classElementLink_1a7caf28363241300ea64c0954fad1b661" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>DictSel</name></member>
      <member refid="d6/d6e/classElementLink_1a1c1945a1dad76c024ef166ed96e23d41" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementConstPointer</name></member>
      <member refid="d6/d6e/classElementLink_1a97463eb992798c3d19cc0a98444ba7a2" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementConstReference</name></member>
      <member refid="d6/d6e/classElementLink_1ad74e9a40b1cee81878db2b54a96ed815" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1a1a790a31bd61c596a0646a298f523cf2" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1aba943f814e8c52268b32079006a95c43" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1a867061fee344f8e93b3e2741377b30b6" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1a1d12f233127d3b65513e604a893f14d6" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1a993a7ac035618d376535cac385e1b14e" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1aebac5cba1d9f2a60957948bafba87ad5" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1acce0406bbae10b3fe73162422aab620d" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="d6/d6e/classElementLink_1a2093d6e49a6c442b0cec588e73da3432" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLink</name></member>
      <member refid="df/d13/classElementLinkBase_1aa987996089b991a6a3ce7b5f2c7364f9" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementLinkBase</name></member>
      <member refid="d6/d6e/classElementLink_1a21c5d37e4f44320e2b97579d20a2fa85" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ElementType</name></member>
      <member refid="d6/d6e/classElementLink_1ae0669986e568f6305e8fa36066f9abc8" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>findIdentifier</name></member>
      <member refid="d6/d6e/classElementLink_1afc71c5575c3cf792d50f7d4609a39712" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>findIndex</name></member>
      <member refid="d6/d6e/classElementLink_1ae62d1d93ea5acfdb1dc8190cfb16d428" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>getStorableObjectPointer</name></member>
      <member refid="d6/d6e/classElementLink_1a4d995f345299852cc84bc651c296a801" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>getStorableObjectRef</name></member>
      <member refid="d6/d6e/classElementLink_1a72cc37bf6da2acd049401e0ee8606997" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>hasCachedElement</name></member>
      <member refid="d6/d6e/classElementLink_1a9828fe215765ea7caf4c243edd2d8647" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>ID_type</name></member>
      <member refid="d6/d6e/classElementLink_1ae5d51c9b09a501994b3c319cfe9a0fcc" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>index</name></member>
      <member refid="d6/d6e/classElementLink_1ac25ca9007a7b46c0880e3073143395a3" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>index_type</name></member>
      <member refid="d6/d6e/classElementLink_1a5f30b71e430164fc4ee11880e4bb8d12" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>isValid</name></member>
      <member refid="d6/d6e/classElementLink_1a02d30af1bc55d7a125ea15d3c2463bd2" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>key</name></member>
      <member refid="d6/d6e/classElementLink_1a28af9f603f65fec48e4e9bd69aa7ee85" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>m_container</name></member>
      <member refid="d6/d6e/classElementLink_1a45ae62c02417d293ae2f96ce15c3cc2b" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>m_container</name></member>
      <member refid="d6/d6e/classElementLink_1a9ccf4d49499300924e8fc5bbbcdebfa2" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>m_element</name></member>
      <member refid="d6/d6e/classElementLink_1a632c9d25e687dd603b454d181ba1e871" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>m_element</name></member>
      <member refid="d6/d6e/classElementLink_1a136808f7a8265b5c060efb99d196756c" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>m_elementCached</name></member>
      <member refid="d6/d6e/classElementLink_1a4e154e518e61b591e7f520a0b5b661da" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>m_elementCached</name></member>
      <member refid="d6/d6e/classElementLink_1abff35269a4a733cce1d6078c1e591161" prot="private" virt="non-virtual"><scope>ElementLink</scope><name>m_event</name></member>
      <member refid="d6/d6e/classElementLink_1a46115901c6a92a2d638874df74aa412d" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>m_event</name></member>
      <member refid="df/d13/classElementLinkBase_1a0fd76dcfbf1103ae618ee7fad8567ea1" prot="protected" virt="non-virtual"><scope>ElementLink</scope><name>m_isDirectIO</name></member>
      <member refid="df/d13/classElementLinkBase_1a7e748640732b5c9431314c724e84e121" prot="protected" virt="non-virtual"><scope>ElementLink</scope><name>m_persIndex</name></member>
      <member refid="df/d13/classElementLinkBase_1ab5f1f4e03b789fadac0c5ca59aae2d9c" prot="protected" virt="non-virtual"><scope>ElementLink</scope><name>m_persKey</name></member>
      <member refid="d6/d6e/classElementLink_1a13c596bd88dff9703a1d29f87a98408d" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>operator ElementConstPointer</name></member>
      <member refid="d6/d6e/classElementLink_1adefb00c9d8917365973e0c4b0782108a" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>operator!</name></member>
      <member refid="d6/d6e/classElementLink_1a0234d5cf683b5776276fe5bf56d2b6e8" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>operator*</name></member>
      <member refid="d6/d6e/classElementLink_1a31e58171f07ee62813919bf12b1a1e6e" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>operator-&gt;</name></member>
      <member refid="d6/d6e/classElementLink_1a745f239bc5e72c38f98290fc77c3c0cf" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>operator=</name></member>
      <member refid="df/d13/classElementLinkBase_1ad736453ba749c983ee3c0943c200ce8f" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>persIndex</name></member>
      <member refid="df/d13/classElementLinkBase_1ac60ad48854f89fe95c4e5e19338a7d62" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>persKey</name></member>
      <member refid="d6/d6e/classElementLink_1af4e5131bf599e1da04689467480d2a43" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>reset</name></member>
      <member refid="d6/d6e/classElementLink_1a982d19cd6240db223568303322c1aefe" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>resetWithKeyAndIndex</name></member>
      <member refid="d6/d6e/classElementLink_1a76c788b161e460e2f464f4d67b364137" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>resetWithKeyAndIndex</name></member>
      <member refid="d6/d6e/classElementLink_1a523981754b34c144dce8a4a30623b97c" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>self</name></member>
      <member refid="d6/d6e/classElementLink_1a056f02ecff42be70ad0a333c3500f612" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>setElement</name></member>
      <member refid="df/d13/classElementLinkBase_1aa7dc163ed6e301160c77546b8d53863e" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>setPersIndex</name></member>
      <member refid="df/d13/classElementLinkBase_1aebdcbc69e7e09026735b351a9346a988" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>setPersKey</name></member>
      <member refid="d6/d6e/classElementLink_1aee77dc8370e564cbed949a823d14574b" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>setStorableObject</name></member>
      <member refid="d6/d6e/classElementLink_1a68ae95777eef00bd66d58c3d992eab3f" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>sgkey_t</name></member>
      <member refid="d6/d6e/classElementLink_1ac602256461982b939438901240bbe9ac" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>source</name></member>
      <member refid="d6/d6e/classElementLink_1a56216724bc028dc075fe50edaad52551" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>toContainedElement</name></member>
      <member refid="d6/d6e/classElementLink_1a8684035f6e2b67c7fdf5ff9d241f45a6" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>toIndexedElement</name></member>
      <member refid="d6/d6e/classElementLink_1a5e5d608091e6c4524bd5ffc69d83466d" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>toPersistent</name></member>
      <member refid="d6/d6e/classElementLink_1a6fd8cbba60beaae86e466fc3d61f5d32" prot="private" virt="virtual"><scope>ElementLink</scope><name>toTransient</name></member>
      <member refid="d6/d6e/classElementLink_1a52afab150c15e9085527c9792a272073" prot="public" virt="non-virtual"><scope>ElementLink</scope><name>value_type</name></member>
      <member refid="df/d13/classElementLinkBase_1afabb0bc28f5e9074eb8198f9690919f6" prot="public" virt="virtual"><scope>ElementLink</scope><name>~ElementLinkBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
