<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d31/AuxTypeRegistry__test_8cxx" kind="file">
    <compoundname>AuxTypeRegistry_test.cxx</compoundname>
    <includes refid="db/d7f/AuxTypeRegistry_8h" local="yes">AthContainers/AuxTypeRegistry.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="dc/d24/ElementLink_8h" local="yes">AthLinks/ElementLink.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="yes">SGTools/TestStore.h</includes>
    <includes local="yes">SGTools/CLASS_DEF.h</includes>
    <incdepgraph>
      <node id="72178">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="72180">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="72143" relation="include">
        </childnode>
        <childnode refid="72145" relation="include">
        </childnode>
        <childnode refid="72152" relation="include">
        </childnode>
        <childnode refid="72153" relation="include">
        </childnode>
      </node>
      <node id="72181">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="72151">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="72153">
        <label>functional</label>
      </node>
      <node id="72149">
        <label>limits</label>
      </node>
      <node id="72176">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="72146">
        <label>iterator</label>
      </node>
      <node id="72163">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="72150" relation="include">
        </childnode>
        <childnode refid="72164" relation="include">
        </childnode>
      </node>
      <node id="72182">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="72140" relation="include">
        </childnode>
        <childnode refid="72183" relation="include">
        </childnode>
        <childnode refid="72184" relation="include">
        </childnode>
        <childnode refid="72155" relation="include">
        </childnode>
        <childnode refid="72150" relation="include">
        </childnode>
      </node>
      <node id="72159">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="72160" relation="include">
        </childnode>
        <childnode refid="72147" relation="include">
        </childnode>
      </node>
      <node id="72165">
        <label>stdint.h</label>
      </node>
      <node id="72156">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="72141" relation="include">
        </childnode>
        <childnode refid="72155" relation="include">
        </childnode>
      </node>
      <node id="72188">
        <label>RVersion.h</label>
      </node>
      <node id="72142">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="72143" relation="include">
        </childnode>
        <childnode refid="72152" relation="include">
        </childnode>
        <childnode refid="72153" relation="include">
        </childnode>
      </node>
      <node id="72148">
        <label>cmath</label>
      </node>
      <node id="72192">
        <label>cassert</label>
      </node>
      <node id="72184">
        <label>stdexcept</label>
      </node>
      <node id="72179">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="72150">
        <label>string</label>
      </node>
      <node id="72154">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="72141" relation="include">
        </childnode>
        <childnode refid="72155" relation="include">
        </childnode>
      </node>
      <node id="72138">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx</label>
        <link refid="AuxTypeRegistry_test.cxx"/>
        <childnode refid="72139" relation="include">
        </childnode>
        <childnode refid="72182" relation="include">
        </childnode>
        <childnode refid="72185" relation="include">
        </childnode>
        <childnode refid="72191" relation="include">
        </childnode>
        <childnode refid="72192" relation="include">
        </childnode>
        <childnode refid="72193" relation="include">
        </childnode>
        <childnode refid="72194" relation="include">
        </childnode>
      </node>
      <node id="72189">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="72171">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="72168">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="72187">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="72188" relation="include">
        </childnode>
        <childnode refid="72189" relation="include">
        </childnode>
      </node>
      <node id="72177">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="72162">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="72163" relation="include">
        </childnode>
        <childnode refid="72149" relation="include">
        </childnode>
        <childnode refid="72165" relation="include">
        </childnode>
        <childnode refid="72166" relation="include">
        </childnode>
      </node>
      <node id="72140">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="72141" relation="include">
        </childnode>
        <childnode refid="72142" relation="include">
        </childnode>
      </node>
      <node id="72186">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="72165" relation="include">
        </childnode>
      </node>
      <node id="72143">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="72144" relation="include">
        </childnode>
        <childnode refid="72145" relation="include">
        </childnode>
        <childnode refid="72146" relation="include">
        </childnode>
        <childnode refid="72141" relation="include">
        </childnode>
        <childnode refid="72147" relation="include">
        </childnode>
        <childnode refid="72148" relation="include">
        </childnode>
        <childnode refid="72149" relation="include">
        </childnode>
        <childnode refid="72150" relation="include">
        </childnode>
        <childnode refid="72151" relation="include">
        </childnode>
      </node>
      <node id="72155">
        <label>typeinfo</label>
      </node>
      <node id="72166">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="72190">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="72164">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="72170">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="72194">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="72139">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="72140" relation="include">
        </childnode>
        <childnode refid="72154" relation="include">
        </childnode>
        <childnode refid="72156" relation="include">
        </childnode>
        <childnode refid="72157" relation="include">
        </childnode>
        <childnode refid="72172" relation="include">
        </childnode>
        <childnode refid="72174" relation="include">
        </childnode>
        <childnode refid="72141" relation="include">
        </childnode>
        <childnode refid="72155" relation="include">
        </childnode>
        <childnode refid="72160" relation="include">
        </childnode>
        <childnode refid="72180" relation="include">
        </childnode>
        <childnode refid="72181" relation="include">
        </childnode>
      </node>
      <node id="72160">
        <label>vector</label>
      </node>
      <node id="72145">
        <label>utility</label>
      </node>
      <node id="72167">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="72175">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="72158">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="72174">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="72175" relation="include">
        </childnode>
        <childnode refid="72176" relation="include">
        </childnode>
        <childnode refid="72177" relation="include">
        </childnode>
        <childnode refid="72178" relation="include">
        </childnode>
        <childnode refid="72179" relation="include">
        </childnode>
      </node>
      <node id="72147">
        <label>cstdlib</label>
      </node>
      <node id="72191">
        <label>iostream</label>
      </node>
      <node id="72183">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="72141">
        <label>cstddef</label>
      </node>
      <node id="72193">
        <label>SGTools/TestStore.h</label>
      </node>
      <node id="72157">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="72154" relation="include">
        </childnode>
        <childnode refid="72158" relation="include">
        </childnode>
        <childnode refid="72159" relation="include">
        </childnode>
        <childnode refid="72161" relation="include">
        </childnode>
        <childnode refid="72167" relation="include">
        </childnode>
        <childnode refid="72155" relation="include">
        </childnode>
        <childnode refid="72160" relation="include">
        </childnode>
        <childnode refid="72144" relation="include">
        </childnode>
        <childnode refid="72165" relation="include">
        </childnode>
        <childnode refid="72169" relation="include">
        </childnode>
        <childnode refid="72170" relation="include">
        </childnode>
        <childnode refid="72171" relation="include">
        </childnode>
      </node>
      <node id="72169">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="72173">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="72161">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="72158" relation="include">
        </childnode>
        <childnode refid="72162" relation="include">
        </childnode>
        <childnode refid="72167" relation="include">
        </childnode>
        <childnode refid="72160" relation="include">
        </childnode>
        <childnode refid="72168" relation="include">
        </childnode>
      </node>
      <node id="72144">
        <label>algorithm</label>
      </node>
      <node id="72185">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="72165" relation="include">
        </childnode>
        <childnode refid="72150" relation="include">
        </childnode>
        <childnode refid="72186" relation="include">
        </childnode>
        <childnode refid="72187" relation="include">
        </childnode>
        <childnode refid="72190" relation="include">
        </childnode>
      </node>
      <node id="72152">
        <label>memory</label>
      </node>
      <node id="72172">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="72156" relation="include">
        </childnode>
        <childnode refid="72157" relation="include">
        </childnode>
        <childnode refid="72173" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="d5/df3/structPayload" prot="public">Payload</innerclass>
    <innerclass refid="da/d60/structFacTest1" prot="public">FacTest1</innerclass>
    <innerclass refid="d4/db1/structFacTest1DynFac" prot="public">FacTest1DynFac</innerclass>
    <innerclass refid="dc/df4/structFacTest2" prot="public">FacTest2</innerclass>
    <innerclass refid="dd/d0c/structFacTest2DynFac" prot="public">FacTest2DynFac</innerclass>
    <innerclass refid="d0/d6a/structFacTest3" prot="public">FacTest3</innerclass>
    <innernamespace refid="de/d53/namespaceSGTest">SGTest</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a236bb1865a9bb3d4bb8244626122931b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
        <definition>bool makeT</definition>
        <argsstring>(int x=0)</argsstring>
        <name>makeT</name>
        <param>
          <type>int</type>
          <declname>x</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a210730aacb5ded9cc0d0583b317b36a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_type</definition>
        <argsstring>(const std::string &amp;typname, const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;)</argsstring>
        <name>test_type</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>typname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="42" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a26549b58dd9c8435b0b62d08dc416c13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_type_extlock</definition>
        <argsstring>(const std::string &amp;typname, const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;)</argsstring>
        <name>test_type_extlock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>typname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="151" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="148" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="213" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a4b8d0ffdcfbf8380c7b55af536177ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_placeholder</definition>
        <argsstring>()</argsstring>
        <name>test_placeholder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="226" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="225" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a7238723919462376866ddf7f7e560780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_factories</definition>
        <argsstring>()</argsstring>
        <name>test_factories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="249" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="248" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a21bc1c7a147adff1ae7f19910b63d549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_factories_extlock</definition>
        <argsstring>()</argsstring>
        <name>test_factories_extlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="281" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="280" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1a67e130bcc254563191a6b6f14bf067e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_get_by_ti</definition>
        <argsstring>()</argsstring>
        <name>test_get_by_ti</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="302" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="301" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1ad6d7f9cb24d0df2b61bffe6a6292e343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copyForOutput</definition>
        <argsstring>()</argsstring>
        <name>test_copyForOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="321" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="320" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="d6/d31/AuxTypeRegistry__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" line="364" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx" bodystart="363" bodyend="375"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d7f/AuxTypeRegistry_8h" kindref="compound" tooltip="Handle mappings between names and auxid_t.">AthContainers/AuxTypeRegistry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthLinks/ElementLink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/TestStore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/CLASS_DEF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">CLASS_DEF<sp/>(std::vector&lt;int*&gt;,<sp/>28374627,<sp/>0)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">using<sp/>namespace<sp/>SGTest;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="d5/df3/structPayload" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0)<sp/>:<sp/>m_x<sp/>(x)<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_x;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>==<sp/>other.m_x;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>makeT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(x);<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x&amp;1)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>typname,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>clsname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>assert<sp/>(SG::null_auxid<sp/>==<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref><sp/>(name,<sp/>clsname));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>(name,<sp/>clsname);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert<sp/>(auxid<sp/>==<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>(name,<sp/>clsname));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(auxid<sp/>==<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref><sp/>(name,<sp/>clsname));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>assert<sp/>(auxid<sp/>==<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>),<sp/>name,<sp/>clsname));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;<sp/>(name,<sp/>clsname);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d74/classSG_1_1ExcAuxTypeMismatch" kindref="compound" tooltip="Exception --- Type mismatch for aux variable.">SG::ExcAuxTypeMismatch</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;<sp/>(name,<sp/></highlight><highlight class="stringliteral">&quot;otherclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref><sp/>(auxid)<sp/>==<sp/>name);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a91aca01cd796c7e7f61ddf09d56c45a1" kindref="member" tooltip="Return the class name associated with an aux data item (may be blank).">getClassName</ref><sp/>(auxid)<sp/>==<sp/>clsname);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(auxid)<sp/>==<sp/>typname);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(bool))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref><sp/>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;char&gt;));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;char&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a1429d97078f8731031ddeae38654039e" kindref="member" tooltip="Return size of an element in the STL vector.">getEltSize</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref><sp/>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;T&gt;));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>typname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a1429d97078f8731031ddeae38654039e" kindref="member" tooltip="Return size of an element in the STL vector.">getEltSize</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref><sp/>(999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(999)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref><sp/>(auxid,<sp/>10,<sp/>20);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;toPtr());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ptr[0]<sp/>=<sp/>makeT(0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ptr[1]<sp/>=<sp/>makeT(1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>v-&gt;reserve<sp/>(50);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;toPtr());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>v-&gt;resize<sp/>(40);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr<sp/>==<sp/>reinterpret_cast&lt;T*&gt;<sp/>(v-&gt;toPtr()));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>ptr[49]<sp/>=<sp/>makeT(123);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v2<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref><sp/>(auxid,<sp/>10,<sp/>20);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a9184409636833f5bc1b0a920957fe319" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(auxid,<sp/>ptr2,<sp/>0,<sp/>ptr,<sp/>1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(auxid,<sp/>ptr2,<sp/>1,<sp/>ptr,<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a26344bbacb847a9e7290ad4881cfc966" kindref="member" tooltip="Clear an element within a vector.">clear</ref><sp/>(auxid,<sp/>ptr2,<sp/>0);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ptr2[0]<sp/>=<sp/>makeT(10);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ptr2[1]<sp/>=<sp/>makeT(11);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5ff58673f48fe3db1a1654bcce6a33ea" kindref="member" tooltip="Swap an element between vectors.">swap</ref><sp/>(auxid,<sp/>ptr,<sp/>0,<sp/>ptr2,<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(11));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(10));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v3<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref><sp/>(auxid,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>makeT(i+1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a056c9481088c3c4155d4802db7e8a69e" kindref="member" tooltip="Shift the elements of the vector.">shift</ref><sp/>(5,<sp/>3);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>0<sp/>0<sp/>0<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>i++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(i+1));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=5;<sp/>i&lt;8;<sp/>i++)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=8;<sp/>i&lt;13;<sp/>i++)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(i-2));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a056c9481088c3c4155d4802db7e8a69e" kindref="member" tooltip="Shift the elements of the vector.">shift</ref><sp/>(3,<sp/>-2);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>4<sp/>5<sp/>0<sp/>0<sp/>0<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(i+3));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=3;<sp/>i&lt;6;<sp/>i++)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=6;<sp/>i&lt;11;<sp/>i++)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>makeT(i));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v3;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_type_extlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>typname,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>clsname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="d9/d35/classAthContainers__detail_1_1strict__shared__lock" kindref="compound">SG::AuxTypeRegistry::lock_t</ref><sp/>lock<sp/>(r);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>(name,<sp/>clsname);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>name);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a91aca01cd796c7e7f61ddf09d56c45a1" kindref="member" tooltip="Return the class name associated with an aux data item (may be blank).">getClassName</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>clsname);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>typname);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(bool))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;char&gt;));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;char&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a46a133b8d431c150ef45279530a35f8f" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecType</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;T&gt;));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(lock,<sp/>auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>typname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref><sp/>(lock,<sp/>999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(lock,<sp/>999)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(lock,<sp/>999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0f91c8db38c08e11342bff6ce88b30ee" kindref="member" tooltip="Return the type of the STL vector used to hold an aux data item.">getVecTypeName</ref><sp/>(lock,<sp/>999)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref><sp/>(lock,<sp/>auxid,<sp/>10,<sp/>20);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;toPtr());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ptr[0]<sp/>=<sp/>makeT(0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ptr[1]<sp/>=<sp/>makeT(1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>v-&gt;reserve<sp/>(50);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;toPtr());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>v-&gt;resize<sp/>(40);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr<sp/>==<sp/>reinterpret_cast&lt;T*&gt;<sp/>(v-&gt;toPtr()));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>ptr[49]<sp/>=<sp/>makeT(123);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v2<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a28ccdff841aa48f6862b9067ddba9976" kindref="member" tooltip="Construct a new vector to hold an aux item.">makeVector</ref><sp/>(lock,<sp/>auxid,<sp/>10,<sp/>20);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a9184409636833f5bc1b0a920957fe319" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(lock,<sp/>auxid,<sp/>ptr2,<sp/>0,<sp/>ptr,<sp/>1);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a9184409636833f5bc1b0a920957fe319" kindref="member" tooltip="Copy an element between vectors.">copy</ref><sp/>(lock,<sp/>auxid,<sp/>ptr2,<sp/>1,<sp/>ptr,<sp/>0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(lock,<sp/>auxid,<sp/>ptr2,<sp/>1,<sp/>ptr,<sp/>0);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a26344bbacb847a9e7290ad4881cfc966" kindref="member" tooltip="Clear an element within a vector.">clear</ref><sp/>(lock,<sp/>auxid,<sp/>ptr2,<sp/>0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ptr2[0]<sp/>=<sp/>makeT(10);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>ptr2[1]<sp/>=<sp/>makeT(11);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5ff58673f48fe3db1a1654bcce6a33ea" kindref="member" tooltip="Swap an element between vectors.">swap</ref><sp/>(lock,<sp/>auxid,<sp/>ptr,<sp/>0,<sp/>ptr2,<sp/>1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(11));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(10));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(0));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>test_type&lt;int&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>test_type&lt;float&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>test_type&lt;double&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>test_type&lt;bool&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aBool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>test_type&lt;Payload&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;Payload&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aPayload&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>test_type_extlock&lt;int&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_placeholder()</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_placeholder\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;<ref refid="d4/d24/classSG_1_1AuxTypePlaceholder" kindref="compound">SG::AuxTypePlaceholder</ref>&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;placeholder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab2a0b495f974d906674065233edd5184" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">findAuxID</ref>(</highlight><highlight class="stringliteral">&quot;placeholder&quot;</highlight><highlight class="normal">)<sp/>==<sp/>auxid);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d4/d24/classSG_1_1AuxTypePlaceholder" kindref="compound">SG::AuxTypePlaceholder</ref>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;placeholder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="da/d60/structFacTest1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref><sp/>{};</highlight></codeline>
<codeline lineno="240" refid="d4/db1/structFacTest1DynFac" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/db1/structFacTest1DynFac" kindref="compound">FacTest1DynFac</ref></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::AuxTypeVectorFactory&lt;FacTest1&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d4/db1/structFacTest1DynFac_1aaa7d7d0fdd0ee44d6957113a3a7170d5" kindref="member" tooltip="True if the vectors created by this factory work by dynamic emulation (via TVirtualCollectionProxy...">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal">};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_factories()</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_factories\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>assert<sp/>(fac-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>()<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>assert<sp/>(fac-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;char&gt;));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(typeid<sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/db1/structFacTest1DynFac" kindref="compound">FacTest1DynFac</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>),<sp/>fac1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(typeid<sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>))<sp/>==<sp/>fac1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" kindref="compound">SG::AuxTypeVectorFactory&lt;FacTest1&gt;</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>),<sp/>fac2);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(typeid<sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>))<sp/>==<sp/>fac2);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" kindref="compound">SG::AuxTypeVectorFactory&lt;FacTest1&gt;</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>),<sp/>fac3);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(typeid<sp/>(<ref refid="da/d60/structFacTest1" kindref="compound">FacTest1</ref>))<sp/>==<sp/>fac2);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="dc/df4/structFacTest2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/df4/structFacTest2" kindref="compound">FacTest2</ref><sp/>{};</highlight></codeline>
<codeline lineno="272" refid="dd/d0c/structFacTest2DynFac" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dd/d0c/structFacTest2DynFac" kindref="compound">FacTest2DynFac</ref></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::AuxTypeVectorFactory&lt;FacTest2&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d0c/structFacTest2DynFac_1a62e83587faf44899b89a1b8c2b009320" kindref="member" tooltip="True if the vectors created by this factory work by dynamic emulation (via TVirtualCollectionProxy...">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_factories_extlock()</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_factories_extlock\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d35/classAthContainers__detail_1_1strict__shared__lock" kindref="compound">SG::AuxTypeRegistry::lock_t</ref><sp/>lock<sp/>(r);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" kindref="compound" tooltip="Interface for factory objects that create vectors.">SG::IAuxTypeVectorFactory</ref>*<sp/>fac<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(fac-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1aa988289cb028117040ff6deef096c507" kindref="member" tooltip="Return the size of an element of this vector type.">getEltSize</ref>()<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(fac-&gt;<ref refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory_1a76a464148d5fc3a45f63f7d35d38b40a" kindref="member" tooltip="Return the type_info of the vector.">tiVec</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;char&gt;));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1acc19ffbaedbe7e1f96401b5aa76b260e" kindref="member" tooltip="Return the vector factory for a given vector element type.">getFactory</ref><sp/>(lock,<sp/>typeid<sp/>(<ref refid="dc/df4/structFacTest2" kindref="compound">FacTest2</ref>))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="d0/d6a/structFacTest3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/d6a/structFacTest3" kindref="compound">FacTest3</ref><sp/>{};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_get_by_ti()</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_get_by_ti\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;aShort&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>assert<sp/>(auxid<sp/>!=<sp/>SG::null_auxid);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(short));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;short&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d0/d6a/structFacTest3" kindref="compound">FacTest3</ref>),<sp/></highlight><highlight class="stringliteral">&quot;aTest3&quot;</highlight><highlight class="normal">)<sp/>==<sp/>SG::null_auxid);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1af9a9b911f91be479c5c6859eb5834d76" kindref="member" tooltip="Add a new type -&amp;gt; factory mapping.">addFactory</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d0/d6a/structFacTest3" kindref="compound">FacTest3</ref>),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" kindref="compound" tooltip="Factory objects that creates vectors using AuxTypeVector.">SG::AuxTypeVectorFactory&lt;FacTest3&gt;</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d0/d6a/structFacTest3" kindref="compound">FacTest3</ref>),<sp/></highlight><highlight class="stringliteral">&quot;aTest3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>assert<sp/>(auxid<sp/>!=<sp/>SG::null_auxid);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref><sp/>(auxid)<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d0/d6a/structFacTest3" kindref="compound">FacTest3</ref>));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>assert<sp/>(r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref><sp/>(auxid)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;FacTest3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copyForOutput()</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_copyForOutput\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt;std::vector&lt;int*&gt;</ref><sp/>&gt;<sp/>EL;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EL<sp/>el1<sp/>(123,<sp/>10);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EL<sp/>el2;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;EL&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;EL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid_v<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;std::vector&lt;EL&gt;<sp/>&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;ELv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(auxid,<sp/>&amp;el2,<sp/>0,<sp/>&amp;el1,<sp/>0);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>assert<sp/>(el2.key()<sp/>==<sp/>123);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>assert<sp/>(el2.index()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>std::vector&lt;EL&gt;<sp/>v1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(EL<sp/>(123,<sp/>5));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(EL<sp/>(123,<sp/>6));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>std::vector&lt;EL&gt;<sp/>v2;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(auxid_v,<sp/>&amp;v2,<sp/>0,<sp/>&amp;v1,<sp/>0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0].key()<sp/>==<sp/>123);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0].index()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1].key()<sp/>==<sp/>123);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1].index()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>store.remap<sp/>(123,<sp/>456,<sp/>10,<sp/>20);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(auxid,<sp/>&amp;el2,<sp/>0,<sp/>&amp;el1,<sp/>0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>assert<sp/>(el2.key()<sp/>==<sp/>456);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>assert<sp/>(el2.index()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>store.remap<sp/>(123,<sp/>456,<sp/>6,<sp/>12);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a866eaa9297ab39ad8d07f49c349a6449" kindref="member" tooltip="Copy an element between vectors. Apply any transformations needed for output.">copyForOutput</ref><sp/>(auxid_v,<sp/>&amp;v2,<sp/>0,<sp/>&amp;v1,<sp/>0);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0].key()<sp/>==<sp/>123);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0].index()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1].key()<sp/>==<sp/>456);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1].index()<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>initTestStore();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>test_placeholder();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>test_factories();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>test_get_by_ti();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>test_copyForOutput();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeRegistry_test.cxx"/>
  </compounddef>
</doxygen>
