<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d26/FloatPacker__test_8cxx" kind="file">
    <compoundname>FloatPacker_test.cxx</compoundname>
    <includes refid="de/d0d/FloatPacker_8h" local="yes">CxxUtils/FloatPacker.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cassert</includes>
    <includes local="no">ieee754.h</includes>
    <includes local="no">fenv.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="113674">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx</label>
        <link refid="FloatPacker_test.cxx"/>
        <childnode refid="113675" relation="include">
        </childnode>
        <childnode refid="113678" relation="include">
        </childnode>
        <childnode refid="113679" relation="include">
        </childnode>
        <childnode refid="113680" relation="include">
        </childnode>
        <childnode refid="113681" relation="include">
        </childnode>
        <childnode refid="113682" relation="include">
        </childnode>
        <childnode refid="113683" relation="include">
        </childnode>
      </node>
      <node id="113682">
        <label>fenv.h</label>
      </node>
      <node id="113681">
        <label>ieee754.h</label>
      </node>
      <node id="113677">
        <label>stdint.h</label>
      </node>
      <node id="113679">
        <label>cmath</label>
      </node>
      <node id="113680">
        <label>cassert</label>
      </node>
      <node id="113676">
        <label>string</label>
      </node>
      <node id="113675">
        <label>CxxUtils/FloatPacker.h</label>
        <link refid="de/d0d/FloatPacker_8h"/>
        <childnode refid="113676" relation="include">
        </childnode>
        <childnode refid="113677" relation="include">
        </childnode>
      </node>
      <node id="113683">
        <label>string.h</label>
      </node>
      <node id="113678">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d6/d26/FloatPacker__test_8cxx_1a3d9c92be77f67a92e08a840892b38ab7" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int ieee754_double_exponent_bits</definition>
        <argsstring></argsstring>
        <name>ieee754_double_exponent_bits</name>
        <initializer> 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/d26/FloatPacker__test_8cxx_1a448c2ec9f490d084ff57862ad3b39fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwise_equal</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>bitwise_equal</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="d6/d26/FloatPacker__test_8cxx_1aee39dd9446fe5674a956155ff15ad240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool almost_equal</definition>
        <argsstring>(double a, double b, int bits)</argsstring>
        <name>almost_equal</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d6/d26/FloatPacker__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" bodystart="42" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="d6/d26/FloatPacker__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" line="305" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx" bodystart="304" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for FloatPacker. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Nov, 2009, from earlier code. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>__APPLE__</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d0d/FloatPacker_8h" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">CxxUtils/FloatPacker.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ieee754.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fenv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">CxxUtils::FloatPacker</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::abs;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ieee754_double_exponent_bits<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bitwise_equal<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp<sp/>(&amp;a,<sp/>&amp;b,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(a))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>almost_equal<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(abs<sp/>((a-b)/(a+b)))<sp/>*<sp/>(1&lt;&lt;bits)<sp/>&lt;<sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1<sp/>()</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>some<sp/>special<sp/>numbers<sp/>for<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ieee754_double<sp/>d;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>d.d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>d.ieee.negative<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>neg_zero<sp/>=<sp/>d.d;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>d.d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>d.ieee.exponent<sp/>=<sp/>(1&lt;&lt;ieee754_double_exponent_bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>infinity<sp/>=<sp/>d.d;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__alpha</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>we<sp/>handle<sp/>denormals?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_denormal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__FLT_HAS_DENORM__</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>have_denormal<sp/>=<sp/>__FLT_HAS_DENORM__;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>__x86_64__</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>fenv_t<sp/>fenv;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>fegetenv(&amp;fenv);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fenv.__mxcsr<sp/>&amp;<sp/>(1&lt;&lt;6))<sp/></highlight><highlight class="comment">//<sp/>Test<sp/>DAZ<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>have_denormal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denormal<sp/>=<sp/>3e-320;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denormal2<sp/>=<sp/>3072e-320;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf1<sp/>(12,<sp/>12);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unpacked;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>FloatPacker::Packdest<sp/>packed;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::string<sp/>err;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.125;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf1.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x100);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf1.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf1.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf1.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>-0.125;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf1.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x900);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf1.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>neg_zero;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf1.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x800);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf1.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf1.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf2<sp/>(28,<sp/>24,<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>7.5;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x9e00000);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>7.5<sp/>+<sp/>(0.5)/2/16/16/16/16/16;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x9e00001);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>neg_zero;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(out<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(0,<sp/>out));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>assert<sp/>(tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>assert<sp/>(err<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Float<sp/>overflow<sp/>during<sp/>packing:<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>infinity;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(0,<sp/>out));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>assert<sp/>(tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>assert<sp/>(err<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>float<sp/>number:<sp/>inf<sp/>(0<sp/>7ff00000)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0xfffffff);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert<sp/>(almost_equal<sp/>(out,<sp/>512,<sp/>24));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>assert<sp/>(tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>assert<sp/>(err<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Float<sp/>overflow<sp/>during<sp/>packing:<sp/>100000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>underflow<sp/>to<sp/>denormal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.5<sp/>/<sp/>32;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x1000000);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>unpacked<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x0800000);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>unpacked<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x0400000);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Underflow<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>1e-50;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf2.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf2.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(0,<sp/>out));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf2.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf3<sp/>(28,<sp/>12,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__alpha</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Having<sp/>problems<sp/>with<sp/>denormals<sp/>on<sp/>alpha.<sp/><sp/>Just<sp/>skip<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>denormal;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf3.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x7be1000);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf3.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(0,<sp/>out));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>denormal2;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf3.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x7be4400);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf3.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_denormal)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(almost_equal<sp/>(out,<sp/>unpacked,<sp/>3));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(out<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>assert<sp/>(!tf3.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>rounding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf6<sp/>(12,<sp/>8,<sp/>4,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>990./1024;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>get<sp/>rounded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf6.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x5ef);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf6.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>991./1024;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>get<sp/>rounded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf6.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x5f0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf6.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>992./1024;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(tmp,<sp/>out));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>1023./1024;<sp/></highlight><highlight class="comment">//<sp/>Test<sp/>mantissa<sp/>overflowing<sp/>after<sp/>rounding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf6.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x600);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf6.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(tmp,<sp/>out));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf6.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>an<sp/>unpacking<sp/>problem<sp/>with<sp/>npack==packdest_bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf7<sp/>(32,<sp/>32,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>1.<sp/>/<sp/>65536<sp/>/<sp/>65536;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf7.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x1);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf7.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf7.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>rounding<sp/>during<sp/>underflow_to_denormal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf8<sp/>(8,<sp/>8,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>256;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf8.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x81);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf8.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>512;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf8.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x81);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf8.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>256;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(tmp,<sp/>out));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf8.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>1023.<sp/>/<sp/>1024;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf8.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0xff);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>d.d<sp/>=<sp/>unpacked;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>assert<sp/>(tf8.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>assert<sp/>(err<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Float<sp/>overflow<sp/>during<sp/>packing:<sp/>0.999023&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf8.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>255.<sp/>/<sp/>256;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(tmp,<sp/>out));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf8.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>using<sp/>bit<sp/>33<sp/>to<sp/>control<sp/>rounding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="da/df0/classCxxUtils_1_1FloatPacker" kindref="compound" tooltip="Pack/unpack floating-point data from/to a given number of bits.">FloatPacker</ref><sp/>tf9<sp/>(32,<sp/>32,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>65536<sp/>/<sp/>65536;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf9.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x80000001);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf9.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(unpacked,<sp/>out));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>unpacked<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>65536<sp/>/<sp/>65536<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>tf9.pack<sp/>(unpacked);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>assert<sp/>(packed<sp/>==<sp/>0x80000001);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf9.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>0.5<sp/>+<sp/>1.<sp/>/<sp/>65536<sp/>/<sp/>65536;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>assert<sp/>(bitwise_equal<sp/>(tmp,<sp/>out));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>assert<sp/>(!tf9.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>packed<sp/>=<sp/>0xf654000;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>tf3.unpack<sp/>(packed);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>assert<sp/>(tf3.errcheck<sp/>(err));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>assert<sp/>(err<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Overflow<sp/>while<sp/>unpacking<sp/>float;<sp/>exponent:<sp/>30292&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>assert<sp/>(isinf<sp/>(out));</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()<sp/>{}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>__APPLE__</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>()</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>test1<sp/>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/FloatPacker_test.cxx"/>
  </compounddef>
</doxygen>
