<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/db1/classTrig_1_1BunchCrossing" kind="class" prot="public">
    <compoundname>Trig::BunchCrossing</compoundname>
    <includes refid="dc/ddd/BunchCrossing_8h" local="no">BunchCrossing.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d6/db1/classTrig_1_1BunchCrossing_1a93add5dc0e87b359d9aeaca7c43dfc2c" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Trig::BunchCrossing::BUNCH_SPACING</definition>
        <argsstring></argsstring>
        <name>BUNCH_SPACING</name>
        <initializer> 25</initializer>
        <briefdescription>
<para>Minimum spacing between the bunches, in nanoseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/db1/classTrig_1_1BunchCrossing_1a9008ae1417ffbe698a792bd4fc19caa7" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int Trig::BunchCrossing::MAX_BCID</definition>
        <argsstring></argsstring>
        <name>MAX_BCID</name>
        <initializer> 3564</initializer>
        <briefdescription>
<para>The maximum number of bunches that can be in the LHC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d6/db1/classTrig_1_1BunchCrossing_1a6b5fa9526f6f6158496edaf739786b0b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Trig::BunchCrossing::m_bcid</definition>
        <argsstring></argsstring>
        <name>m_bcid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The BCID of this bunch crossing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/db1/classTrig_1_1BunchCrossing_1ab861e852bcd6ea924cd695832cd7dc51" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Trig::BunchCrossing::m_intensityBeam1</definition>
        <argsstring></argsstring>
        <name>m_intensityBeam1</name>
        <briefdescription>
<para>Intensity of the bunch in &quot;beam 1&quot; some measure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/db1/classTrig_1_1BunchCrossing_1aab6aeede191cba2f81f4582bb4c4fa68" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Trig::BunchCrossing::m_intensityBeam2</definition>
        <argsstring></argsstring>
        <name>m_intensityBeam2</name>
        <briefdescription>
<para>Intensity of the bunch in &quot;beam 2&quot; some measure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="97" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a443a3f0dfefbf4671fdf497c4d97ae67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchCrossing::BunchCrossing</definition>
        <argsstring>(int bcid=0, float intBeam1=1.0, float intBeam2=1.0)</argsstring>
        <name>BunchCrossing</name>
        <param>
          <type>int</type>
          <declname>bcid</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intBeam1</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intBeam2</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Constructor with a value. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="d8/d5b/classTrigConf_1_1BunchGroup" kindref="compound">TrigConf::BunchGroup</ref> objects store the BCIDs as signed integers, hence this constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bcid</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch crossing ID of the bunch crossing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intBeam1</parametername>
</parameternamelist>
<parameterdescription>
<para>The intensity of beam 1, or the intensity/luminosity of the crossing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intBeam2</parametername>
</parameternamelist>
<parameterdescription>
<para>The intensity of beam 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="29" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1aac28397d08feceb606d576c0d89c15fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchCrossing::BunchCrossing</definition>
        <argsstring>(unsigned int bcid, float intBeam1=1.0, float intBeam2=1.0)</argsstring>
        <name>BunchCrossing</name>
        <param>
          <type>unsigned int</type>
          <declname>bcid</declname>
        </param>
        <param>
          <type>float</type>
          <declname>intBeam1</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intBeam2</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Constructor with an unsigned value. </para>        </briefdescription>
        <detaileddescription>
<para>The EventID objects store the BCIDs as unsigned integers, so this other version has to exist as well. (In order to define clearly what the compiler should do.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bcid</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch crossing ID of the bunch crossing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intBeam1</parametername>
</parameternamelist>
<parameterdescription>
<para>The intensity of beam 1, or the intensity/luminosity of the crossing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intBeam2</parametername>
</parameternamelist>
<parameterdescription>
<para>The intensity of beam 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="51" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a27174442035c97cad53448e640f0cc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchCrossing::BunchCrossing</definition>
        <argsstring>(const BunchCrossing &amp;parent)</argsstring>
        <name>BunchCrossing</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The copy constructor makes sure that only important properites are copied. The class at one point had some transient variables. But not anymore, so this constructor is pretty useless. But at least it&apos;s not harmful...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that is to be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1ad0198614c69492c9078244cd937d0528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
        <definition>BunchCrossing &amp; Trig::BunchCrossing::operator=</definition>
        <argsstring>(const BunchCrossing &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Just like the copy constructor, this operator isn&apos;t strictly speaking needed either. But if I left the copy constructor in, I should have this here as well.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose properties are to be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="84" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a5011b81f64dff8f0c652ead2f184748d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchCrossing::operator int &amp;</definition>
        <argsstring>()</argsstring>
        <name>operator int &amp;</name>
        <briefdescription>
<para>Automatic conversion operator. </para>        </briefdescription>
        <detaileddescription>
<para>The automatic conversion operators are here to be able to handle bunch crossing objects like a simple integer value in the code. This makes using the STL code much simpler in some places.</para><para><simplesect kind="return"><para>The BCID value of this object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a57dd0f3f9283393b4fe9c7bee8f301cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchCrossing::operator const int &amp;</definition>
        <argsstring>() const </argsstring>
        <name>operator const int &amp;</name>
        <briefdescription>
<para>Automatic conversion operator (constant version). </para>        </briefdescription>
        <detaileddescription>
<para>The automatic conversion operators are here to be able to handle bunch crossing objects like a simple integer value in the code. This makes using the STL code much simpler in some places.</para><para><simplesect kind="return"><para>The BCID value of this object (constant version) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a1fd2ece8065c237b1200267b4db67072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
        <definition>BunchCrossing &amp; Trig::BunchCrossing::operator+=</definition>
        <argsstring>(const BunchCrossing &amp;bc)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Operator adding another <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>This operator is overriden to take the properties of the LHC bunches into account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch crossing that should be added to this one </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated bunch crossing object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="127" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1ae48f0d89c079091e39682f11b29a0e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
        <definition>BunchCrossing &amp; Trig::BunchCrossing::operator-=</definition>
        <argsstring>(const BunchCrossing &amp;bc)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Operator subtracting another <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>This operator is overriden to take the properties of the LHC bunches into account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch crossing that should be subtracted from this one </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated bunch crossing object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="144" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a7be2e13d7f9362f53acf28cc02af4a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
        <definition>BunchCrossing &amp; Trig::BunchCrossing::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Operator pushing the object to the next bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>This operator can be used when you want to iterate over bunch crossings. It makes sure that the bunch crossings follow each other in the right order.</para><para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> reference to the incremented object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a603c3f32e668cc58173841d5d408bacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref></type>
        <definition>BunchCrossing Trig::BunchCrossing::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Operator pushing the object to the next bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>This operator can be used when you want to iterate over bunch crossings. It makes sure that the bunch crossings follow each other in the right order.</para><para><simplesect kind="return"><para>The object&apos;s state before the increment </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="171" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a0fbdf80d59abdee031c1b57c14200f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
        <definition>BunchCrossing &amp; Trig::BunchCrossing::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Operator pushing the object to the previous bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>This operator can be used when you want to iterate over bunch crossings. It makes sure that the bunch crossings follow each other in the right order.</para><para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> reference to the decreased object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1ae268af4424e3687c418a4fa75920a2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref></type>
        <definition>BunchCrossing Trig::BunchCrossing::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Operator pushing the object to the previous bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>This operator can be used when you want to iterate over bunch crossings. It makes sure that the bunch crossings follow each other in the right order.</para><para><simplesect kind="return"><para>The object&apos;s state before the decrease </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a476370df85c535f83aa890efa9e56037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchCrossing::distance</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>The distance from another bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>Function calculating the absolute value of the distance of two bunches. If you just use something like <computeroutput>std::abs( b1 - b2 )</computeroutput>, the result will depend on the order of the two bunches. Sometimes that&apos;s the expected behaviour, but for simple distance calculations this function should be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance of the specified bunch crossing from this one in BCIDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="68" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a7b7649f6c7bd0c33b88a3c0dc1c7013e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchCrossing::gapFrom</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>gapFrom</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Distance from a previous bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>As it turns out, the <computeroutput>distance(...)</computeroutput> function can not be used when calculating the gaps between bunches, as the &quot;direction&quot; of the gap matters a lot in this case. (So, the gap can be larger than half of the LHC ring.)</para><para>In the end, this is just a nicely named function on top of the arithmetic that was designed for this class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;previous&quot; bunch to which the distance should be calculated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gap before this bunch to the specified one in BCIDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a95a1505145025a2c10c0b07b759050b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchCrossing::gapTo</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>gapTo</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Distance to a following bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>As it turns out, the <computeroutput>distance(...)</computeroutput> function can not be used when calculating the gaps between bunches, as the &quot;direction&quot; of the gap matters a lot in this case. (So, the gap can be larger than half of the LHC ring.)</para><para>In the end, this is just a nicely named function on top of the arithmetic that was designed for this class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;next&quot; bunch to which the distance should be calculated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gap after this bunch to the specified one in BCIDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a201cdfccfff3bac4b90becacd9e8c816" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchCrossing::bcid</definition>
        <argsstring>() const </argsstring>
        <name>bcid</name>
        <briefdescription>
<para>Get the BCID of this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>Some parts of the code have to access the BCID and the bunch crossing intensity explicitly, it&apos;s just nicer (and more readable) to do it using a function than to use the dereferencing operator (*) in all those cases.</para><para><simplesect kind="return"><para>The BCID of this bunch crossing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="75" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a28b099aca5bb8efdc44c73564ea6b594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Trig::BunchCrossing::setBCID</definition>
        <argsstring>(int bcid)</argsstring>
        <name>setBCID</name>
        <param>
          <type>int</type>
          <declname>bcid</declname>
        </param>
        <briefdescription>
<para>Set the BCID of this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>This function is not used anywhere in the code I think, but for completeness&apos;s sake it makes sense to have it here.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bcid</parametername>
</parameternamelist>
<parameterdescription>
<para>The BCID that this object should describe </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1aeb71882380174686e57bb20714f2a691" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Trig::BunchCrossing::intensityBeam1</definition>
        <argsstring>() const </argsstring>
        <name>intensityBeam1</name>
        <briefdescription>
<para>Get the &quot;intensity&quot; of beam 1 in this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>The intensity of the beam in a bunch crossing means a bit different things for data and for MC, but in both cases it can be described by a floating point number.</para><para><simplesect kind="return"><para>The &quot;intensity&quot; of beam 1 in this bunch crossing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a11d082a7db11d5ecb005151553fc3440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Trig::BunchCrossing::setIntensityBeam1</definition>
        <argsstring>(float intensity)</argsstring>
        <name>setIntensityBeam1</name>
        <param>
          <type>float</type>
          <declname>intensity</declname>
        </param>
        <briefdescription>
<para>Set the &quot;intensity&quot; of beam 1 in this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>BunchCrossing::intensity() </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that the beam 1 intensity should be set to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="296" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1a8a7c6e88f21b62e43dff1e9686eceae8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Trig::BunchCrossing::intensityBeam2</definition>
        <argsstring>() const </argsstring>
        <name>intensityBeam2</name>
        <briefdescription>
<para>Get the &quot;intensity&quot; of beam 2 in this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para>The intensity of the beam in a bunch crossing means a bit different things for data and for MC, but in both cases it can be described by a floating point number.</para><para><simplesect kind="return"><para>The &quot;intensity&quot; of beam 2 in this bunch crossing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1af33df187d962dac7232aee976ac1d03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Trig::BunchCrossing::setIntensityBeam2</definition>
        <argsstring>(float intensity)</argsstring>
        <name>setIntensityBeam2</name>
        <param>
          <type>float</type>
          <declname>intensity</declname>
        </param>
        <briefdescription>
<para>Set the &quot;intensity&quot; of beam 2 in this bunch crossing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>BunchCrossing::intensity() </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that the beam 2 intensity should be set to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="326" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="d6/db1/classTrig_1_1BunchCrossing_1ab683c2f05f7e32d72e58a1d4d3f1bc52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Trig::BunchCrossing::operator==</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Equality operator for bunch crossings. </para>        </briefdescription>
        <detaileddescription>
<para>The compiler would probably be able to do this same thing automatically thanks to the automatic conversion operators, but I wanted to be sure. The equality of two <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> objects should not depend on the intensity stored in them, only the BCIDs that they describe.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch crossing object that this object should be compared to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the BCID of the two objects is the same, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchCrossing.cxx" bodystart="350" bodyend="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> smart integer class representing bunch crossings. </para>    </briefdescription>
    <detaileddescription>
<para>There can be a maximum of 3564 bunches in the LHC. And BCID #0 and #3563 are just beside each other. To have the STL algorithms take this into account, objects of this class behave as &quot;smart&quot; integer variables, which respect the properties of the LHC.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>618129 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2014-09-23 13:37:00 +0200 (Tue, 23 Sep 2014) </para></simplesect>
</para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchCrossing.h" bodystart="28" bodyend="99"/>
    <listofallmembers>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a201cdfccfff3bac4b90becacd9e8c816" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>bcid</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a93add5dc0e87b359d9aeaca7c43dfc2c" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>BUNCH_SPACING</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a443a3f0dfefbf4671fdf497c4d97ae67" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>BunchCrossing</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1aac28397d08feceb606d576c0d89c15fc" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>BunchCrossing</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a27174442035c97cad53448e640f0cc96" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>BunchCrossing</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a476370df85c535f83aa890efa9e56037" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>distance</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a7b7649f6c7bd0c33b88a3c0dc1c7013e" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>gapFrom</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a95a1505145025a2c10c0b07b759050b6" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>gapTo</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1aeb71882380174686e57bb20714f2a691" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>intensityBeam1</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a8a7c6e88f21b62e43dff1e9686eceae8" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>intensityBeam2</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a6b5fa9526f6f6158496edaf739786b0b" prot="private" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>m_bcid</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1ab861e852bcd6ea924cd695832cd7dc51" prot="private" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>m_intensityBeam1</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1aab6aeede191cba2f81f4582bb4c4fa68" prot="private" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>m_intensityBeam2</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a9008ae1417ffbe698a792bd4fc19caa7" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>MAX_BCID</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a57dd0f3f9283393b4fe9c7bee8f301cd" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator const int &amp;</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a5011b81f64dff8f0c652ead2f184748d" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator int &amp;</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a7be2e13d7f9362f53acf28cc02af4a27" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator++</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a603c3f32e668cc58173841d5d408bacc" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator++</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a1fd2ece8065c237b1200267b4db67072" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator+=</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a0fbdf80d59abdee031c1b57c14200f14" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator--</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1ae268af4424e3687c418a4fa75920a2d7" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator--</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1ae48f0d89c079091e39682f11b29a0e12" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator-=</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1ad0198614c69492c9078244cd937d0528" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator=</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1ab683c2f05f7e32d72e58a1d4d3f1bc52" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>operator==</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a28b099aca5bb8efdc44c73564ea6b594" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>setBCID</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1a11d082a7db11d5ecb005151553fc3440" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>setIntensityBeam1</name></member>
      <member refid="d6/db1/classTrig_1_1BunchCrossing_1af33df187d962dac7232aee976ac1d03e" prot="public" virt="non-virtual"><scope>Trig::BunchCrossing</scope><name>setIntensityBeam2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
