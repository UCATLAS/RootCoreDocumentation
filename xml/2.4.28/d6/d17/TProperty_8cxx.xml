<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d6/d17/TProperty_8cxx" kind="file">
    <compoundname>TProperty.cxx</compoundname>
    <includes refid="dc/dcc/TProperty_8h" local="yes">AsgTools/TProperty.h</includes>
    <incdepgraph>
      <node id="10133">
        <label>AsgTools/ToolHandleArray.h</label>
        <link refid="d6/d2c/ToolHandleArray_8h_source"/>
        <childnode refid="10131" relation="include">
        </childnode>
        <childnode refid="10132" relation="include">
        </childnode>
      </node>
      <node id="10131">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="10128">
        <label>string</label>
      </node>
      <node id="10127">
        <label>AsgTools/TProperty.h</label>
        <link refid="dc/dcc/TProperty_8h_source"/>
        <childnode refid="10128" relation="include">
        </childnode>
        <childnode refid="10129" relation="include">
        </childnode>
        <childnode refid="10130" relation="include">
        </childnode>
        <childnode refid="10133" relation="include">
        </childnode>
        <childnode refid="10134" relation="include">
        </childnode>
      </node>
      <node id="10134">
        <label>AsgTools/Property.h</label>
        <link refid="d3/d68/Property_8h_source"/>
        <childnode refid="10128" relation="include">
        </childnode>
        <childnode refid="10129" relation="include">
        </childnode>
      </node>
      <node id="10132">
        <label>GaudiKernel/ToolHandle.h</label>
      </node>
      <node id="10129">
        <label>vector</label>
      </node>
      <node id="10130">
        <label>AsgTools/ToolHandle.h</label>
        <link refid="de/d2d/ToolHandle_8h_source"/>
        <childnode refid="10131" relation="include">
        </childnode>
        <childnode refid="10132" relation="include">
        </childnode>
      </node>
      <node id="10126">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx</label>
        <link refid="TProperty.cxx"/>
        <childnode refid="10127" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d6/d17/TProperty_8cxx_1a9c7ae409284812f8fe81b0d862b04926" prot="public" static="no">
        <name>TRY_TYPE</name>
        <param><defname>TYPE</defname></param>
        <initializer>do {                                                     \
      const <ref refid="d1/dc3/classTProperty" kindref="compound">TProperty</ref>&lt; TYPE &gt;* prop =                       \
         dynamic_cast&lt; const <ref refid="d1/dc3/classTProperty" kindref="compound">TProperty</ref>&lt; TYPE &gt;* &gt;( &amp;rhs );  \
      if( prop &amp;&amp; prop-&gt;pointer() ) {                       \
         *m_ptr = *( prop-&gt;pointer() );                     \
         return 0;                                          \
      }                                                     \
   } while( 0 )</initializer>
        <briefdescription>
<para>Helper macro for implementing the setFrom functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="20" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1aef7866fbab7fa03626e4bbcb4d6262c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const bool &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const bool &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a boolean propert. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1a33b3ca5699c70636fe17d8560c15d3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const int &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const int &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create an integer property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1ada6a193dda12b6474d56b2978b919ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const float &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const float &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a float property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1a8a04def09d7cba20db436c43879844b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const double &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const double &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a double property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1a317b814e6bccc1f5a48cd0a0c0e9ea49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const std::string &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a string property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1a6c9d93a780e29e9bf183d41086484e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create an integer vector property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1a14f4ec67ddff1ada1c0b9e34d5df08a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a floating point vector property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d6/d17/TProperty_8cxx_1afda73f88c2f53989b8804e7113363520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/db5/classProperty" kindref="compound">Property</ref> *</type>
        <definition>Property* createProperty</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;rval)</argsstring>
        <name>createProperty</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>rval</declname>
        </param>
        <briefdescription>
<para>Create a string vector property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx" bodystart="82" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>TProperty.cxx<sp/>612908<sp/>2014-08-21<sp/>16:19:03Z<sp/>krasznaa<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsgTools/TProperty.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Implementation<sp/>of<sp/>the<sp/>setFrom<sp/>specialisations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor">#define<sp/>TRY_TYPE(<sp/>TYPE<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TProperty&lt;<sp/>TYPE<sp/>&gt;*<sp/>prop<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_cast&lt;<sp/>const<sp/>TProperty&lt;<sp/>TYPE<sp/>&gt;*<sp/>&gt;(<sp/>&amp;rhs<sp/>);<sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>prop<sp/>&amp;&amp;<sp/>prop-&gt;pointer()<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_ptr<sp/>=<sp/>*(<sp/>prop-&gt;pointer()<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty_1a92fea4db71453f63bbe080a2fdb2dd29" kindref="member" tooltip="Set value using that from another property.">TProperty&lt; float &gt;::setFrom</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>this-&gt;pointer()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>some<sp/>compatible<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>TRY_TYPE(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>TRY_TYPE(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>TRY_TYPE(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apparently<sp/>none<sp/>of<sp/>them<sp/>succeeded:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Implementation<sp/>of<sp/>the<sp/>createProperty<sp/>specialisations/overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; bool &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),<sp/>Property::BOOL<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; int &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),<sp/>Property::INT<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; float &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::FLOAT<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; double &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::DOUBLE<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; std::string &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::STRING<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/db5/classProperty_1a3ae34d6acfbe24cfde8b67014e1d385e" kindref="member" tooltip="Convenience type declaration for an integer vector.">Property::IntVector</ref><sp/>vecInt_t;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; vecInt_t &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/>vecInt_t&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::INTVECTOR<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>float<sp/>&gt;&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/db5/classProperty_1ad331ca4019750fe71719adfec6358020" kindref="member" tooltip="Convenience type declaration for a float vector.">Property::FloatVector</ref><sp/>vecFloat_t;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; vecFloat_t &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/>vecFloat_t&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::FLOATVECTOR<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="d3/db5/classProperty" kindref="compound">Property</ref>*<sp/>createProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;&amp;<sp/>rval<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/db5/classProperty_1a0a9222ad53d8c2390060bb2e30922715" kindref="member" tooltip="Convenience type declaration for a string vector.">Property::StringVector</ref><sp/>vecString_t;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dc3/classTProperty" kindref="compound">TProperty&lt; vecString_t &gt;</ref>(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/>vecString_t&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rval<sp/>),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property::STRINGVECTOR<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
</highlight>    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/TProperty.cxx"/>
  </compounddef>
</doxygen>
