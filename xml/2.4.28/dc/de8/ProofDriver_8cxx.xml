<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/de8/ProofDriver_8cxx" kind="file">
    <compoundname>ProofDriver.cxx</compoundname>
    <includes refid="d2/de4/ProofDriver_8h" local="no">EventLoop/ProofDriver.h</includes>
    <includes refid="d7/d36/Algorithm_8h" local="no">EventLoop/Algorithm.h</includes>
    <includes refid="da/d69/EmptyFileHandler_8h" local="no">EventLoop/EmptyFileHandler.h</includes>
    <includes refid="d5/d80/Job_8h" local="no">EventLoop/Job.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="d9/d8a/ProofArgs_8h" local="no">EventLoop/ProofArgs.h</includes>
    <includes refid="d0/df3/ranLoadPackages_8h" local="no">RootCoreUtils/ranLoadPackages.h</includes>
    <includes refid="d7/d58/ShellExec_8h" local="no">RootCoreUtils/ShellExec.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="dd/d46/MetaData_8h" local="no">SampleHandler/MetaData.h</includes>
    <includes refid="df/d9d/Sample_8h" local="no">SampleHandler/Sample.h</includes>
    <includes refid="dc/d9e/SampleLocal_8h" local="no">SampleHandler/SampleLocal.h</includes>
    <includes local="no">TChain.h</includes>
    <includes local="no">TDirectory.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TFileCollection.h</includes>
    <includes local="no">TFileInfo.h</includes>
    <includes local="no">THashList.h</includes>
    <includes local="no">TList.h</includes>
    <includes local="no">TProof.h</includes>
    <includes local="no">TProofLog.h</includes>
    <includes local="no">TQueryResult.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">TString.h</includes>
    <includes local="no">TEnv.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="128439">
        <label>THashList.h</label>
      </node>
      <node id="128402">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128403" relation="include">
        </childnode>
        <childnode refid="128404" relation="include">
        </childnode>
      </node>
      <node id="128417">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128418" relation="include">
        </childnode>
        <childnode refid="128419" relation="include">
        </childnode>
        <childnode refid="128420" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128403" relation="include">
        </childnode>
      </node>
      <node id="128415">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128417" relation="include">
        </childnode>
        <childnode refid="128404" relation="include">
        </childnode>
      </node>
      <node id="128440">
        <label>TList.h</label>
      </node>
      <node id="128413">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
      </node>
      <node id="128442">
        <label>TProofLog.h</label>
      </node>
      <node id="128408">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
      </node>
      <node id="128429">
        <label>SampleHandler/Meta.h</label>
        <link refid="d8/d85/Meta_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
        <childnode refid="128412" relation="include">
        </childnode>
      </node>
      <node id="128409">
        <label>string</label>
      </node>
      <node id="128422">
        <label>EventLoop/ProofArgs.h</label>
        <link refid="d9/d8a/ProofArgs_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128403" relation="include">
        </childnode>
        <childnode refid="128404" relation="include">
        </childnode>
      </node>
      <node id="128420">
        <label>map</label>
      </node>
      <node id="128443">
        <label>TQueryResult.h</label>
      </node>
      <node id="128435">
        <label>TDirectory.h</label>
      </node>
      <node id="128414">
        <label>EventLoop/EmptyFileHandler.h</label>
        <link refid="da/d69/EmptyFileHandler_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
      </node>
      <node id="128424">
        <label>RootCoreUtils/ShellExec.h</label>
        <link refid="d7/d58/ShellExec_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
      </node>
      <node id="128404">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128406" relation="include">
        </childnode>
        <childnode refid="128408" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
        <childnode refid="128410" relation="include">
        </childnode>
      </node>
      <node id="128430">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128403" relation="include">
        </childnode>
        <childnode refid="128408" relation="include">
        </childnode>
        <childnode refid="128431" relation="include">
        </childnode>
      </node>
      <node id="128401">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="128423">
        <label>RootCoreUtils/ranLoadPackages.h</label>
        <link refid="d0/df3/ranLoadPackages_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
      </node>
      <node id="128437">
        <label>TFileCollection.h</label>
      </node>
      <node id="128403">
        <label>TObject.h</label>
      </node>
      <node id="128434">
        <label>TChain.h</label>
      </node>
      <node id="128444">
        <label>TSystem.h</label>
      </node>
      <node id="128416">
        <label>vector</label>
      </node>
      <node id="128436">
        <label>TFile.h</label>
      </node>
      <node id="128448">
        <label>sstream</label>
      </node>
      <node id="128433">
        <label>SampleHandler/SampleLocal.h</label>
        <link refid="dc/d9e/SampleLocal_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128430" relation="include">
        </childnode>
      </node>
      <node id="128407">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="128446">
        <label>TEnv.h</label>
      </node>
      <node id="128427">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
      </node>
      <node id="128400">
        <label>EventLoop/ProofDriver.h</label>
        <link refid="d2/de4/ProofDriver_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128402" relation="include">
        </childnode>
      </node>
      <node id="128438">
        <label>TFileInfo.h</label>
      </node>
      <node id="128419">
        <label>iosfwd</label>
      </node>
      <node id="128428">
        <label>SampleHandler/MetaData.h</label>
        <link refid="dd/d46/MetaData_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128429" relation="include">
        </childnode>
        <childnode refid="128406" relation="include">
        </childnode>
      </node>
      <node id="128447">
        <label>iostream</label>
      </node>
      <node id="128441">
        <label>TProof.h</label>
      </node>
      <node id="128431">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="128405" relation="include">
        </childnode>
        <childnode refid="128432" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
      </node>
      <node id="128411">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128412" relation="include">
        </childnode>
        <childnode refid="128413" relation="include">
        </childnode>
      </node>
      <node id="128412">
        <label>TNamed.h</label>
      </node>
      <node id="128445">
        <label>TString.h</label>
      </node>
      <node id="128426">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
        <childnode refid="128409" relation="include">
        </childnode>
        <childnode refid="128427" relation="include">
        </childnode>
      </node>
      <node id="128399">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/ProofDriver.cxx</label>
        <link refid="ProofDriver.cxx"/>
        <childnode refid="128400" relation="include">
        </childnode>
        <childnode refid="128411" relation="include">
        </childnode>
        <childnode refid="128414" relation="include">
        </childnode>
        <childnode refid="128415" relation="include">
        </childnode>
        <childnode refid="128421" relation="include">
        </childnode>
        <childnode refid="128422" relation="include">
        </childnode>
        <childnode refid="128423" relation="include">
        </childnode>
        <childnode refid="128424" relation="include">
        </childnode>
        <childnode refid="128425" relation="include">
        </childnode>
        <childnode refid="128428" relation="include">
        </childnode>
        <childnode refid="128430" relation="include">
        </childnode>
        <childnode refid="128433" relation="include">
        </childnode>
        <childnode refid="128434" relation="include">
        </childnode>
        <childnode refid="128435" relation="include">
        </childnode>
        <childnode refid="128436" relation="include">
        </childnode>
        <childnode refid="128437" relation="include">
        </childnode>
        <childnode refid="128438" relation="include">
        </childnode>
        <childnode refid="128439" relation="include">
        </childnode>
        <childnode refid="128440" relation="include">
        </childnode>
        <childnode refid="128441" relation="include">
        </childnode>
        <childnode refid="128442" relation="include">
        </childnode>
        <childnode refid="128443" relation="include">
        </childnode>
        <childnode refid="128444" relation="include">
        </childnode>
        <childnode refid="128445" relation="include">
        </childnode>
        <childnode refid="128446" relation="include">
        </childnode>
        <childnode refid="128447" relation="include">
        </childnode>
        <childnode refid="128418" relation="include">
        </childnode>
        <childnode refid="128448" relation="include">
        </childnode>
      </node>
      <node id="128425">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
        <childnode refid="128426" relation="include">
        </childnode>
      </node>
      <node id="128432">
        <label>set</label>
      </node>
      <node id="128406">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="128407" relation="include">
        </childnode>
      </node>
      <node id="128405">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="128418">
        <label>memory</label>
      </node>
      <node id="128421">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="128401" relation="include">
        </childnode>
        <childnode refid="128416" relation="include">
        </childnode>
        <childnode refid="128403" relation="include">
        </childnode>
        <childnode refid="128404" relation="include">
        </childnode>
        <childnode refid="128417" relation="include">
        </childnode>
      </node>
      <node id="128410">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/de8/ProofDriver_8cxx_1a2e2a067ce867e504463e97fd918430d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::ProofDriver) namespace EL</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d4/d82/classEL_1_1ProofDriver" kindref="compound">EL::ProofDriver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>effects: print the worker logs guarantee: basic failures: proof dependent rationale: inspired by <ulink url="http://sourceforge.net/p/sframe/code/HEAD/tree/SFrame/trunk/core/src/SProofManager.cxx#l271">http://sourceforge.net/p/sframe/code/HEAD/tree/SFrame/trunk/core/src/SProofManager.cxx#l271</ulink> </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/ProofDriver.cxx" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/ProofDriver.cxx" bodystart="48" bodyend="332"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2011.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/ProofDriver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/EmptyFileHandler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Job.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/ProofArgs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ranLoadPackages.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ShellExec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/Sample.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TChain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TDirectory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFileCollection.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFileInfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;THashList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TProof.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TProofLog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TQueryResult.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TString.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TEnv.h&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">ClassImp(<ref refid="d4/d82/classEL_1_1ProofDriver" kindref="compound">EL::ProofDriver</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">namespace<sp/>EL</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printWorkerLogs<sp/>(TProof&amp;<sp/>proof)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TList*<sp/>slaveInfos<sp/>=<sp/>proof.GetListOfSlaveInfos();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TProofLog&gt;<sp/>log<sp/>(proof.GetManager()-&gt;GetSessionLogs());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TList*<sp/>logList<sp/>=<sp/>log-&gt;GetListOfLogs();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>&lt;<sp/>logList-&gt;GetSize();<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>the<sp/>log<sp/>of<sp/>a<sp/>single<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>TProofLogElem*<sp/>element</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TProofLogElem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(logList-&gt;At<sp/>(iter));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(element<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>&quot;the<sp/>name&quot;<sp/>of<sp/>the<sp/>node.<sp/>TProofLogElem<sp/>objects<sp/>only<sp/>know<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>came<sp/>from<sp/>node<sp/>&quot;0.2&quot;<sp/>for<sp/>instance.<sp/>This<sp/>small<sp/>loop<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>identifiers<sp/>to<sp/>the<sp/>proper<sp/>node<sp/>names<sp/>in<sp/>the<sp/>slaveInfos<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>identifier<sp/>is<sp/>not<sp/>found<sp/>in<sp/>the<sp/>list,<sp/>then<sp/>it<sp/>has<sp/>to<sp/>be<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>master...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>nodeName;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(element-&gt;GetName(),<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeName<sp/>=<sp/>proof.GetMaster();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>jter<sp/>=<sp/>0;<sp/>jter<sp/>&lt;<sp/>slaveInfos-&gt;GetSize()<sp/>&amp;&amp;<sp/>nodeName.empty();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<sp/>jter)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>the<sp/>TSlaveInfo<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TSlaveInfo*<sp/>info<sp/>=</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TSlaveInfo*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(slaveInfos-&gt;At<sp/>(jter));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(info<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>TSlaveInfo<sp/>describes<sp/>the<sp/>source<sp/>of<sp/>the<sp/>log:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(element-&gt;GetName(),<sp/>info-&gt;GetOrdinal())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeName<sp/>=<sp/>info-&gt;GetName();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeName.empty())</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeName<sp/>=<sp/>element-&gt;GetName();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>log.<sp/>Note<sp/>that<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>redirect<sp/>the<sp/>log<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>m_logger.<sp/>The<sp/>log<sp/>lines<sp/>of<sp/>the<sp/>nodes<sp/>will<sp/>already<sp/>be<sp/>formatted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>printing<sp/>them<sp/>through<sp/>SLogger<sp/>would<sp/>just<sp/>look<sp/>ugly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>from<sp/>node:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nodeName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>element-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;GetMacro()-&gt;Print();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ProofDriver::queryResultName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EventLoop_TQueryResult&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ProofDriver::optionParFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EventLoop_ParFile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ProofDriver<sp/>::</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>testInvariant<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="119"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="d4/d82/classEL_1_1ProofDriver_1acd83b232f73d0ef796452bea7e4f050e" kindref="member">ProofDriver ::</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="d4/d82/classEL_1_1ProofDriver_1acd83b232f73d0ef796452bea7e4f050e" kindref="member">  ProofDriver</ref><sp/>()</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>returnFiles<sp/>(true),<sp/>numWorkers<sp/>(0),<sp/>makeParOptions<sp/>(</highlight><highlight class="stringliteral">&quot;--lite&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>proofParm.setDouble<sp/>(</highlight><highlight class="stringliteral">&quot;PROOF_UseTreeCache&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d82/classEL_1_1ProofDriver_1a69a3f193bc2060dd353d78d8cd182704" kindref="member">ProofDriver ::</ref></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="d4/d82/classEL_1_1ProofDriver_1a69a3f193bc2060dd353d78d8cd182704" kindref="member">  removePar</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="138"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TProof&gt;<sp/>proof<sp/>(TProof::Open<sp/>(<ref refid="d4/d82/classEL_1_1ProofDriver_1ab2d02c952fa7ec16b415cab09152b02a" kindref="member" tooltip="description: the name of the proof server, if we have one">proofMaster</ref>.c_str()));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proof-&gt;ClearPackage<sp/>(</highlight><highlight class="stringliteral">&quot;RootCore&quot;</highlight><highlight class="normal">)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>clear<sp/>package<sp/>RootCore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ProofDriver<sp/>::</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>doSubmit<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="150"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>sourceDir<sp/>=<sp/>gSystem-&gt;WorkingDirectory<sp/>();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tmpDir<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSystem-&gt;MakeDirectory<sp/>(tmpDir.c_str())<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>directory<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tmpDir);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSystem-&gt;ChangeDirectory<sp/>(tmpDir.c_str())<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>directory<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tmpDir);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>server<sp/>=<sp/><ref refid="d4/d82/classEL_1_1ProofDriver_1ab2d02c952fa7ec16b415cab09152b02a" kindref="member" tooltip="description: the name of the proof server, if we have one">proofMaster</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server.empty())</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>server<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lite://&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server.find<sp/>(</highlight><highlight class="stringliteral">&quot;://&quot;</highlight><highlight class="normal">)<sp/>&gt;=<sp/>server.find<sp/>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>server<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;proof://&quot;</highlight><highlight class="normal"><sp/>+<sp/>server;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server.find<sp/>(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>server.find<sp/>(</highlight><highlight class="stringliteral">&quot;://&quot;</highlight><highlight class="normal">)+3)<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>server<sp/>=<sp/>server<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TProof::AddEnvVar(</highlight><highlight class="stringliteral">&quot;PROOF_INITCMD&quot;</highlight><highlight class="normal">,<sp/>gSystem-&gt;GetFromPipe(</highlight><highlight class="stringliteral">&quot;source<sp/>$ROOTCOREBIN/../rcSetup.sh<sp/>-P&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>worker_options;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d82/classEL_1_1ProofDriver_1aff131f5bbfd05b2268d6569f4f393adb" kindref="member">numWorkers</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>worker_options<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;workers=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d4/d82/classEL_1_1ProofDriver_1aff131f5bbfd05b2268d6569f4f393adb" kindref="member">numWorkers</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TProof::AddEnvVar(</highlight><highlight class="stringliteral">&quot;PROOF_NWORKERS&quot;</highlight><highlight class="normal">,<sp/>TString::Format(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,numWorkers)<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TProof::AddEnvVar(</highlight><highlight class="stringliteral">&quot;PROOF_INTWAIT&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;30000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gEnv-&gt;SetValue(</highlight><highlight class="stringliteral">&quot;Proof.SocketActivityTimeout&quot;</highlight><highlight class="normal">,30000);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TProof&gt;<sp/>proof<sp/>(TProof::Open<sp/>(server.c_str()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;SetLogLevel<sp/>(15);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TIter<sp/>iter<sp/>(&amp;<ref refid="d4/d82/classEL_1_1ProofDriver_1a08b5c59b426eddb3bfddb0dbf9ef7a55" kindref="member" tooltip="description: the parameters to pass to proof">proofParm</ref>);<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>iter.Next());<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;std::string&gt;</ref><sp/>*pstring<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;double&gt;</ref><sp/>*pdouble<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pstring<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;std::string&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;SetParameter<sp/>(object-&gt;GetName(),<sp/>pstring-&gt;<ref refid="da/d63/classSH_1_1MetaData_1ac01d5d00af4ecff4f8e8532f31085194" kindref="member" tooltip="the value contained">value</ref>.c_str());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pdouble<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="da/d63/classSH_1_1MetaData" kindref="compound" tooltip="A class implementing a templatized version of the meta-data.">SH::MetaData&lt;double&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;SetParameter<sp/>(object-&gt;GetName(),<sp/>pdouble-&gt;<ref refid="da/d63/classSH_1_1MetaData_1ac01d5d00af4ecff4f8e8532f31085194" kindref="member" tooltip="the value contained">value</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;don&apos;t<sp/>know<sp/>the<sp/>type<sp/>of<sp/>parameter:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string<sp/>(object-&gt;GetName()));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>jobMeta<sp/>=<sp/>*job.options();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jobMeta.<ref refid="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" kindref="member" tooltip="fetch the meta-data from the given sample not present in this sample. ignores any...">fetchDefaults</ref><sp/>(*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>parPath<sp/>=<sp/>jobMeta.<ref refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" kindref="member" tooltip="the meta-data string with the given name">castString</ref><sp/>(<ref refid="d4/d82/classEL_1_1ProofDriver_1a225f129d6480085d2ee950a100c2fa95" kindref="member" tooltip="description: the option for the name of the par file">optionParFile</ref>,<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/RootCore.par&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU::Shell::exec<sp/>(</highlight><highlight class="stringliteral">&quot;$ROOTCOREDIR/scripts/make_par.sh<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d4/d82/classEL_1_1ProofDriver_1ade584ae6f5935e91b2e598893f55f25a" kindref="member" tooltip="description: the options to pass to make_par.sh">makeParOptions</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>parPath);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>proof-&gt;SetQueryMode<sp/>(TProof::kSync);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proof-&gt;UploadPackage<sp/>(parPath.c_str())<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>printWorkerLogs<sp/>(*proof);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>((</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>upload<sp/>package<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>parPath).c_str());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proof-&gt;EnablePackage<sp/>(</highlight><highlight class="stringliteral">&quot;RootCore&quot;</highlight><highlight class="normal">,<sp/><ref refid="d9/d83/namespaceRCU_1aea9c76ac79711b2f15e7823b72a63a4c" kindref="member" tooltip="whether load_packages.C has been run">RCU::ranLoadPackages</ref>())<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>upload<sp/>package<sp/>RootCore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;ShowEnabledPackages<sp/>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,SH::SampleHandler&gt;<sp/>sh_out;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d4/d82/classEL_1_1ProofDriver_1a4e4e5f06e5e5593c770f26faf4047cc3" kindref="member">returnFiles</ref>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" kindref="member">mergedOutputMkdir</ref><sp/>(location,<sp/>job);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" kindref="member">mergedOutputSave</ref><sp/>(location,<sp/>job);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>sampleIndex<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>job.sampleHandler().size();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleIndex<sp/>!=<sp/>end;<sp/>++<sp/>sampleIndex)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample<sp/>=<sp/>job.sampleHandler()[sampleIndex];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>proof-&gt;ClearInput<sp/>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(job.options()-&gt;castBool<sp/>(<ref refid="da/dbb/classEL_1_1Job_1af4fc46001aaaf18d1c2d98d5d7b49ea3" kindref="member">Job::optPerfTree</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;SetPerfTree<sp/>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;ProofArgs&gt;<sp/>args<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ProofArgs);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;driver<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d4/d82/classEL_1_1ProofDriver_1acd83b232f73d0ef796452bea7e4f050e" kindref="member">ProofDriver</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Clone());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" kindref="member">Job::algsIter</ref><sp/>alg<sp/>=<sp/>job.algsBegin(),<sp/>end<sp/>=<sp/>job.algsEnd();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alg<sp/>!=<sp/>end;<sp/>++<sp/>alg)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;algs.push_back<sp/>(0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;algs.back()<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">Algorithm*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*alg)-&gt;Clone());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),<sp/>end<sp/>=<sp/>job.outputEnd();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;output.push_back<sp/>(*out);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;sample_name<sp/>=<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;sample_meta<sp/>=<sp/>*sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" kindref="member" tooltip="the meta-information for this sample">meta</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;sample_meta.fetchDefaults<sp/>(*job.options());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;sample_meta.fetchDefaults<sp/>(*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;output_dir<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Long64_t<sp/>maxEvents</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Long64_t<sp/>(args-&gt;sample_meta.castDouble<sp/>(<ref refid="da/dbb/classEL_1_1Job_1a2d1dde35c522bbf7d35027f0dfdccc97" kindref="member">Job::optMaxEvents</ref>,<sp/>-1));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Long64_t<sp/>skipEvents</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Long64_t<sp/>(args-&gt;sample_meta.castDouble<sp/>(<ref refid="da/dbb/classEL_1_1Job_1ab08d4d8fb8f7f639b1bf755399687d77" kindref="member">Job::optSkipEvents</ref>,<sp/>0));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>selector<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EL::ProofTSelector&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args-&gt;sample_meta.castBool<sp/>(<ref refid="da/dbb/classEL_1_1Job_1ad81793cbf27572688a3b03e3954356d3" kindref="member" tooltip="the option to do processing in a background process in PROOF">Job::optBackgroundProcess</ref>))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>selector<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EL::BackgroundTSelector&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>proof-&gt;AddInput<sp/>(args.release());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>proof-&gt;AddInput<sp/>(sample-&gt;Clone());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TDSet&gt;<sp/>dset<sp/>(sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1aca30caa2664c0e1b97b3ad2c47cb822f" kindref="member" tooltip="create a TDSet object, containing all these files">makeTDSet</ref>());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Long64_t<sp/>result<sp/>=<sp/>proof-&gt;Process<sp/>(dset.get(),<sp/>selector.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>maxEvents,<sp/>skipEvents);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>proof-&gt;ShowQueries<sp/>();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TChain&gt;<sp/>chain<sp/>(sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1af6184b5cc551270f50e9370c7c709766" kindref="member" tooltip="create a TChain object, containing all these files">makeTChain</ref>());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chain-&gt;GetEntries()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;PROOF<sp/>processing<sp/>of<sp/>sample<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_WARN_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;empty<sp/>sample<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ignored<sp/>for<sp/>proof<sp/>processing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>TList<sp/>*outputList<sp/>=<sp/>proof-&gt;GetOutputList();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TQueryResult<sp/>*query<sp/>=<sp/>proof-&gt;GetQueryResult<sp/>();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>query<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TQueryResult*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(query-&gt;Clone<sp/>(<ref refid="d4/d82/classEL_1_1ProofDriver_1a2517a3569e4df89f569318b88efe64a2" kindref="member">queryResultName</ref>.c_str()));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputList-&gt;Add<sp/>(query);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(job.options()-&gt;castBool<sp/>(<ref refid="da/dbb/classEL_1_1Job_1af4fc46001aaaf18d1c2d98d5d7b49ea3" kindref="member">Job::optPerfTree</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proof-&gt;SavePerfTree<sp/>((location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/perftree-&quot;</highlight><highlight class="normal"><sp/>+<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d4/d82/classEL_1_1ProofDriver_1a4e4e5f06e5e5593c770f26faf4047cc3" kindref="member">returnFiles</ref>)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TDirectory<sp/>*origDir<sp/>=<sp/>gDirectory;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::SampleLocal&gt;<sp/>mysample</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>()));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>outputName<sp/>=<sp/>out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TFileCollection<sp/>*coll<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TFileCollection*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(proof-&gt;GetOutputList()-&gt;FindObject<sp/>((out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str()));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(coll);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIter<sp/>iter<sp/>(coll-&gt;GetList<sp/>());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TObject<sp/>*obj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((obj<sp/>=<sp/>iter.Next()))</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TFileInfo<sp/>*info<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TFileInfo*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(info);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fileName<sp/>=<sp/>info-&gt;GetCurrentUrl()-&gt;GetUrl();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TFile&gt;<sp/>myfile</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TFile::Open<sp/>(fileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIter<sp/>myiter<sp/>(myfile-&gt;GetListOfKeys());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myiter.Next())</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(info-&gt;GetCurrentUrl()-&gt;GetUrl());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sh_out[out-&gt;label()].add<sp/>(mysample.release());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>gDirectory<sp/>=<sp/>origDir;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" kindref="member">saveOutput</ref><sp/>(location,<sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member" tooltip="the name of the sample we are using">name</ref>(),<sp/>*outputList);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printWorkerLogs<sp/>(*proof);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d4/d82/classEL_1_1ProofDriver_1a4e4e5f06e5e5593c770f26faf4047cc3" kindref="member">returnFiles</ref>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh_out[out-&gt;label()].save<sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;ChangeDirectory<sp/>(sourceDir.c_str());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;ChangeDirectory<sp/>(sourceDir.c_str());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d9f/namespaceEL_1a553514baee2eca7f5c2759bc462020b5" kindref="member" tooltip="check the output of the given (completed) job, rerun all (empty) files that did not...">processEmptyFiles</ref><sp/>(location,<sp/>job);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/ProofDriver.cxx"/>
  </compounddef>
</doxygen>
