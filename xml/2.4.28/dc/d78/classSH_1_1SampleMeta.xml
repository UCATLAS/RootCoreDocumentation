<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/d78/classSH_1_1SampleMeta" kind="class" prot="public">
    <compoundname>SH::SampleMeta</compoundname>
    <basecompoundref refid="dd/d5f/classSH_1_1Sample" prot="public" virt="non-virtual">SH::Sample</basecompoundref>
    <includes refid="d0/d0c/SampleMeta_8h" local="no">SampleMeta.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a67f7003571651aed9f3daf456b1bb686" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleMeta::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplements refid="dd/d5f/classSH_1_1Sample_1a93181b29b079d3bf07b6db332ba06636">testInvariant</reimplements>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="37"/>
      </memberdef>
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a550654665593088e5b2efa324c607cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleMeta::SampleMeta</definition>
        <argsstring>()</argsstring>
        <name>SampleMeta</name>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
<simplesect kind="warning"><para>only to be used by serialization code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="48"/>
      </memberdef>
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a5dbcea7b91735c0b3dce33bbfb298435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleMeta::SampleMeta</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>SampleMeta</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the sample </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a265590dd9527abe3f5d14624d8b75e5d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t SH::SampleMeta::getNumFiles</definition>
        <argsstring>() const </argsstring>
        <name>getNumFiles</name>
        <reimplements refid="dd/d5f/classSH_1_1Sample_1a713d0a3bd5caac0b6e2d7ad1b724663e">getNumFiles</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="Sample::getNumFiles"><para><copydoc link="numFiles"><para>the number of files in the sample </para><para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" kindref="member">Sample::numFiles()</ref> </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a98c058aabae7b009f0a7c936f8f94521" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string SH::SampleMeta::getFileName</definition>
        <argsstring>(std::size_t index) const </argsstring>
        <name>getFileName</name>
        <reimplements refid="dd/d5f/classSH_1_1Sample_1a1e8534656a2f33fd6efc395c94f110d5">getFileName</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="Sample::getFileName"><para><copydoc link="fileName"><para>the name of the file with the given index </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>index &lt; <ref refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" kindref="member">numFiles()</ref> </para></simplesect>
<simplesect kind="post"><para>!result.empty() </para></simplesect>
<simplesect kind="warning"><para>this is meant more for debugging and may or may not do what you want, e.g. if this is a grid dataset the file may not be directly accessible. </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1a7e6d80c20db8af008fff8e545e715d6c" kindref="member">Sample::fileName()</ref> </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="73"/>
      </memberdef>
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1a65d053d3c7babc8a702dfad53ea1168c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SamplePtr</ref></type>
        <definition>virtual SamplePtr SH::SampleMeta::doMakeLocal</definition>
        <argsstring>() const </argsstring>
        <name>doMakeLocal</name>
        <reimplements refid="dd/d5f/classSH_1_1Sample_1ae7b8e70d0242108375bfa312d878fb7b">doMakeLocal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="Sample::doMakeLocal"><para><copydoc link="makeLocal"><para>Make this a local sample, i.e. one which can be directly opened with TFile::Open. </para><para><simplesect kind="return"><para>the local sample, or &quot;this&quot; if this already is a local sample </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 can not make local sample </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1aba72d27822916d6d22371b2535898ea9" kindref="member">SH::Sample::makeLocal()</ref> </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1ac7ed8374af4c6666953493bb85614b47" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; SH::SampleMeta::doMakeFileList</definition>
        <argsstring>() const </argsstring>
        <name>doMakeFileList</name>
        <reimplements refid="dd/d5f/classSH_1_1Sample_1a85b8c900de8dffe17a69997813f19884">doMakeFileList</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="Sample::doMakeFileList"><para><copydoc link="makeFileList"><para>make a list of all files, prestaging them if necessary </para><para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 file catalogue failures<linebreak/>
 prestaging failures </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" kindref="member">Sample::makeFileList</ref> </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="81"/>
      </memberdef>
      <memberdef kind="function" id="dc/d78/classSH_1_1SampleMeta_1ace3134c088388c75acd05217d5fe2f5c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleMeta::ClassDef</definition>
        <argsstring>(SampleMeta, 1)</argsstring>
        <name>ClassDef</name>
        <param>
          <type><ref refid="dc/d78/classSH_1_1SampleMeta" kindref="compound">SampleMeta</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> that consists only of Meta-Information. </para>    </briefdescription>
    <detaileddescription>
<para>The purpose of this sample is that you can fill an entire <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> with just Meta-Information and then pull the data for the samples you are actually using into your local sample via <ref refid="d1/d56/classSH_1_1SampleHandler_1af78a6503ae66179a86f5e0b44214d19d" kindref="member">SampleHandler::fetchDefaults()</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="17070">
        <label>SH::Sample</label>
        <link refid="dd/d5f/classSH_1_1Sample"/>
      </node>
      <node id="17069">
        <label>SH::SampleMeta</label>
        <link refid="dc/d78/classSH_1_1SampleMeta"/>
        <childnode refid="17070" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17074">
        <label>string</label>
      </node>
      <node id="17072">
        <label>SH::Sample</label>
        <link refid="dd/d5f/classSH_1_1Sample"/>
        <childnode refid="17073" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="17074" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="17075" relation="usage">
          <edgelabel>m_meta</edgelabel>
        </childnode>
      </node>
      <node id="17073">
        <label>SH::TagList</label>
        <link refid="dd/d41/classSH_1_1TagList"/>
      </node>
      <node id="17071">
        <label>SH::SampleMeta</label>
        <link refid="dc/d78/classSH_1_1SampleMeta"/>
        <childnode refid="17072" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17075">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleMeta.h" bodystart="26" bodyend="90"/>
    <listofallmembers>
      <member refid="dd/d5f/classSH_1_1Sample_1a13051d3ce3b8e6e274f65335297695c5" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>addReplaceMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aca6f155ee6b4428e1bae357d8d0473ab" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>addSamples</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a29c6c8d759e11679c8cb732f55401a84" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>addTag</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1ace3134c088388c75acd05217d5fe2f5c" prot="protected" virt="non-virtual"><scope>SH::SampleMeta</scope><name>ClassDef</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ac9c1da388a4092fced8d6589ac25dae8" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>contains</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a31f1902f6ee5889533df395cbdaa1fe8" prot="protected" virt="virtual"><scope>SH::SampleMeta</scope><name>doAddSamples</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1ac7ed8374af4c6666953493bb85614b47" prot="protected" virt="virtual"><scope>SH::SampleMeta</scope><name>doMakeFileList</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a65d053d3c7babc8a702dfad53ea1168c" prot="private" virt="virtual"><scope>SH::SampleMeta</scope><name>doMakeLocal</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a63a304738acf977fad96f16438e8bfd7" prot="protected" virt="virtual"><scope>SH::SampleMeta</scope><name>doReadHist</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a710460ab5d26a50e4c6bb6c667fdbe6a" prot="protected" virt="virtual"><scope>SH::SampleMeta</scope><name>doUpdateLocation</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a512bfd0e7f78a195d99860df82109a2f" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>fetchMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a7e6d80c20db8af008fff8e545e715d6c" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>fileName</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a6d5b98684ae8ced23f0b31a53834e809" prot="protected" virt="virtual"><scope>SH::SampleMeta</scope><name>getContains</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a98c058aabae7b009f0a7c936f8f94521" prot="private" virt="virtual"><scope>SH::SampleMeta</scope><name>getFileName</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3155537c70c1f520f65e39721cf3fa9e" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>getMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a66d1b3d220d55f0244ee36c2daace765" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>getMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a671f61ecab10f556effe37b0a57c054e" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>getMetaDouble</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>getMetaString</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a218cf64a19d33f7c4ec4f1456f31b40d" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>getNumEntries</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a265590dd9527abe3f5d14624d8b75e5d" prot="private" virt="virtual"><scope>SH::SampleMeta</scope><name>getNumFiles</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>makeFileList</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aba72d27822916d6d22371b2535898ea9" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>makeLocal</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af6184b5cc551270f50e9370c7c709766" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>makeTChain</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aca30caa2664c0e1b97b3ad2c47cb822f" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>makeTDSet</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>meta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a75efa599c9354548d6c29b060e81e549" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>meta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>name</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a07f3585db2b22762b5739d98f05354ea" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>name</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>numFiles</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a2d842d66fb111e80b7890481f2e18cea" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>print</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af1486c6042ac9595caac7f23719464e6" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>printContent</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a83a311458213558ed66dc8976d5dee34" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>RCU_DEPRECATED</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3162cc51aefd1d821d0923521d5ac7dc" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>RCU_DEPRECATED</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>readHist</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3a7ec36a2598b4fade38c78662994daa" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>removeMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aac7e354e873ead42527830e731388d83" prot="protected" virt="non-virtual"><scope>SH::SampleMeta</scope><name>Sample</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a550654665593088e5b2efa324c607cdc" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>SampleMeta</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a5dbcea7b91735c0b3dce33bbfb298435" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>SampleMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a71bc56dc741398d19debdcfe2c97b613" prot="protected" virt="non-virtual"><scope>SH::SampleMeta</scope><name>SamplePtr</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ab19adefa98f34923c0921f9b42d29736" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>setMetaDouble</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>setMetaString</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>tags</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ae146318dce10d66add62ea1eb6e5f859" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>tags</name></member>
      <member refid="dc/d78/classSH_1_1SampleMeta_1a67f7003571651aed9f3daf456b1bb686" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>testInvariant</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1afc7c7f2851013cf7cfb786c46b244353" prot="public" virt="non-virtual"><scope>SH::SampleMeta</scope><name>updateLocation</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ac6e302973fa57eb7ee0c85d858b5e43f" prot="public" virt="virtual"><scope>SH::SampleMeta</scope><name>~Sample</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
