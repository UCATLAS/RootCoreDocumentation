<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/dd6/BunchTrain_8cxx" kind="file">
    <compoundname>BunchTrain.cxx</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes refid="d3/d61/AsgMessaging_8h" local="yes">AsgTools/AsgMessaging.h</includes>
    <includes refid="d5/d28/BunchTrain_8h" local="yes">TrigBunchCrossingTool/BunchTrain.h</includes>
    <includes refid="d0/db4/SetPrint_8h" local="yes">SetPrint.h</includes>
    <incdepgraph>
      <node id="308057">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="308051" relation="include">
        </childnode>
        <childnode refid="308052" relation="include">
        </childnode>
        <childnode refid="308058" relation="include">
        </childnode>
        <childnode refid="308059" relation="include">
        </childnode>
      </node>
      <node id="308059">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="308062">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="308055">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="308051" relation="include">
        </childnode>
        <childnode refid="308052" relation="include">
        </childnode>
        <childnode refid="308056" relation="include">
        </childnode>
      </node>
      <node id="308052">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="308051">
        <label>string</label>
      </node>
      <node id="308056">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="308066">
        <label>TrigBunchCrossingTool/BunchCrossing.h</label>
        <link refid="dc/ddd/BunchCrossing_8h_source"/>
        <childnode refid="308065" relation="include">
        </childnode>
        <childnode refid="308053" relation="include">
        </childnode>
      </node>
      <node id="308067">
        <label>SetPrint.h</label>
        <link refid="d0/db4/SetPrint_8h_source"/>
        <childnode refid="308064" relation="include">
        </childnode>
        <childnode refid="308049" relation="include">
        </childnode>
        <childnode refid="308053" relation="include">
        </childnode>
      </node>
      <node id="308061">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="308052" relation="include">
        </childnode>
        <childnode refid="308055" relation="include">
        </childnode>
        <childnode refid="308062" relation="include">
        </childnode>
      </node>
      <node id="308054">
        <label>sstream</label>
      </node>
      <node id="308047">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx</label>
        <link refid="BunchTrain.cxx"/>
        <childnode refid="308048" relation="include">
        </childnode>
        <childnode refid="308049" relation="include">
        </childnode>
        <childnode refid="308050" relation="include">
        </childnode>
        <childnode refid="308063" relation="include">
        </childnode>
        <childnode refid="308067" relation="include">
        </childnode>
      </node>
      <node id="308065">
        <label>iosfwd</label>
      </node>
      <node id="308048">
        <label>cstdlib</label>
      </node>
      <node id="308049">
        <label>iostream</label>
      </node>
      <node id="308060">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="308053">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="308051" relation="include">
        </childnode>
        <childnode refid="308054" relation="include">
        </childnode>
        <childnode refid="308052" relation="include">
        </childnode>
        <childnode refid="308055" relation="include">
        </childnode>
        <childnode refid="308057" relation="include">
        </childnode>
        <childnode refid="308060" relation="include">
        </childnode>
      </node>
      <node id="308058">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="308063">
        <label>TrigBunchCrossingTool/BunchTrain.h</label>
        <link refid="d5/d28/BunchTrain_8h_source"/>
        <childnode refid="308064" relation="include">
        </childnode>
        <childnode refid="308065" relation="include">
        </childnode>
        <childnode refid="308053" relation="include">
        </childnode>
        <childnode refid="308066" relation="include">
        </childnode>
      </node>
      <node id="308050">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="308051" relation="include">
        </childnode>
        <childnode refid="308052" relation="include">
        </childnode>
        <childnode refid="308053" relation="include">
        </childnode>
        <childnode refid="308061" relation="include">
        </childnode>
      </node>
      <node id="308064">
        <label>set</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d2/d87/namespaceTrig">Trig</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/dd6/BunchTrain_8cxx_1a4b4d6d0ed9a1f3887517418bde4c059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Trig::BunchTrain &amp;bt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">Trig::BunchTrain</ref> &amp;</type>
          <declname>bt</declname>
        </param>
        <briefdescription>
<para>Output operator for BunchTrain objects. </para>        </briefdescription>
        <detaileddescription>
<para>Operator for printing the configuration of bunch trains in a readable format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> standard std::ostream object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bt</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch train to print </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same stream object that it received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="293" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd6/BunchTrain_8cxx_1a538b665e22bc2f348621a3db5c161703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MsgStream &amp;</type>
        <definition>MsgStream&amp; operator&lt;&lt;</definition>
        <argsstring>(MsgStream &amp;stream, const Trig::BunchTrain &amp;bt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>MsgStream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">Trig::BunchTrain</ref> &amp;</type>
          <declname>bt</declname>
        </param>
        <briefdescription>
<para>Output operator for BunchTrain objects. </para>        </briefdescription>
        <detaileddescription>
<para>Operator for printing the configuration of bunch trains in a readable format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> functional MsgStream object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bt</parametername>
</parameternamelist>
<parameterdescription>
<para>The bunch train to print </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same stream object that it received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" line="312" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="312" bodyend="321"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>BunchTrain.cxx<sp/>625753<sp/>2014-11-03<sp/>13:40:15Z<sp/>krasznaa<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>System<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gaudi/Athena<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsgTools/AsgMessaging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigBunchCrossingTool/BunchTrain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SetPrint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Trig<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><ref refid="d2/d3e/classTrig_1_1BunchTrain_1aa0398bd0bd49b9fd6bf10042a993f347" kindref="member" tooltip="Default constructor.">BunchTrain::BunchTrain</ref>()</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::set&lt;<sp/>BunchCrossing<sp/>&gt;(),<sp/>m_spacing(<sp/>-1<sp/>),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_front(),<sp/>m_back(),<sp/>m_gapFound(<sp/>false<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>BunchTrain::BunchTrain(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchTrain&amp;<sp/>parent<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::set&lt;<sp/>BunchCrossing<sp/>&gt;(<sp/>parent<sp/>),<sp/>m_spacing(<sp/>-1<sp/>),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_front(),<sp/>m_back(),<sp/>m_gapFound(<sp/>false<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>validate();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>BunchTrain&amp;<sp/>BunchTrain::operator=<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchTrain&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>self-assignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>heavy<sp/>lifting<sp/>in<sp/>the<sp/>base<sp/>class&apos;s<sp/>assignment<sp/>operator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;<sp/>BunchCrossing<sp/>&gt;::operator=(<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>cached<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_front<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_back<sp/><sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_gapFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>the<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>validate();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>updated<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BunchTrain::spacing()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_spacing;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BunchTrain::distance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchCrossing&amp;<sp/>bc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>train<sp/>is<sp/>empty,<sp/>by<sp/>definition<sp/>the<sp/>distance<sp/>is<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>size()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>BC<sp/>is<sp/>already<sp/>in<sp/>the<sp/>train,<sp/>it<sp/>has<sp/>a<sp/>distance<sp/>of<sp/>0<sp/>from<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>find(<sp/>bc<sp/>)<sp/>!=<sp/>end()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>BC&apos;s<sp/>distance<sp/>from<sp/>all<sp/>the<sp/>bunches<sp/>in<sp/>the<sp/>train,<sp/>and<sp/>take<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>smallest<sp/>one:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_distance<sp/>=<sp/><ref refid="d6/db1/classTrig_1_1BunchCrossing_1a9008ae1417ffbe698a792bd4fc19caa7" kindref="member" tooltip="The maximum number of bunches that can be in the LHC.">BunchCrossing::MAX_BCID</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BunchTrain::const_iterator<sp/>itr<sp/>=<sp/>begin();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end();<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>diff<sp/>=<sp/>itr-&gt;distance(<sp/>bc<sp/>)<sp/>)<sp/>&lt;<sp/>min_distance<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_distance;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BunchTrain::isInside(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchCrossing&amp;<sp/>bc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it&apos;s<sp/>a<sp/>filled<sp/>bunch<sp/>crossing<sp/>in<sp/>this<sp/>train,<sp/>then<sp/>it&apos;s<sp/>inside<sp/>of<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>find(<sp/>bc<sp/>)<sp/>!=<sp/>end()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>bunch<sp/>crossing<sp/>is<sp/>an<sp/>empty<sp/>bunch<sp/>crossing<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>train:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_gapFound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/>*begin()<sp/>&lt;<sp/>bc<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>*train_back()<sp/>&gt;<sp/>bc<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>*train_front()<sp/>&lt;<sp/>bc<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>*(<sp/>--end()<sp/>)<sp/>&gt;<sp/>bc<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>*train_front()<sp/>&lt;<sp/>bc<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>*train_back()<sp/>&gt;<sp/>bc<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>none<sp/>of<sp/>the<sp/>above<sp/>are<sp/>true,<sp/>then<sp/>the<sp/>reference<sp/>is<sp/>not<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>train:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>BunchTrain::const_iterator<sp/>BunchTrain::train_front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_gapFound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_front;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>BunchTrain::const_iterator<sp/>BunchTrain::train_back()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_gapFound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_back;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>--end()<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BunchTrain::validate()<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>logger(<sp/></highlight><highlight class="stringliteral">&quot;Trig::BunchTrain&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.msg().setLevel(<sp/>MSG::INFO<sp/>);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>temporary<sp/>hack<sp/>until<sp/>AsgTools<sp/>is<sp/>updated...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>gap<sp/>flag:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_gapFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>the<sp/>bunch<sp/>crossings<sp/>of<sp/>this<sp/>train:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BunchTrain::const_iterator<sp/>itr<sp/>=<sp/>begin();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bunch_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BunchTrain::const_iterator<sp/>next;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>itr<sp/>!=<sp/>end();<sp/>++itr,<sp/>++bunch_pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>next<sp/>bunch<sp/>crossing<sp/>in<sp/>the<sp/>train:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>itr;<sp/>++next;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>next<sp/>==<sp/>end()<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>spacing<sp/>between<sp/>these<sp/>two:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/><ref refid="d6/db1/classTrig_1_1BunchCrossing_1a93add5dc0e87b359d9aeaca7c43dfc2c" kindref="member" tooltip="Minimum spacing between the bunches, in nanoseconds.">BunchCrossing::BUNCH_SPACING</ref><sp/>*<sp/>next-&gt;distance(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_spacing<sp/>&lt;<sp/>0<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>these<sp/>are<sp/>the<sp/>first<sp/>two<sp/>bunches<sp/>of<sp/>the<sp/>train</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_spacing<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>stored<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>diff<sp/>!=<sp/>m_spacing<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>there<sp/>can<sp/>be<sp/>a<sp/>two<sp/>valid<sp/>reasons<sp/>for<sp/>it.<sp/>First<sp/>is<sp/>that<sp/>we&apos;ve<sp/>been<sp/>seeing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>correct<sp/>bunch<sp/>spacing<sp/>so<sp/>far,<sp/>and<sp/>we<sp/>just<sp/>reached<sp/>the<sp/>gap:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>!<sp/>m_gapFound<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>diff<sp/>&gt;<sp/>m_spacing<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_gapFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_front<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_back<sp/><sp/>=<sp/>itr;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>that<sp/>the<sp/>spacing<sp/>between<sp/>the<sp/>first<sp/>two<sp/>bunches<sp/>was<sp/>actually<sp/>the<sp/>gap,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>not<sp/>the<sp/>train&apos;s<sp/>bunch<sp/>spacing.<sp/>(For<sp/>trains<sp/>like:<sp/>[0,<sp/>3561,<sp/>3562,<sp/>3563])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>bunch_pos<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>!<sp/>m_gapFound<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>diff<sp/>&lt;<sp/>m_spacing<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_gapFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_front<sp/>=<sp/>itr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_back<sp/>=<sp/>itr;<sp/>--m_back;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_spacing<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>finally<sp/>it<sp/>could<sp/>be<sp/>that<sp/>the<sp/>configuration<sp/>is<sp/>just<sp/>weird...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.msg()<sp/>&lt;&lt;<sp/>MSG::WARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bunches<sp/>don&apos;t<sp/>appear<sp/>to<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>spacing!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>what<sp/>we<sp/>found<sp/>out<sp/>about<sp/>this<sp/>train:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_gapFound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.msg()<sp/>&lt;&lt;<sp/>MSG::VERBOSE</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Gap<sp/>found<sp/>in<sp/>train!<sp/>train_front<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*train_front()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>train_back<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*train_back()<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.msg()<sp/>&lt;&lt;<sp/>MSG::VERBOSE</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Gap<sp/>not<sp/>found<sp/>in<sp/>train!<sp/>train_front<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*train_front()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>train_back<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*train_back()<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a331f1405e2b4323d37655e725a8f5b63" kindref="member" tooltip="List ordering relation.">operator&lt; </ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchTrain&amp;<sp/>bt1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BunchTrain&amp;<sp/>bt2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>bt2.size()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>bt1.size()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>*bt1.begin()<sp/>)<sp/>&lt;<sp/>(<sp/>*bt2.begin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Trig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound" tooltip="A smart set of BunchCrossing objects.">Trig::BunchTrain</ref>&amp;<sp/>bt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>advantage<sp/>of<sp/>the<sp/>output<sp/>operator<sp/>defined<sp/>for<sp/>std::set<sp/>objects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[spacing:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1a2f9601b12403871a656ae66d494a25cc" kindref="member" tooltip="Spacing of the bunches in this train in nanoseconds.">spacing</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>bunches:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">std::set&lt;<sp/>Trig::BunchCrossing<sp/>&gt;&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>bt<sp/>)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>front:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" kindref="member" tooltip="Iterator pointing to the first bunch in the train.">train_front</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>back:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1afb28d88f6f6dac720348b0e57199d2f0" kindref="member" tooltip="Iterator pointing to the last bunch in the train.">train_back</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">MsgStream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>MsgStream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound" tooltip="A smart set of BunchCrossing objects.">Trig::BunchTrain</ref>&amp;<sp/>bt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>advantage<sp/>of<sp/>the<sp/>output<sp/>operator<sp/>defined<sp/>for<sp/>std::set<sp/>objects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[spacing:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1a2f9601b12403871a656ae66d494a25cc" kindref="member" tooltip="Spacing of the bunches in this train in nanoseconds.">spacing</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>bunches:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">std::set&lt;<sp/>Trig::BunchCrossing<sp/>&gt;&amp;<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>bt<sp/>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>front:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" kindref="member" tooltip="Iterator pointing to the first bunch in the train.">train_front</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>back:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*bt.<ref refid="d2/d3e/classTrig_1_1BunchTrain_1afb28d88f6f6dac720348b0e57199d2f0" kindref="member" tooltip="Iterator pointing to the last bunch in the train.">train_back</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx"/>
  </compounddef>
</doxygen>
