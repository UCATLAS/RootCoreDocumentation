<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/d60/PageAccessControl_8cxx" kind="file">
    <compoundname>PageAccessControl.cxx</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">sys/mman.h</includes>
    <includes refid="d1/dda/PageAccessControl_8h" local="yes">CxxUtils/PageAccessControl.h</includes>
    <includes refid="d1/d9e/page__access_8h" local="yes">CxxUtils/page_access.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="113463">
        <label>sys/mman.h</label>
      </node>
      <node id="113461">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PageAccessControl.cxx</label>
        <link refid="PageAccessControl.cxx"/>
        <childnode refid="113462" relation="include">
        </childnode>
        <childnode refid="113463" relation="include">
        </childnode>
        <childnode refid="113464" relation="include">
        </childnode>
        <childnode refid="113468" relation="include">
        </childnode>
        <childnode refid="113470" relation="include">
        </childnode>
      </node>
      <node id="113468">
        <label>CxxUtils/page_access.h</label>
        <link refid="d1/d9e/page__access_8h_source"/>
        <childnode refid="113469" relation="include">
        </childnode>
        <childnode refid="113463" relation="include">
        </childnode>
      </node>
      <node id="113464">
        <label>CxxUtils/PageAccessControl.h</label>
        <link refid="d1/dda/PageAccessControl_8h_source"/>
        <childnode refid="113465" relation="include">
        </childnode>
        <childnode refid="113463" relation="include">
        </childnode>
        <childnode refid="113466" relation="include">
        </childnode>
      </node>
      <node id="113467">
        <label>boost/pool/pool_alloc.hpp</label>
      </node>
      <node id="113469">
        <label>cstdio</label>
      </node>
      <node id="113465">
        <label>vector</label>
      </node>
      <node id="113466">
        <label>CxxUtils/procmaps.h</label>
        <link refid="de/d45/procmaps_8h_source"/>
        <childnode refid="113467" relation="include">
        </childnode>
        <childnode refid="113465" relation="include">
        </childnode>
      </node>
      <node id="113470">
        <label>iostream</label>
      </node>
      <node id="113462">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="dc/d60/PageAccessControl_8cxx_1ad72dbcf6d0153db1b8d8a58001feed83" prot="public" static="no">
        <name>DEBUG</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PageAccessControl.cxx" line="1" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PageAccessControl.cxx" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>DEBUG<sp/>1</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>sort<sp/>etc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>mprotect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CxxUtils/PageAccessControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CxxUtils/page_access.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>athena::page_address;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>athena::next_page_address;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">PageAccessControl::Entry::Entry(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pl):<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>addr(page_address(a)),<sp/>lenProt(l),<sp/>prot(p),<sp/>leak(pl),<sp/>restored(0)<sp/>{}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">PageAccessControl::sort()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_protectedIsSorted)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(m_protected.begin(),<sp/>m_protected.end());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_protectedIsSorted=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">PageAccessControl::restorePageProt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>caddr)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr(const_cast&lt;void*&gt;(caddr));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc(-1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>sort();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>Entry<sp/>ea(addr,0,0,0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>protected_t::iterator<sp/>entry=</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lower_bound(m_protected.begin(),<sp/>m_protected.end(),<sp/>ea);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry<sp/>!=<sp/>m_protected.end()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;addr<sp/>==<sp/>ea.addr)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//found<sp/>it.<sp/>Restore<sp/>page<sp/>prot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>rc=mprotect(<sp/>page_address(entry-&gt;addr),<sp/>entry-&gt;lenProt,<sp/>entry-&gt;prot);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc==0)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PageAccessControl::restorePageProt<sp/>DEBUG:<sp/>restored<sp/>protection<sp/>%i<sp/>for<sp/>page<sp/>%p<sp/>containing<sp/>address<sp/>%p<sp/>\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;prot,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_address(entry-&gt;addr),<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;addr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>FIXME<sp/>NOT<sp/>Freeing<sp/>memory<sp/>at<sp/>%p<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>entry-&gt;leak<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>free(entry-&gt;leak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;leak=0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++(entry-&gt;restored);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING<sp/>no<sp/>entry<sp/>in<sp/>procmap<sp/>for<sp/>addr=%p,<sp/>page<sp/>protection<sp/>not<sp/>restored<sp/>\n&quot;</highlight><highlight class="normal">,addr);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="dc/dc5/classPageAccessControl_1a48f1ecee274656e8fe11393e94cafe11" kindref="member">PageAccessControl::protectPage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>caddr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prot)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr(const_cast&lt;void*&gt;(caddr));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>rc(-1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d8e/structprocmaps_1_1Entry" kindref="compound">procmaps::Entry</ref><sp/>*e=m_pmaps.getEntry(addr,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the<sp/>range<sp/>we<sp/>are<sp/>going<sp/>to<sp/>protect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pageAddr<sp/>=<sp/>page_address(addr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenProt<sp/>=<sp/>(size_t)addr<sp/>-<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(pageAddr)<sp/>+<sp/>objSize;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextProt<sp/>=<sp/>(size_t)addr<sp/>+<sp/>objSize;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextUnprot<sp/>=<sp/>(size_t)(next_page_address((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(nextProt-1)));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageProt(PROT_NONE);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;readable)<sp/>pageProt<sp/>|=<sp/>PROT_READ;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;writable)<sp/>pageProt<sp/>|=<sp/>PROT_WRITE;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;executable)<sp/>pageProt<sp/>|=<sp/>PROT_EXEC;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageProt<sp/>!=<sp/>prot)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fill<sp/>up<sp/>the<sp/>space<sp/>from<sp/>nextProt<sp/>to<sp/>nextUnprot<sp/>to<sp/>avoid<sp/>allocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>the<sp/>locked<sp/>pages,<sp/>and<sp/>SEGVs...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*leak(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(0<sp/>==<sp/>(prot<sp/>&amp;<sp/>PROT_WRITE))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>size_t<sp/>lenLeak(nextUnprot-nextProt-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>leak=malloc(lenLeak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>((size_t)leak&lt;nextUnprot<sp/>&amp;&amp;<sp/>(size_t)leak<sp/>+<sp/>lenLeak&gt;=nextUnprot)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//we<sp/>do<sp/>not<sp/>want<sp/>to<sp/>allocate<sp/>our<sp/>buffer<sp/>memory<sp/>past<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//page,<sp/>so<sp/>trim<sp/>it<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>free(leak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>lenLeak=nextUnprot<sp/>-<sp/>(size_t)leak<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>leak=malloc(lenLeak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(leak<sp/>&lt;<sp/>pageAddr<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(size_t)leak<sp/>&gt;=<sp/>nextUnprot)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//leak<sp/>has<sp/>been<sp/>allocated<sp/>into<sp/>previous/next<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//better<sp/>get<sp/>rid<sp/>of<sp/>it<sp/>as<sp/>it<sp/>will<sp/>likely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//be<sp/>locked<sp/>by<sp/>another<sp/>protectPage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>free(leak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>leak=0;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;PageAccessControl::protectPage<sp/>DEBUG:<sp/>fill<sp/>up<sp/>space<sp/>from<sp/>%p<sp/>to<sp/>0x%x<sp/>to<sp/>avoid<sp/>allocations<sp/>in<sp/>locked<sp/>pages\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>leak,<sp/>(int)leak+lenLeak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>(rc<sp/>=<sp/>mprotect(<sp/>pageAddr,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenProt,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prot)))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>m_protected.push_back(Entry(pageAddr,lenProt,<sp/>pageProt,<sp/>0));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_protectedIsSorted=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//FIXME<sp/>we<sp/>should<sp/>use<sp/>a<sp/>mapvector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PageAccessControl::protectPage<sp/>DEBUG:<sp/>set<sp/>protection<sp/>%i<sp/>for<sp/>page<sp/>range<sp/>%p<sp/>-<sp/>0x%lx<sp/>containing<sp/>address<sp/>range=%p<sp/>-<sp/>0x%lx\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prot,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pageAddr,<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(nextUnprot<sp/>-<sp/>1),<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(nextProt<sp/>-1)<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rc=0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>printf(</highlight><highlight class="stringliteral">&quot;PageAccessControl::protectPage<sp/>WARNING:<sp/>no<sp/>entry<sp/>in<sp/>procmap<sp/>for<sp/>addr=%p,<sp/>page<sp/>protection<sp/>not<sp/>restored<sp/>\n&quot;</highlight><highlight class="normal">,addr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/dc5/classPageAccessControl_1a523b11b3d1ae7b0cfe2551daa7fcdbac" kindref="member" tooltip="was the page containing address accessed?">PageAccessControl::accessed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acc(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//fixme:<sp/>poor<sp/>man<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>Entry<sp/>eaxx(const_cast&lt;void*&gt;(address),0,0,0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>PageAccessControl::const_iterator<sp/>ia(beginProtectedPtrs()),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ea(endProtectedPtrs());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!acc<sp/>&amp;&amp;<sp/>ia<sp/>!=<sp/>ea)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>address<sp/>&lt;&lt;<sp/>&quot;page<sp/>addr<sp/>&quot;<sp/>&lt;&lt;<sp/>eaxx.addr<sp/>&lt;&lt;<sp/>&quot;<sp/>ia<sp/>&quot;<sp/>&lt;&lt;<sp/>ia-&gt;addr<sp/>&lt;&lt;<sp/>&quot;<sp/>res<sp/>&quot;<sp/>&lt;&lt;<sp/>ia-&gt;restored<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(eaxx.addr<sp/>==<sp/>ia-&gt;addr<sp/>&amp;&amp;<sp/>0<sp/>!=<sp/>ia-&gt;restored);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>++ia;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PageAccessControl.cxx"/>
  </compounddef>
</doxygen>
