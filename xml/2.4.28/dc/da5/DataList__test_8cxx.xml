<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/da5/DataList__test_8cxx" kind="file">
    <compoundname>DataList_test.cxx</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">boost/iterator_adaptors.hpp</includes>
    <includes local="no">boost/iterator/indirect_iterator.hpp</includes>
    <includes local="no">boost/iterator/transform_iterator.hpp</includes>
    <includes local="no">boost/assign/list_of.hpp</includes>
    <includes local="no">boost/concept_check.hpp</includes>
    <includes local="yes">SGTools/CLASS_DEF.h</includes>
    <includes refid="d8/d4b/unused_8h" local="yes">CxxUtils/unused.h</includes>
    <includes refid="d1/d43/DataList_8h" local="yes">AthContainers/DataList.h</includes>
    <includes refid="db/ded/ConstDataList_8h" local="yes">AthContainers/ConstDataList.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="d1/d79/random_8h" local="yes">TestTools/random.h</includes>
    <incdepgraph>
      <node id="72604">
        <label>list</label>
      </node>
      <node id="72695">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="72628" relation="include">
        </childnode>
        <childnode refid="72688" relation="include">
        </childnode>
        <childnode refid="72674" relation="include">
        </childnode>
        <childnode refid="72678" relation="include">
        </childnode>
        <childnode refid="72607" relation="include">
        </childnode>
      </node>
      <node id="72653">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="72628">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="72684">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="72685" relation="include">
        </childnode>
        <childnode refid="72629" relation="include">
        </childnode>
        <childnode refid="72626" relation="include">
        </childnode>
        <childnode refid="72686" relation="include">
        </childnode>
      </node>
      <node id="72670">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="72620" relation="include">
        </childnode>
        <childnode refid="72621" relation="include">
        </childnode>
        <childnode refid="72626" relation="include">
        </childnode>
        <childnode refid="72606" relation="include">
        </childnode>
      </node>
      <node id="72672">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="72634" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72612" relation="include">
        </childnode>
        <childnode refid="72601" relation="include">
        </childnode>
      </node>
      <node id="72671">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="72625">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="72606">
        <label>functional</label>
      </node>
      <node id="72593">
        <label>iomanip</label>
      </node>
      <node id="72679">
        <label>boost/version.hpp</label>
      </node>
      <node id="72624">
        <label>limits</label>
      </node>
      <node id="72612">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="72651">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="72703">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="72639" relation="include">
        </childnode>
      </node>
      <node id="72608">
        <label>iterator</label>
      </node>
      <node id="72635">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="72591" relation="include">
        </childnode>
        <childnode refid="72636" relation="include">
        </childnode>
      </node>
      <node id="72701">
        <label>SGTools/ClassID_traits.h</label>
      </node>
      <node id="72600">
        <label>boost/concept_check.hpp</label>
      </node>
      <node id="72614">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="72616">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="72617" relation="include">
        </childnode>
        <childnode refid="72627" relation="include">
        </childnode>
        <childnode refid="72590" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72591" relation="include">
        </childnode>
      </node>
      <node id="72637">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
      </node>
      <node id="72639">
        <label>stdint.h</label>
      </node>
      <node id="72688">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="72624" relation="include">
        </childnode>
        <childnode refid="72689" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
      </node>
      <node id="72673">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="72658">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
      </node>
      <node id="72642">
        <label>RVersion.h</label>
      </node>
      <node id="72619">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="72620" relation="include">
        </childnode>
        <childnode refid="72626" relation="include">
        </childnode>
        <childnode refid="72606" relation="include">
        </childnode>
      </node>
      <node id="72623">
        <label>cmath</label>
      </node>
      <node id="72589">
        <label>cassert</label>
      </node>
      <node id="72680">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="72609">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="72598">
        <label>boost/iterator/transform_iterator.hpp</label>
      </node>
      <node id="72590">
        <label>stdexcept</label>
      </node>
      <node id="72654">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="72697">
        <label>AthContainers/DataList.icc</label>
        <link refid="d5/ddf/DataList_8icc"/>
        <childnode refid="72698" relation="include">
        </childnode>
        <childnode refid="72677" relation="include">
        </childnode>
        <childnode refid="72624" relation="include">
        </childnode>
        <childnode refid="72699" relation="include">
        </childnode>
      </node>
      <node id="72682">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="72602">
        <label>CxxUtils/unused.h</label>
        <link refid="d8/d4b/unused_8h"/>
      </node>
      <node id="72611">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="72591">
        <label>string</label>
      </node>
      <node id="72633">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="72617" relation="include">
        </childnode>
        <childnode refid="72634" relation="include">
        </childnode>
        <childnode refid="72635" relation="include">
        </childnode>
        <childnode refid="72637" relation="include">
        </childnode>
        <childnode refid="72638" relation="include">
        </childnode>
        <childnode refid="72644" relation="include">
        </childnode>
        <childnode refid="72645" relation="include">
        </childnode>
        <childnode refid="72646" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72621" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
        <childnode refid="72647" relation="include">
        </childnode>
        <childnode refid="72648" relation="include">
        </childnode>
        <childnode refid="72649" relation="include">
        </childnode>
        <childnode refid="72655" relation="include">
        </childnode>
      </node>
      <node id="72657">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
      </node>
      <node id="72647">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="72603">
        <label>AthContainers/DataList.h</label>
        <link refid="d1/d43/DataList_8h"/>
        <childnode refid="72604" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72606" relation="include">
        </childnode>
        <childnode refid="72594" relation="include">
        </childnode>
        <childnode refid="72607" relation="include">
        </childnode>
        <childnode refid="72608" relation="include">
        </childnode>
        <childnode refid="72609" relation="include">
        </childnode>
        <childnode refid="72610" relation="include">
        </childnode>
        <childnode refid="72611" relation="include">
        </childnode>
        <childnode refid="72612" relation="include">
        </childnode>
        <childnode refid="72613" relation="include">
        </childnode>
        <childnode refid="72614" relation="include">
        </childnode>
        <childnode refid="72615" relation="include">
        </childnode>
        <childnode refid="72616" relation="include">
        </childnode>
        <childnode refid="72628" relation="include">
        </childnode>
        <childnode refid="72629" relation="include">
        </childnode>
        <childnode refid="72684" relation="include">
        </childnode>
        <childnode refid="72688" relation="include">
        </childnode>
        <childnode refid="72690" relation="include">
        </childnode>
        <childnode refid="72693" relation="include">
        </childnode>
        <childnode refid="72694" relation="include">
        </childnode>
        <childnode refid="72691" relation="include">
        </childnode>
        <childnode refid="72696" relation="include">
        </childnode>
        <childnode refid="72641" relation="include">
        </childnode>
        <childnode refid="72697" relation="include">
        </childnode>
      </node>
      <node id="72690">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="72615" relation="include">
        </childnode>
        <childnode refid="72688" relation="include">
        </childnode>
        <childnode refid="72691" relation="include">
        </childnode>
        <childnode refid="72611" relation="include">
        </childnode>
        <childnode refid="72679" relation="include">
        </childnode>
        <childnode refid="72608" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
      </node>
      <node id="72685">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="72686">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="72687" relation="include">
        </childnode>
      </node>
      <node id="72687">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="72643">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="72667">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="72694">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="72690" relation="include">
        </childnode>
        <childnode refid="72608" relation="include">
        </childnode>
        <childnode refid="72607" relation="include">
        </childnode>
        <childnode refid="72695" relation="include">
        </childnode>
      </node>
      <node id="72648">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="72664">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="72691">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="72615" relation="include">
        </childnode>
        <childnode refid="72641" relation="include">
        </childnode>
        <childnode refid="72626" relation="include">
        </childnode>
        <childnode refid="72692" relation="include">
        </childnode>
      </node>
      <node id="72588">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx</label>
        <link refid="DataList_test.cxx"/>
        <childnode refid="72589" relation="include">
        </childnode>
        <childnode refid="72590" relation="include">
        </childnode>
        <childnode refid="72591" relation="include">
        </childnode>
        <childnode refid="72592" relation="include">
        </childnode>
        <childnode refid="72593" relation="include">
        </childnode>
        <childnode refid="72594" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72596" relation="include">
        </childnode>
        <childnode refid="72597" relation="include">
        </childnode>
        <childnode refid="72598" relation="include">
        </childnode>
        <childnode refid="72599" relation="include">
        </childnode>
        <childnode refid="72600" relation="include">
        </childnode>
        <childnode refid="72601" relation="include">
        </childnode>
        <childnode refid="72602" relation="include">
        </childnode>
        <childnode refid="72603" relation="include">
        </childnode>
        <childnode refid="72700" relation="include">
        </childnode>
        <childnode refid="72616" relation="include">
        </childnode>
        <childnode refid="72703" relation="include">
        </childnode>
      </node>
      <node id="72675">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="72641">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="72642" relation="include">
        </childnode>
        <childnode refid="72643" relation="include">
        </childnode>
      </node>
      <node id="72645">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="72652">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="72597">
        <label>boost/iterator/indirect_iterator.hpp</label>
      </node>
      <node id="72689">
        <label>limits.h</label>
      </node>
      <node id="72630">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="72631" relation="include">
        </childnode>
      </node>
      <node id="72599">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="72662">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="72635" relation="include">
        </childnode>
        <childnode refid="72624" relation="include">
        </childnode>
        <childnode refid="72639" relation="include">
        </childnode>
        <childnode refid="72663" relation="include">
        </childnode>
      </node>
      <node id="72617">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72619" relation="include">
        </childnode>
      </node>
      <node id="72620">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="72607" relation="include">
        </childnode>
        <childnode refid="72621" relation="include">
        </childnode>
        <childnode refid="72608" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
        <childnode refid="72623" relation="include">
        </childnode>
        <childnode refid="72624" relation="include">
        </childnode>
        <childnode refid="72591" relation="include">
        </childnode>
        <childnode refid="72625" relation="include">
        </childnode>
      </node>
      <node id="72677">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="72589" relation="include">
        </childnode>
      </node>
      <node id="72692">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="72688" relation="include">
        </childnode>
        <childnode refid="72677" relation="include">
        </childnode>
      </node>
      <node id="72605">
        <label>typeinfo</label>
      </node>
      <node id="72676">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="72647" relation="include">
        </childnode>
        <childnode refid="72589" relation="include">
        </childnode>
      </node>
      <node id="72663">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="72644">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="72640">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="72639" relation="include">
        </childnode>
      </node>
      <node id="72636">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="72666">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="72629">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="72630" relation="include">
        </childnode>
        <childnode refid="72632" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72625" relation="include">
        </childnode>
        <childnode refid="72682" relation="include">
        </childnode>
        <childnode refid="72665" relation="include">
        </childnode>
        <childnode refid="72683" relation="include">
        </childnode>
      </node>
      <node id="72601">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="72656">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="72617" relation="include">
        </childnode>
        <childnode refid="72657" relation="include">
        </childnode>
        <childnode refid="72658" relation="include">
        </childnode>
        <childnode refid="72659" relation="include">
        </childnode>
        <childnode refid="72668" relation="include">
        </childnode>
        <childnode refid="72649" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72670" relation="include">
        </childnode>
        <childnode refid="72671" relation="include">
        </childnode>
      </node>
      <node id="72595">
        <label>vector</label>
      </node>
      <node id="72698">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="72607" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
      </node>
      <node id="72699">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="72621">
        <label>utility</label>
      </node>
      <node id="72613">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="72646">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="72592">
        <label>sstream</label>
      </node>
      <node id="72681">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="72650">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="72596">
        <label>boost/iterator_adaptors.hpp</label>
      </node>
      <node id="72660">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="72649">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="72650" relation="include">
        </childnode>
        <childnode refid="72651" relation="include">
        </childnode>
        <childnode refid="72652" relation="include">
        </childnode>
        <childnode refid="72653" relation="include">
        </childnode>
        <childnode refid="72654" relation="include">
        </childnode>
      </node>
      <node id="72622">
        <label>cstdlib</label>
      </node>
      <node id="72627">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="72594">
        <label>iostream</label>
      </node>
      <node id="72634">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="72617" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72601" relation="include">
        </childnode>
      </node>
      <node id="72618">
        <label>cstddef</label>
      </node>
      <node id="72655">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="72656" relation="include">
        </childnode>
        <childnode refid="72672" relation="include">
        </childnode>
        <childnode refid="72634" relation="include">
        </childnode>
        <childnode refid="72647" relation="include">
        </childnode>
        <childnode refid="72648" relation="include">
        </childnode>
      </node>
      <node id="72683">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="72615" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72604" relation="include">
        </childnode>
        <childnode refid="72589" relation="include">
        </childnode>
        <childnode refid="72622" relation="include">
        </childnode>
        <childnode refid="72612" relation="include">
        </childnode>
      </node>
      <node id="72659">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="72657" relation="include">
        </childnode>
        <childnode refid="72660" relation="include">
        </childnode>
        <childnode refid="72637" relation="include">
        </childnode>
        <childnode refid="72661" relation="include">
        </childnode>
        <childnode refid="72646" relation="include">
        </childnode>
        <childnode refid="72605" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72607" relation="include">
        </childnode>
        <childnode refid="72639" relation="include">
        </childnode>
        <childnode refid="72665" relation="include">
        </childnode>
        <childnode refid="72666" relation="include">
        </childnode>
        <childnode refid="72667" relation="include">
        </childnode>
      </node>
      <node id="72665">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="72632">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="72633" relation="include">
        </childnode>
        <childnode refid="72615" relation="include">
        </childnode>
        <childnode refid="72673" relation="include">
        </childnode>
        <childnode refid="72674" relation="include">
        </childnode>
        <childnode refid="72656" relation="include">
        </childnode>
        <childnode refid="72616" relation="include">
        </childnode>
        <childnode refid="72677" relation="include">
        </childnode>
        <childnode refid="72672" relation="include">
        </childnode>
        <childnode refid="72678" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72681" relation="include">
        </childnode>
      </node>
      <node id="72669">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="72661">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="72660" relation="include">
        </childnode>
        <childnode refid="72662" relation="include">
        </childnode>
        <childnode refid="72646" relation="include">
        </childnode>
        <childnode refid="72595" relation="include">
        </childnode>
        <childnode refid="72664" relation="include">
        </childnode>
      </node>
      <node id="72607">
        <label>algorithm</label>
      </node>
      <node id="72696">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="72700">
        <label>AthContainers/ConstDataList.h</label>
        <link refid="db/ded/ConstDataList_8h"/>
        <childnode refid="72603" relation="include">
        </childnode>
        <childnode refid="72701" relation="include">
        </childnode>
        <childnode refid="72702" relation="include">
        </childnode>
      </node>
      <node id="72674">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="72675" relation="include">
        </childnode>
        <childnode refid="72634" relation="include">
        </childnode>
        <childnode refid="72672" relation="include">
        </childnode>
        <childnode refid="72638" relation="include">
        </childnode>
        <childnode refid="72656" relation="include">
        </childnode>
        <childnode refid="72633" relation="include">
        </childnode>
        <childnode refid="72637" relation="include">
        </childnode>
        <childnode refid="72616" relation="include">
        </childnode>
        <childnode refid="72647" relation="include">
        </childnode>
        <childnode refid="72618" relation="include">
        </childnode>
        <childnode refid="72676" relation="include">
        </childnode>
      </node>
      <node id="72638">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="72639" relation="include">
        </childnode>
        <childnode refid="72591" relation="include">
        </childnode>
        <childnode refid="72640" relation="include">
        </childnode>
        <childnode refid="72641" relation="include">
        </childnode>
      </node>
      <node id="72693">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="72690" relation="include">
        </childnode>
        <childnode refid="72677" relation="include">
        </childnode>
        <childnode refid="72608" relation="include">
        </childnode>
      </node>
      <node id="72615">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="72631">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="72626">
        <label>memory</label>
      </node>
      <node id="72610">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="72668">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="72658" relation="include">
        </childnode>
        <childnode refid="72659" relation="include">
        </childnode>
        <childnode refid="72669" relation="include">
        </childnode>
      </node>
      <node id="72678">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="72675" relation="include">
        </childnode>
        <childnode refid="72672" relation="include">
        </childnode>
        <childnode refid="72634" relation="include">
        </childnode>
        <childnode refid="72665" relation="include">
        </childnode>
        <childnode refid="72679" relation="include">
        </childnode>
        <childnode refid="72680" relation="include">
        </childnode>
        <childnode refid="72591" relation="include">
        </childnode>
      </node>
      <node id="72702">
        <label>AthContainers/ConstDataList.icc</label>
        <link refid="db/d38/ConstDataList_8icc"/>
      </node>
    </incdepgraph>
    <innerclass refid="d9/d04/classdl__test__err" prot="public">dl_test_err</innerclass>
    <innerclass refid="df/d17/structAbsFluff" prot="public">AbsFluff</innerclass>
    <innerclass refid="d3/d3b/structDerivedFluff" prot="public">DerivedFluff</innerclass>
    <innerclass refid="dd/da3/classFluffList" prot="public">FluffList</innerclass>
    <innerclass refid="d7/df1/structAA" prot="public">AA</innerclass>
    <innerclass refid="d7/d1f/structBB" prot="public">BB</innerclass>
    <innerclass refid="d4/d95/structCC" prot="public">CC</innerclass>
    <innerclass refid="dc/d7e/structMM" prot="public">MM</innerclass>
    <innerclass refid="d8/d55/structM" prot="public">M</innerclass>
    <innerclass refid="da/deb/structN" prot="public">N</innerclass>
    <innerclass refid="d1/d78/structO" prot="public">O</innerclass>
    <innerclass refid="dc/dec/structP" prot="public">P</innerclass>
    <innerclass refid="d1/dbc/structQ" prot="public">Q</innerclass>
    <innerclass refid="d8/df7/structR" prot="public">R</innerclass>
    <innerclass refid="d9/dd2/structComp" prot="public">Comp</innerclass>
    <innerclass refid="dc/da7/structPredX" prot="public">PredX</innerclass>
    <innerclass refid="d4/dc1/structLessX" prot="public">LessX</innerclass>
    <innerclass refid="d9/d89/structGreatX" prot="public">GreatX</innerclass>
    <innerclass refid="df/d97/structPred" prot="public">Pred</innerclass>
    <innerclass refid="d0/daa/structBPred" prot="public">BPred</innerclass>
    <innerclass refid="db/dba/structPPred" prot="public">PPred</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dc/da5/DataList__test_8cxx_1adfad0eabfe51f87b9c0ad1673cc690fa" prot="public" static="no">
        <name>myassert</name>
        <param><defname>X</defname></param>
        <initializer>do {     \
    if (!(<ref refid="d3/d24/structX" kindref="compound">X</ref>)) { \
      throw_dl_test_err (__FILE__, __LINE__, #<ref refid="d3/d24/structX" kindref="compound">X</ref>); \
    } \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dc/da5/DataList__test_8cxx_1a86fba812902b6fb0feea3faf586e45d2" prot="public" static="no">
        <name>ATHCONTAINERS_ASSERT</name>
        <param><defname>X</defname></param>
        <initializer>myassert(<ref refid="d3/d24/structX" kindref="compound">X</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dc/da5/DataList__test_8cxx_1ab3e754ee641921cdee9b9fe374873e31" prot="public" static="no" mutable="no">
        <type><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound">Athena_test::RNG</ref></type>
        <definition>Athena_test::RNG stlrand</definition>
        <argsstring></argsstring>
        <name>stlrand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/da5/DataList__test_8cxx_1ab0dee82878a58dbb2b32998ba5cc7a04" prot="public" static="no" mutable="no">
        <type>std::list&lt; int &gt;</type>
        <definition>std::list&lt;int&gt; dtor_log</definition>
        <argsstring></argsstring>
        <name>dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="383" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aa44ffc26ff755e92033c3747760a6457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_dl_test_err</definition>
        <argsstring>(const char *file, int line, const char *what)</argsstring>
        <name>throw_dl_test_err</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="114" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a03b37fad56452cacac1ecfd546d4b7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; int &gt;</type>
        <definition>std::list&lt;int&gt; get_dtor_log</definition>
        <argsstring>()</argsstring>
        <name>get_dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="385" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="384" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1af023a511679d8636167eaa1dca80bf66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clear_dtor_log</definition>
        <argsstring>()</argsstring>
        <name>clear_dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="394" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3013a6fefde4fbc9fbb2e0262f68f8c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_dtor_log</definition>
        <argsstring>(int a=-1, int b=-1, int c=-1, int d=-1, int e=-1, int f=-1)</argsstring>
        <name>check_dtor_log</name>
        <param>
          <type>int</type>
          <declname>a</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>e</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="398" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="397" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a882a8f9e898e8b6e29bc338f5410a814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ITERATOR</type>
          </param>
        </templateparamlist>
        <type>ITERATOR</type>
        <definition>ITERATOR next</definition>
        <argsstring>(ITERATOR it, size_t n=1)</argsstring>
        <name>next</name>
        <param>
          <type>ITERATOR</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="412" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="411" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1acfd198917c661518d544fcb97d0d38c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ITERATOR</type>
          </param>
        </templateparamlist>
        <type>ITERATOR</type>
        <definition>ITERATOR prev</definition>
        <argsstring>(ITERATOR it, size_t n=1)</argsstring>
        <name>prev</name>
        <param>
          <type>ITERATOR</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="418" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a14179839e282e0c202fb9fca1fe0fb0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>CONT::const_value_type</type>
        <definition>CONT::const_value_type nth</definition>
        <argsstring>(const CONT &amp;cont, size_t n)</argsstring>
        <name>nth</name>
        <param>
          <type>const CONT &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="424" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a52a336ac117be4305457df42977e3290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_BASE</definition>
        <argsstring>(BB, AA)</argsstring>
        <name>DATALIST_BASE</name>
        <param>
          <type><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></type>
        </param>
        <param>
          <type><ref refid="d7/df1/structAA" kindref="compound">AA</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="444"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ac03143df5858799a05cbee9d7af5c6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_BASE</definition>
        <argsstring>(CC, BB)</argsstring>
        <name>DATALIST_BASE</name>
        <param>
          <type><ref refid="d4/d95/structCC" kindref="compound">CC</ref></type>
        </param>
        <param>
          <type><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="445"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a11e864ce8205a73663cdf41908037ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_VIRTBASES1</definition>
        <argsstring>(N, M)</argsstring>
        <name>DATALIST_VIRTBASES1</name>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="477"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a8895668803a2c4d98873287fabccbf0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_VIRTBASES1</definition>
        <argsstring>(O, M)</argsstring>
        <name>DATALIST_VIRTBASES1</name>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="478"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a4803b8f05752564cedfe54a3109c93c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_VIRTBASES2</definition>
        <argsstring>(P, N, O)</argsstring>
        <name>DATALIST_VIRTBASES2</name>
        <param>
          <type><ref refid="dc/dec/structP" kindref="compound">P</ref></type>
        </param>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="479"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a149200f2c93c8ccee28b23ea6f8239a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASES2</definition>
        <argsstring>(N, SG_VIRTUAL(M), MM)</argsstring>
        <name>SG_BASES2</name>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>)</type>
        </param>
        <param>
          <type><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="481"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a51e2e0acd87049c01aaa064133580150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASE</definition>
        <argsstring>(O, SG_VIRTUAL(M))</argsstring>
        <name>SG_BASE</name>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="482"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a740b5f673cd8f4786e031de283263739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASES2</definition>
        <argsstring>(P, SG_VIRTUAL(N), SG_VIRTUAL(O))</argsstring>
        <name>SG_BASES2</name>
        <param>
          <type><ref refid="dc/dec/structP" kindref="compound">P</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="da/deb/structN" kindref="compound">N</ref>)</type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d1/d78/structO" kindref="compound">O</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="483"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a9d31bce87b490093ca173b69033828df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_VIRTBASES1</definition>
        <argsstring>(Q, M)</argsstring>
        <name>DATALIST_VIRTBASES1</name>
        <param>
          <type><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="494"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a563ccf925a606f684da2eb0a0bae21b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATALIST_VIRTBASES3</definition>
        <argsstring>(R, N, O, Q)</argsstring>
        <name>DATALIST_VIRTBASES3</name>
        <param>
          <type><ref refid="d8/df7/structR" kindref="compound">R</ref></type>
        </param>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="495"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a4bac8cb89147b5abe78cb08753b9269e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2_myassert</definition>
        <argsstring>()</argsstring>
        <name>test2_myassert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="506" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="505" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a1d55db6a87e085baa13e85f9c5033e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_initial</definition>
        <argsstring>()</argsstring>
        <name>test2_initial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="520" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="519" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a39cfb05b3550d27e9d7ee265cb6e14b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_default_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_default_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="539" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="538" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ac1af216c2f01644ea5c41a22bbeba833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_default_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_default_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="554" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ace317ff1686127341b8ed4738aacddcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sized_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_sized_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="563" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="562" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a73ad105c7c9758f60811febcad0397e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sized_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_sized_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="580" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="579" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a61c5102970bc733739de13c9398b1b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insertion_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_insertion_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="590" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="589" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a7d3fc70ef49bd312615e928aebfa923d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insertion_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_insertion_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="622" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="621" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a895a24ed797903c55d7d1e427c9b2c8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_copy_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_copy_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="665" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="664" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a970710e44a8cf7293c0d953dda49e696" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_copy_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_copy_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="687" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="686" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a97dbbadb8c54cb768d26bbb25d496597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_dtor1</definition>
        <argsstring>()</argsstring>
        <name>test2_dtor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="734" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="733" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a24bb49947369665f7a7645700d536b4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_dtor</definition>
        <argsstring>()</argsstring>
        <name>test2_dtor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="761" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="760" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aaea1a76092cfb39ff7bd9f7d42e19da4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_push_front</definition>
        <argsstring>()</argsstring>
        <name>test2_push_front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="771" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="770" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a98e9fe17fd8e2fa4619b62ce5e5a6e00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_push_back</definition>
        <argsstring>()</argsstring>
        <name>test2_push_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="814" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="813" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3e2e89cadb141f9e9052713ec5c60ff2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_size1</definition>
        <argsstring>()</argsstring>
        <name>test2_size1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="857" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="856" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a19d865c451eeb2a11062e90f2a70c6c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_size</definition>
        <argsstring>()</argsstring>
        <name>test2_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="866" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="865" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab08d79cd3dc834ec2358bd08d9b5c508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_stdcont</definition>
        <argsstring>()</argsstring>
        <name>test2_stdcont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="875" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="874" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abdc984a1b08a5f7a61f7d63d3ab59f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_empty1</definition>
        <argsstring>()</argsstring>
        <name>test2_empty1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="888" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="887" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a9e3a5b53920985e674a6a63f62695b9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_empty</definition>
        <argsstring>()</argsstring>
        <name>test2_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="897" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="896" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad02146eaa4f07c304ec4f919b8012f3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_max_size</definition>
        <argsstring>()</argsstring>
        <name>test2_max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="906" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="905" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abe023bac145b18b571f16ded28ff7312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="917" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="916" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a5042500ed3fc941e1c847f557a62ea7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back_const</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="929" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="928" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a8c572c5e4bcfb5c8da8111c867dba40b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="939" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="938" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a6dc625229920bf949694e4caada4a40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end_const</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="963" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="962" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1af93a0d61f9a084696aa136ae2d12fff6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="973" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="972" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ac0455095cfcae1ff7cdb016985eb2464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend_const</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="997" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="996" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a78faa356fd9afb6011c5a71aff398d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_elementproxy</definition>
        <argsstring>()</argsstring>
        <name>test2_elementproxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1007" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1006" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a0cb85bc0978e0f7799dae8455cf53073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back1</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1130" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a53a99f6fd318f08e9894350c9333af8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1146" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1145" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a32e44d02b5a9e086ff364dc15fb940d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapelement_iter</definition>
        <argsstring>()</argsstring>
        <name>test2_swapelement_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1155" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a0297573b32c0d773f36eea365f09c4ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resize1</definition>
        <argsstring>()</argsstring>
        <name>test2_resize1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1213" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1212" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1afeff9c28cee3a25c9ce5b585a2c934f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resize</definition>
        <argsstring>()</argsstring>
        <name>test2_resize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1243" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1242" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ae207654a9dbbf771fef3ddc020915e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_front1</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_front1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1252" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ada5f2a556974c2134a7604d4d3537965" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_front</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1272" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1271" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a29c5f9d7e1dfb685a6fd86cd87a4465e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_back1</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_back1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1281" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1280" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a5d903e476a183449767595f6b2a7bba5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_back</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1299" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1298" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a70b49f15be86e757faa3fcaba1542d1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end1</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1309" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1308" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a75af7fff8c51ad7573910404787764d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1375" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1374" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a53b423c792f8902bc435568b87216982" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend1</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1399" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1398" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a25d67121ce0d4eccbb9e44fdc9690270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1468" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1467" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a640fcd55188a1e266aa7e787c3f55e93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_range1</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_range1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1492" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1491" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aab10268df522c19483cf6d2a7b14447e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_range</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1555" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1554" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a537dbb175f4d86d524a8289a035a3c0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_single1</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_single1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1564" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1563" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abd424861c26705277dbbc82e644a5820" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_single</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_single</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1585" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1584" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1af8271a6cd0498cb1ae5bdaa9597fd937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_assign1</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_assign1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1595" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1594" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3f4039b3a328b32ce4b186ff521479db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_assign</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_assign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1629" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1628" bodyend="1653"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a1e4ee9a015ca6c5cf300c42450a94e32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_value1</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_value1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1659" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1658" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a48382747a1b2fc54d903e10174f88dc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_value</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1687" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1686" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a57ad0482cba5dff365ac72124a19cd9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_range1</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_range1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1712" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1711" bodyend="1742"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a9d2d99e6e00c97c585367dd85f05f8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_range</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1745" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1744" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a118c2aea7a1331f0cf8072cc6fcc3299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_clear1</definition>
        <argsstring>()</argsstring>
        <name>test2_clear1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1771" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1770" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aed819a68dc77839243afed23740d471c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_clear</definition>
        <argsstring>()</argsstring>
        <name>test2_clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1795" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1794" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abf9824ad9e3b5e7b1ae0a966bffd75cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swap1</definition>
        <argsstring>()</argsstring>
        <name>test2_swap1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1805" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1804" bodyend="1842"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a27a1d7399a1e5ef34c3c5efff5d7e7e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swap</definition>
        <argsstring>()</argsstring>
        <name>test2_swap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1845" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1844" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abc775bdaec61e42007cc34fb65244477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assign1</definition>
        <argsstring>()</argsstring>
        <name>test2_assign1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1906" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1905" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a51d54897f87f1643126b052d6133a25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assign</definition>
        <argsstring>()</argsstring>
        <name>test2_assign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1928" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1927" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1afdf4a845605b4087c44a36f0278d1a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_relops1</definition>
        <argsstring>()</argsstring>
        <name>test2_relops1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1952" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1951" bodyend="1978"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad5fd2d492f2cb3360ca36bf67395716b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_relops</definition>
        <argsstring>()</argsstring>
        <name>test2_relops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="1981" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="1980" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aebdfe8d46048c9540b1671d76283fb99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort1_prepare1</definition>
        <argsstring>(DL &amp;v)</argsstring>
        <name>test2_sort1_prepare1</name>
        <param>
          <type>DL &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2019" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2018" bodyend="2029"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3c7661ad9e24c1c07d12cf4f129cd428" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort1</definition>
        <argsstring>()</argsstring>
        <name>test2_sort1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2032" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2031" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad71c52587afbc218cbbcd341a07367c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort</definition>
        <argsstring>()</argsstring>
        <name>test2_sort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2058" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2057" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1abe40f84491550cce27ada1e590bba4af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_prepare1</definition>
        <argsstring>(const unsigned int N, const unsigned int ratio, DL &amp;l)</argsstring>
        <name>test2_prepare1</name>
        <param>
          <type>const unsigned int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>DL &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2068" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2065" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab4ca9ac104c16d58cd3ec2d12c762a01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_splice1</definition>
        <argsstring>()</argsstring>
        <name>test2_splice1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2077" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2076" bodyend="2219"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a527fdb22adec3d04a8df96c6ad062b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_splice2</definition>
        <argsstring>()</argsstring>
        <name>test2_splice2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2223" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2222" bodyend="2285"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a886003a7f49e48adcb5453b37080da90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_splice</definition>
        <argsstring>()</argsstring>
        <name>test2_splice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2289" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2288" bodyend="2294"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a32392b7553a377589a8113a48c2f2a16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_remove1</definition>
        <argsstring>()</argsstring>
        <name>test2_remove1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2298" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2297" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a109b8e1e089505e517c7efd49b5f73c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_remove</definition>
        <argsstring>()</argsstring>
        <name>test2_remove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2329" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2328" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ae9f6353ae78b759feb5ea8d7faaafab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_merge1</definition>
        <argsstring>()</argsstring>
        <name>test2_merge1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2337" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2336" bodyend="2408"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1aa74bcbdb206a3a886446f4a6ad10ca26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_merge2</definition>
        <argsstring>()</argsstring>
        <name>test2_merge2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2412" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2411" bodyend="2452"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a29b21c909f978d15c4e5d311a23add24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_merge</definition>
        <argsstring>()</argsstring>
        <name>test2_merge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2456" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2455" bodyend="2461"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ade738e1bfd902ad4493e2f5c70ee7e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique1</definition>
        <argsstring>()</argsstring>
        <name>test2_unique1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2465" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2464" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a682b061d62af6f677a3d5db9fd28cd5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique2</definition>
        <argsstring>()</argsstring>
        <name>test2_unique2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2553" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2552" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a24d6498f753b6f17f00a39890dbf8830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique</definition>
        <argsstring>()</argsstring>
        <name>test2_unique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2586" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2585" bodyend="2591"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a2afa9cb76cbaf42d21c8f340881b6b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reverse1</definition>
        <argsstring>()</argsstring>
        <name>test2_reverse1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2595" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2594" bodyend="2619"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1acafa896fd6f019dbb5c2a55fc6341cb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reverse2</definition>
        <argsstring>()</argsstring>
        <name>test2_reverse2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2623" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2622" bodyend="2647"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad4fe38727eab4e0b86294d4cefdf1693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reverse</definition>
        <argsstring>()</argsstring>
        <name>test2_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2651" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2650" bodyend="2656"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a59ea01555d49c414ae21456b2fe1b095" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb2</definition>
        <argsstring>(DL &amp;v, It beg, It end)</argsstring>
        <name>test2_iter_swap_memb2</name>
        <param>
          <type>DL &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>It</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2660" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2659" bodyend="2669"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab3d143c01acc14726213ec81eaff35d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb1</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap_memb1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2672" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2671" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab25c8c8e0b386c51210bab5c7803559f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap_memb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2694" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2693" bodyend="2715"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a30642e3258d81955cc43c9fac497ef91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap2</definition>
        <argsstring>(DL &amp;v, It beg, It end)</argsstring>
        <name>test2_iter_swap2</name>
        <param>
          <type>DL &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>It</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2720" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2719" bodyend="2729"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3b2b42fe727f7ac4210932711b968f33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap1</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2732" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2731" bodyend="2763"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a4c1275cb42661b2befc6069d9dd524da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2766" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2765" bodyend="2798"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ae850f3721d37741a879bdd83e391597c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_removealg1</definition>
        <argsstring>()</argsstring>
        <name>test2_removealg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2811" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2810" bodyend="2931"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1af2bee9c346a66ff8a4aa36cd326cf5d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_removealg</definition>
        <argsstring>()</argsstring>
        <name>test2_removealg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2934" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2933" bodyend="2939"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a83ec642477f35942476d3e77c3d75d12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_uniquealg1</definition>
        <argsstring>()</argsstring>
        <name>test2_uniquealg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="2949" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="2948" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a2a1631138ae73dfb41c252529d80947e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_uniquealg</definition>
        <argsstring>()</argsstring>
        <name>test2_uniquealg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3018" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3017" bodyend="3022"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab063b9149c2d9e3eea4f321fc1d78912" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reversealg1</definition>
        <argsstring>()</argsstring>
        <name>test2_reversealg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3026" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3025" bodyend="3042"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a295f46266b99036b6880cef9b2f68f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reversealg</definition>
        <argsstring>()</argsstring>
        <name>test2_reversealg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3045" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3044" bodyend="3049"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a548385a378e6cbbb367b478e6bbb7817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rotatealg1</definition>
        <argsstring>()</argsstring>
        <name>test2_rotatealg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3053" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3052" bodyend="3069"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad0b6e46ee0434ff2bfa272637150dd0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rotatealg</definition>
        <argsstring>()</argsstring>
        <name>test2_rotatealg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3072" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3071" bodyend="3076"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a6b101e06c94059a12f3a1ff7d85047fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void random_list</definition>
        <argsstring>(DL &amp;l, int n)</argsstring>
        <name>random_list</name>
        <param>
          <type>DL &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3088" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3087" bodyend="3096"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ab1fe9cedd3268576952b9daebf69ddcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_partitionalg1</definition>
        <argsstring>()</argsstring>
        <name>test2_partitionalg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3099" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3098" bodyend="3151"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a979bea178cbcf2f43b9c099a0a199b40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_partitionalg</definition>
        <argsstring>()</argsstring>
        <name>test2_partitionalg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3154" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3153" bodyend="3158"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ace93c67cd583a074b6f8a8e6a22c2a64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_asdatalist</definition>
        <argsstring>()</argsstring>
        <name>test2_asdatalist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3161" bodyend="3167"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a1119a539ef95e66a83ed73e65ce4acb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement1</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3170" bodyend="3181"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a251a65cafb07a9d8ba65e2cdc0ee0f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3184" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3183" bodyend="3188"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad37bd15b6077eb9aa71e7e7535ce8aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapranges</definition>
        <argsstring>()</argsstring>
        <name>test2_swapranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3192" bodyend="3209"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ad37bd15b6077eb9aa71e7e7535ce8aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapranges</definition>
        <argsstring>()</argsstring>
        <name>test2_swapranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3212" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3211" bodyend="3216"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ac3be5e33cb9e5487719c46bf7f36d3bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void do_test2</definition>
        <argsstring>()</argsstring>
        <name>do_test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3220" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3219" bodyend="3272"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a196de027229cb5bbb1164ce4003e66d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dump_classid</definition>
        <argsstring>()</argsstring>
        <name>dump_classid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3276" bodyend="3284"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3288" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3287" bodyend="3315"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a7f831c3579586194450eb2ca7c994340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_baseinfo</definition>
        <argsstring>()</argsstring>
        <name>test_baseinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3319" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3318" bodyend="3349"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a06c2be16e422a4a99bcda7da0bc0fce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_eltbaseinfo</definition>
        <argsstring>()</argsstring>
        <name>test_eltbaseinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3353" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3352" bodyend="3380"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a7d8331ebb1bcfdba3eaaee713f4497d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copyconvert</definition>
        <argsstring>()</argsstring>
        <name>test_copyconvert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3384" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3383" bodyend="3423"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1a3035697779d5080e5f5938de739cfc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_iterate</definition>
        <argsstring>()</argsstring>
        <name>test_iterate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3427" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3426" bodyend="3452"/>
      </memberdef>
      <memberdef kind="function" id="dc/da5/DataList__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" line="3456" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3455" bodyend="3464"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>this<sp/>test<sp/>in<sp/>standalone<sp/>mode:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator_adaptors.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator/indirect_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator/transform_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/list_of.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/concept_check.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/CLASS_DEF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d4b/unused_8h" kindref="compound" tooltip="Macro to mark a variable as unused.">CxxUtils/unused.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>boost::assign::list_of;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="d9/d04/classdl__test__err" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_what.c_str();<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::string<sp/>m_what;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">dl_test_err::dl_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>myassertion<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>what;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>m_what<sp/>=<sp/>os.str();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_dl_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref><sp/>(file,<sp/>line,<sp/>what));</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>myassert(X)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(X))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>throw_dl_test_err<sp/>(__FILE__,<sp/>__LINE__,<sp/>#X);<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_ASSERT(X)<sp/>myassert(X)</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d43/DataList_8h" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements.">AthContainers/DataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/ded/ConstDataList_8h" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">AthContainers/ConstDataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d79/random_8h" kindref="compound" tooltip="Very simple random numbers for regression testing.">TestTools/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">Athena_test::RNG</ref><sp/>stlrand;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="df/d17/structAbsFluff" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_alive;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>()<sp/>{<sp/>++s_alive;<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>----&gt;<sp/>Destructor<sp/>of<sp/>AbsFluff<sp/>called<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>After<sp/>return,<sp/>left<sp/>alive<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>--s_alive<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foo()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cfoo()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AbsFluff::s_alive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="d3/d3b/structDerivedFluff" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_int;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_float;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::string<sp/>m_string;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>----&gt;<sp/>Destructor<sp/>of<sp/>DerivedFluff<sp/>called<sp/>for<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::string<sp/>m_anotherString;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()<sp/>:<sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>(),<sp/>m_int(1),<sp/>m_float(-379.456f),<sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_string(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>Fluff<sp/>struct&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_anotherString(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>DerivedFluff<sp/>struct&quot;</highlight><highlight class="normal">)<sp/>{<sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>&amp;<sp/>rhs)<sp/>:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>(),<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m_int(rhs.m_int),<sp/>m_float(-379.456f),<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>m_string(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>Fluff<sp/>struct&quot;</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foo()<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;foo<sp/>called&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cfoo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">/*<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;foo<sp/>called&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="dd/da3/classFluffList" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;DerivedFluff&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref>()<sp/>:<sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1<sp/>()</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataList_test<sp/>test1<sp/>BEGIN<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref><sp/>IntList;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>IntList<sp/>intL;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>myassert(intL.empty());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IFILL(3);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;IFILL;<sp/>++i)<sp/><sp/>intL.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>myassert<sp/>(IFILL<sp/>==<sp/>intL.size());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>myassert(std::distance(intL.begin(),<sp/>intL.end())<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)IFILL);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>myassert(<sp/>*(intL.front())<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>*(intL.back()));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>intL.front()<sp/>=<sp/>new<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(7);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>myassert(7<sp/>==<sp/>*(intL.front()));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>*(intL.back())<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>myassert(3<sp/>==<sp/>*(intL.back()));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;intL:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intL.begin(),<sp/>intL.end(),<sp/>os);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int&gt;<sp/>intos(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*1.30<sp/><sp/><sp/><sp/>boost::indirect_iterator_generator&lt;DataList&lt;int&gt;::iterator,<sp/>int&gt;::type</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>intLF(intL.begin()),<sp/>intLL(intL.end());<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataList&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intLF(intL.begin());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataList&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intLL(intL.end());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(intLF,<sp/>intLL,<sp/>intos);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>does<sp/>not<sp/>work<sp/><sp/>DataList&lt;int&gt;<sp/>intL2(5,<sp/>new<sp/>int(5));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref><sp/>intL2;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>++i)<sp/>intL2.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(5)<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>intL2.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;int&gt;::const_iterator</ref><sp/>itrList<sp/>=<sp/>intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>++itrList;<sp/>myassert(5<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/>++itrList;<sp/>myassert(5<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/>++itrList;<sp/>myassert(5<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>++itrList;<sp/>myassert(5<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;int&gt;::iterator</ref><sp/>itrList<sp/>=<sp/>intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>std::advance(<sp/>itrList,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>(*itrList)<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>int(6);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>itrList<sp/>=<sp/>intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>std::advance(<sp/>itrList,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>myassert<sp/>(6<sp/>==<sp/>**itrList);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;intL2:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>intL2.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>os);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int&gt;<sp/>intos(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*1.30<sp/><sp/><sp/><sp/>boost::indirect_iterator_generator&lt;DataList&lt;int&gt;::iterator,<sp/>int&gt;::type</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>intL2F(intL2.begin()),<sp/>intL2L(intL2.end());<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataList&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intL2F(intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataList&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intL2L(intL2.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(intL2F,<sp/>intL2L,<sp/>intos);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref>*<sp/>pintLZeros(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref>(10));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pintLZeros;<sp/>pintLZeros=0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref><sp/>testConst;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>testConst.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(-1));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>testConst.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(-2));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;int&gt;::const_iterator</ref><sp/>ci(testConst.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()),<sp/>ce(testConst.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ci<sp/>!=<sp/>ce)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>UNUSED(cp)<sp/>=<sp/>*ci;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//remove<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>bad<sp/>but<sp/>unfortunately<sp/>correct:<sp/>a<sp/>DataList&lt;int&gt;<sp/>is<sp/>like<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//list&lt;int*&gt;.<sp/>list&lt;int*&gt;::const_iterator<sp/>has<sp/>type<sp/>(int*<sp/>const)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>not<sp/>(const<sp/>int*)*.<sp/>It<sp/>is<sp/>hence<sp/>legal<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>*ci;<sp/><sp/></highlight><highlight class="comment">//assign<sp/>a<sp/>int*<sp/>const<sp/>to<sp/>a<sp/>int*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>77;<sp/></highlight><highlight class="comment">//OUCH!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>++ci;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;int&gt;</ref><sp/>intL3(intL2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>intL2.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>intL3.size());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;int&gt;::const_iterator</ref><sp/>itrList<sp/>=<sp/>intL3.begin();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrList,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>**itrList<sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrList,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(6<sp/>==<sp/>**itrList<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>*<sp/>dfluff<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;DerivedFluff*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dfluff:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(dfluff-&gt;<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>os);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;DerivedFluff&gt;::iterator</ref><sp/>iter<sp/>=<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>iter<sp/>!=<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>();<sp/>iter++)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>(*iter)-&gt;foo();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>myassert<sp/>(2<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>(dfluff-&gt;<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>())-&gt;cfoo();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>(*(dfluff-&gt;<ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>())).foo();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>dfluff-&gt;back()-&gt;foo();<sp/>DNC:<sp/>side<sp/>effect<sp/>of<sp/>ElementProxy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>*<sp/>fluff2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>(*dfluff);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>fluff2-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>using<sp/>iterators:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>*<sp/>fluff3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>(dfluff-&gt;<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>fluff3-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>copied<sp/>list,<sp/>but<sp/>it<sp/>should<sp/>not<sp/>delete<sp/>elements<sp/>as<sp/>it<sp/>does<sp/>not<sp/>own<sp/>them.<sp/>You<sp/>should<sp/>not<sp/>see<sp/>message<sp/>of<sp/>Element<sp/>Destructor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fluff2;<sp/>fluff2=0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>list<sp/>copied<sp/>via<sp/>iterator.<sp/>You<sp/>should<sp/>NOT<sp/>see<sp/>the<sp/>elements<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fluff3;<sp/>fluff3=0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>resizing<sp/>DataList&lt;DerivedFluff&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>You<sp/>should<sp/>see<sp/>one<sp/>DerivedFluff<sp/>object<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dfluffNewSize<sp/>=<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()-1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a76db98827e4484094bdf0fdf5920823c" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(dfluffNewSize);<sp/></highlight><highlight class="comment">//reduce<sp/>dfluff<sp/>by<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>resize<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>DataList&lt;DerivedFluff&gt;.<sp/>You<sp/>should<sp/>see<sp/>all<sp/>remaining<sp/>DerivedFluff<sp/>objects<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>dfluff-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dfluff;<sp/>dfluff=0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>Working<sp/>with<sp/>a<sp/>subclass<sp/>of<sp/>DataList<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref><sp/>fc;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>fc.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>fc.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>fc.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f3);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>fc.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f4);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>erasing<sp/>one<sp/>element<sp/>of<sp/>the<sp/>DerivedFluff<sp/>container.<sp/>You<sp/>should<sp/>see<sp/>one<sp/>instance<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>fc.<ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(fc.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>++fc.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>erase<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>myassert(fc.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>myassert(count<sp/>-<sp/>1<sp/><sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref><sp/>copyFluff,<sp/>*pcopy;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>copyFluff<sp/>=<sp/>fc;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//op<sp/>=<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>pcopy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/da3/classFluffList" kindref="compound">FluffList</ref>(fc);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//copy<sp/>constr<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pcopy;<sp/>pcopy=0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//copy<sp/>constr<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DataList<sp/>with<sp/>ownership:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref><sp/>dfluff5;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>*pdf(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>+<sp/>9;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff5.assign(10,<sp/>pdf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>dfluff5.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(pdf);<sp/></highlight><highlight class="comment">//take<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;10;<sp/>++i)<sp/>dfluff5.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>(*pdf));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>myassert(dfluff5.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff5.insert(dfluff5.begin(),<sp/>10,<sp/>(DerivedFluff*)0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;DerivedFluff&gt;::iterator</ref><sp/>it5(dfluff5.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>it5<sp/>=<sp/>dfluff5.<ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(it5,<sp/>0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>myassert(dfluff5.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DataList<sp/>without<sp/>ownership:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>*<sp/>dfluff4<sp/>=</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound">DataList&lt;DerivedFluff&gt;</ref>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>*p1(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()),<sp/>*p2(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>dfluff4-&gt;push_back(p1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>dfluff4-&gt;push_back(p2);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>resizing<sp/>view<sp/>container.<sp/>You<sp/>should<sp/>NOT<sp/>see<sp/>the<sp/>elements<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>dfluff4-&gt;resize(0);<sp/></highlight><highlight class="comment">//empties<sp/>dfluff4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>resize<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>myassert(0<sp/>==<sp/>dfluff4-&gt;size());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>two<sp/>DerivedFluff<sp/>instances&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff4-&gt;assign(10,<sp/>pdf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//whatever<sp/>this<sp/>means...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>dfluff4-&gt;push_back(pdf);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>myassert(dfluff4-&gt;size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff4-&gt;insert(dfluff4-&gt;begin(),<sp/>10,<sp/>(DerivedFluff*)0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;DerivedFluff&gt;::iterator</ref><sp/>it(dfluff4-&gt;begin());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>it<sp/>=<sp/>dfluff4-&gt;insert(it,<sp/>0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>myassert(dfluff4-&gt;size()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dfluff4;<sp/>dfluff4=0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>what<sp/>is<sp/>the<sp/>right<sp/>thing<sp/>to<sp/>do?<sp/>Put<sp/>in<sp/>5<sp/>NULLs<sp/>or<sp/>give<sp/>a<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>error?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;AbsFluff&gt;</ref><sp/>absFluff(5);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>absFluff.resize(10);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>absFluff.resize(15,<sp/>new<sp/>DerivedFluff);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>absFluff.resize(15);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=10;<sp/>i&lt;15;<sp/>++i)<sp/>absFluff.push_back(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize(absFluff.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>absFluff.pop_back();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>absFluff.pop_back();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>myassert(absFluff.size()<sp/>==<sp/>dsize);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataList_test<sp/>test1<sp/>OK<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">std::list&lt;int&gt;<sp/>dtor_log;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">std::list&lt;int&gt;<sp/>get_dtor_log()</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>std::list&lt;int&gt;<sp/>out;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>out.swap<sp/>(dtor_log);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>of<sp/>element<sp/>deletion<sp/>within<sp/>a<sp/>container<sp/>is<sp/>unpredictable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>the<sp/>sort()<sp/>in<sp/>remove_duplicates().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>out.sort();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_dtor_log()</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>dtor_log.clear();</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_dtor_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d=-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f=-1)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>std::list&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>!=<sp/>-1)<sp/>v.push_back(a);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>-1)<sp/>v.push_back(b);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>-1)<sp/>v.push_back(c);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>!=<sp/>-1)<sp/>v.push_back(d);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>!=<sp/>-1)<sp/>v.push_back(e);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>!=<sp/>-1)<sp/>v.push_back(f);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>v.sort();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>myassert<sp/>(get_dtor_log()<sp/>==<sp/>v);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ITERATOR&gt;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">ITERATOR<sp/>next<sp/>(ITERATOR<sp/>it,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n=1)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>std::advance<sp/>(it,<sp/>n);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ITERATOR&gt;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">ITERATOR<sp/>prev<sp/>(ITERATOR<sp/>it,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n=1)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>std::advance<sp/>(it,<sp/>-n);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CONT&gt;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::const_value_type<sp/>nth<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CONT&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*::next(cont.begin(),<sp/>n);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="d7/df1/structAA" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/df1/structAA" kindref="compound">AA</ref></highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0):<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>~<ref refid="d7/df1/structAA" kindref="compound">AA</ref>()<sp/>{<sp/>dtor_log.push_back<sp/>(x);<sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>other.x;<sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal">};</highlight></codeline>
<codeline lineno="435" refid="d7/d1f/structBB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d1f/structBB" kindref="compound">BB</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref></highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">};</highlight></codeline>
<codeline lineno="439" refid="d4/d95/structCC" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d95/structCC" kindref="compound">CC</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="d4/d95/structCC" kindref="compound">CC</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member" tooltip="Declare base class info to DataList. Single, non-virtual derivation.">DATALIST_BASE</ref>(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>,<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member" tooltip="Declare base class info to DataList. Single, non-virtual derivation.">DATALIST_BASE</ref>(<ref refid="d4/d95/structCC" kindref="compound">CC</ref>,<sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;AA&gt;</ref><sp/>,<sp/>9981<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>&gt;<sp/>,<sp/>9982<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d4/d95/structCC" kindref="compound">CC</ref>&gt;<sp/>,<sp/>139782528<sp/>,<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="dc/d7e/structMM" refkind="compound"><highlight class="normal">struct<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>MM<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>mm(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~MM()<sp/>{}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mm;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">};</highlight></codeline>
<codeline lineno="457" refid="d8/d55/structM" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/d55/structM" kindref="compound">M</ref></highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d8/d55/structM" kindref="compound">M</ref>()<sp/>{<sp/>dtor_log.push_back<sp/>(x);<sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>other.x;<sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="464" refid="da/deb/structN" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x),<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>(the_x+100)<sp/>{}</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468" refid="d1/d78/structO" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref></highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="471"><highlight class="normal">};</highlight></codeline>
<codeline lineno="472" refid="dc/dec/structP" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref></highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x),<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="475"><highlight class="normal">};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref><sp/>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref><sp/>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" kindref="member" tooltip="Declare base class info to DataList. Multiple derivation.">DATALIST_VIRTBASES2</ref><sp/>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">SG_BASES2<sp/>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>),<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">SG_BASE<sp/>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>));</highlight></codeline>
<codeline lineno="483"><highlight class="normal">SG_BASES2<sp/>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/>SG_VIRTUAL(<ref refid="da/deb/structN" kindref="compound">N</ref>),<sp/>SG_VIRTUAL(<ref refid="d1/d78/structO" kindref="compound">O</ref>));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="d1/dbc/structQ" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/dbc/structQ" kindref="compound">Q</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref></highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="488"><highlight class="normal">};</highlight></codeline>
<codeline lineno="489" refid="d8/df7/structR" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/df7/structR" kindref="compound">R</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="d8/df7/structR" kindref="compound">R</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref><sp/>(<ref refid="d1/dbc/structQ" kindref="compound">Q</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><ref refid="d1/d43/DataList_8h_1a3c2f8a00c08d0ffcb32fc1592a4a52d3" kindref="member" tooltip="Declare base class info to DataList. Multiple derivation.">DATALIST_VIRTBASES3</ref><sp/>(<ref refid="d8/df7/structR" kindref="compound">R</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;R&gt;</ref><sp/>,<sp/>9983<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="da/deb/structN" kindref="compound">N</ref>&gt;<sp/>,<sp/>9984<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="499"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d1/d78/structO" kindref="compound">O</ref>&gt;<sp/>,<sp/>9985<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d1/dbc/structQ" kindref="compound">Q</ref>&gt;<sp/>,<sp/>9986<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d8/d55/structM" kindref="compound">M</ref>&gt;<sp/>,<sp/>9987<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>myassert<sp/>is<sp/>working.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_myassert()</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caught)<sp/>abort();</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initial<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_initial()</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>b<sp/>=<sp/>vb.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d<sp/>=<sp/>vd.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>myassert<sp/>(b-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>myassert<sp/>(d-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d2<sp/>(10);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>myassert<sp/>(d2.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d3<sp/>(d2);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>myassert<sp/>(d3.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>default<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_default_ctor1()</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/><ref refid="d1/def/classT" kindref="compound">T</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_default_ctor()</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>test2_default_ctor1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>test2_default_ctor1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>sized<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sized_ctor1()</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1<sp/>(10);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.front()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2<sp/>(10,<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.front()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sized_ctor()</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insertion<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;<sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insertion_ctor1()</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;T*&gt;<sp/>tt;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1<sp/>(tt.begin(),<sp/>tt.end());</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2<sp/>(tt.begin(),<sp/>tt.end(),<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;T*&gt;::const_iterator<sp/>itrTT<sp/>=<sp/>tt.begin();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrTT<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrTT;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrTT<sp/>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;T*&gt;::const_iterator<sp/>itrTT<sp/>=<sp/>tt.begin();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV2<sp/>==<sp/>*itrTT<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrTT;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV2<sp/>==<sp/>*itrTT<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insertion_ctor()</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>put<sp/>D<sp/>pointers<sp/>into<sp/>a<sp/>B<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;D*&gt;<sp/>dd;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>v1<sp/>(dd.begin(),<sp/>dd.end());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;D*&gt;::const_iterator<sp/>itrDD<sp/>=<sp/>dd.begin();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrDD<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrDD;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrDD<sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPILE_ERROR</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>not<sp/>the<sp/>other<sp/>way<sp/>&apos;round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;B*&gt;<sp/>dd;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>v1<sp/>(dd.begin(),<sp/>dd.end());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;B&gt;::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D*&gt;::const_iterator</ref><sp/>itrDD<sp/>=<sp/>dd.begin();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrDD<sp/>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrDD;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrDD<sp/>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>copy<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_copy_ctor1()</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_copy_ctor()</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>copy<sp/>derived<sp/>list<sp/>to<sp/>base<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>v1;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D&gt;::const_iterator</ref><sp/>itrV1<sp/>=<sp/>v1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPILE_ERROR</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>not<sp/>the<sp/>other<sp/>way<sp/>&apos;round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>v1;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrV1<sp/>=<sp/>v1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D&gt;::const_iterator</ref><sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>*itrV2<sp/>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_dtor1()</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DO_REMOVE_DUPLICATES</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_dtor()</highlight></codeline>
<codeline lineno="761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>push_front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_push_front()</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrVB<sp/>=<sp/>vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVB)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrVB;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVB)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>cvd.push_front<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>cvd.push_front<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.front()-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.back()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>isn&apos;t<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vd2<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.<ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>push_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_push_back()</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrVB<sp/>=<sp/>vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVB)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrVB;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVB)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>cvd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>cvd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.front()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.back()-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>isn&apos;t<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vd2<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_size1()</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>DL<sp/>vb;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_size()</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>test2_size1&lt;DataList&lt;B&gt;,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>test2_size1&lt;ConstDataList&lt;DataList&lt;B&gt;<sp/>&gt;,<sp/>B,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>stdcont</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_stdcont()</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;::PtrList</ref>&amp;<sp/>vv<sp/>=<sp/>vb.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>myassert<sp/>(vv.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>myassert<sp/>(vv.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_empty1()</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>DL<sp/>vb;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.empty());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>myassert<sp/>(!vb.empty());</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_empty()</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>test2_empty1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>test2_empty1&lt;ConstDataList&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>max_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_max_size()</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.<ref refid="d9/dfb/classDataList_1a69b1d38eb59472300a71263f9e68d10e" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/>==<sp/>std::list&lt;void*&gt;().max_size());</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;B&gt;</ref><sp/>&gt;<sp/>cvb;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvb.max_size()<sp/>==<sp/>std::list&lt;void*&gt;().max_size());</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>front<sp/>const,<sp/>back<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back_const1()</highlight></codeline>
<codeline lineno="917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>DL<sp/>vd;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>vd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DL&amp;<sp/>cvd<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>dd<sp/>=<sp/>cvd.front();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>dd<sp/>=<sp/>cvd.back();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back_const()</highlight></codeline>
<codeline lineno="929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;DataList&lt;B&gt;,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;DataList&lt;D&gt;,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;,<sp/>D,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>begin<sp/>const,<sp/>end<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end_const1()</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DL&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>myassert<sp/>(<sp/>std::distance(<sp/>cv.begin(),<sp/>cv.end()<sp/>)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>i<sp/>=<sp/>cv.begin();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.end());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>tt<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.end());</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.end());</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.begin());</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end_const()</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>rbegin<sp/>const,<sp/>rend<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend_const1()</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DL&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>myassert<sp/>(<sp/>std::distance(<sp/>cv.rbegin(),<sp/>cv.rend()<sp/>)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_reverse_iterator<sp/>i<sp/>=<sp/>cv.rbegin();</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.rend());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>tt<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.rend());</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.rend());</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.rbegin());</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend_const()</highlight></codeline>
<codeline lineno="997"><highlight class="normal">{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>ElementProxy<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_elementproxy()</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(5));</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(6));</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itrVB1<sp/>=<sp/>vb1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVB1)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrVB1;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(**itrVB1).x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd<sp/>=<sp/>vd1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D&gt;::const_iterator</ref><sp/>itrVD1<sp/>=<sp/>vd1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrVD1;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrVD1)-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(3,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(7,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ownership<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VIEW-&gt;VIEW<sp/>doesn&apos;t<sp/>delete<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.front()<sp/>=<sp/>*(++vb2.begin());</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.front()<sp/>=<sp/>*(++vd2.begin());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(4,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(8,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OWN-&gt;VIEW<sp/>doesn&apos;t<sp/>delete<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.front()<sp/>=<sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.front()<sp/>=<sp/>vd1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(1,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VIEW-&gt;OWN<sp/>deletes<sp/>old<sp/>val,<sp/>takes<sp/>ownership.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>*(++vb1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>())<sp/>=<sp/>*(++vb2.begin());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>*(++vd1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>())<sp/>=<sp/>*(++vd2.begin());</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2,<sp/>6);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,4)<sp/><sp/>vb2:<sp/>(1,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OWN-&gt;OWN<sp/>not<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>*(++vb1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>*(++vd1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unless<sp/>it&apos;s<sp/>the<sp/>same<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bb<sp/>=<sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>bb;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>can&apos;t<sp/>manage<sp/>to<sp/>put<sp/>a<sp/>B<sp/>into<sp/>a<sp/>D<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>ElementProxy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vd2_b<sp/>=<sp/>vd2;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd2_b.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>vb2.front();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>we<sp/>can<sp/>put<sp/>a<sp/>D<sp/>in<sp/>a<sp/>B<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.front()<sp/>=<sp/>vd2_b.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,4)<sp/><sp/>vb2:<sp/>(5,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>assignment<sp/>from<sp/>explicit<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(9);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.front()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(9,4)<sp/><sp/>vb2:<sp/>(10,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.front()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(11);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(12);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(9,4)<sp/><sp/>vb2:<sp/>(10,4)<sp/><sp/>vd1:<sp/>(12,8)<sp/><sp/>vd2:<sp/>(11,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(12,<sp/>8,<sp/>9,<sp/>4);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>front,<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back1()</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.back()-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>v.front()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.front()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>front,<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back()</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swapElement<sp/>with<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapelement_iter()</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1ae5896490fc3152b261de439f0a8b1509" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(::next(vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3),<sp/>bold);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(vb,<sp/>1)-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(bold-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bold;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(5));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d9/dfb/classDataList_1ae5896490fc3152b261de439f0a8b1509" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(::next(vd.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(6),<sp/>dold);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(vd,1)-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dold-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dold;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vd_b<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd_b.<ref refid="d9/dfb/classDataList_1ae5896490fc3152b261de439f0a8b1509" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(::next(vd_b.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10),<sp/>bold);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>cdold;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="d3/d7c/classConstDataList_1a439d1898975457653b5e0e07f83d8de9" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(::next(cvd.<ref refid="d3/d7c/classConstDataList_1a1edb94e7a0cdb6c5be73eced7327537e" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>()),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(cvd,1)-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cdold;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4,<sp/>6,<sp/>1,<sp/>3,<sp/>7,<sp/>9);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resize1()</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>v2.resize<sp/>(1);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>v1.resize<sp/>(1);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>v1.resize<sp/>(3);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>*itrV1<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resize()</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>test2_resize1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>test2_resize1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>test2_resize1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>pop_front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_front1()</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>v2.pop_front();</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>v1.pop_front();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>myassert(<sp/>v1.front()-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_front()</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>test2_pop_front1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>test2_pop_front1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>test2_pop_front1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>pop_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_back1()</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>v2.pop_back();</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>v1.pop_back();</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_back()</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>begin,<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end1()</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>myassert<sp/>(<sp/>std::distance(<sp/>v1.begin(),<sp/>v1.end()<sp/>)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::value_type<sp/>tt<sp/>=<sp/>*v1.begin();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>*v1.begin()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.front()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>*v2.begin()<sp/>=<sp/>*v1.begin();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.front()-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,2)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>*(--v1.end())<sp/>=<sp/>*(--v2.end());</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,5)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>*v2.begin()<sp/>=<sp/>*(++v2.begin());</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.front()-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>*v1.begin()<sp/>=<sp/>*(++v1.begin());</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>creating<sp/>a<sp/>const_iterator<sp/>from<sp/>an<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>ci<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>myassert<sp/>((*ci)-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>comparing<sp/>iterators<sp/>and<sp/>const_iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>i<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>ci);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>myassert<sp/>(ci<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(i<sp/>!=<sp/>ci));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(ci<sp/>!=<sp/>i));</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>v2.sort();</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end()</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd<sp/>(1);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>*vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>rbegin,<sp/>rend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend1()</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>myassert<sp/>(<sp/>std::distance(<sp/>v1.rbegin(),<sp/>v1.rend()<sp/>)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::value_type<sp/>tt<sp/>=<sp/>*v1.rbegin();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_reverse_iterator<sp/>ritrV1<sp/>=<sp/>v1.rbegin();</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>++ritrV1;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*ritrV1)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>*v1.rbegin()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5));</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1,3)<sp/>(4,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>*v2.rbegin()<sp/>=<sp/>*v1.rbegin();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1,3)<sp/><sp/>(4,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>*(--v1.rend())<sp/>=<sp/>*(--v2.rend());</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.front()-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4,3)<sp/><sp/>(4,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>(*v2.rbegin())<sp/>=<sp/>*(++v2.rbegin());</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4,3)<sp/><sp/>(4,4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>*v1.rbegin()<sp/>=<sp/>*(++v1.rbegin());</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>creating<sp/>a<sp/>const_iterator<sp/>from<sp/>an<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_reverse_iterator<sp/>ci<sp/>=<sp/>v2.rbegin();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>myassert<sp/>((*ci)-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>v2.sort();</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend()</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd<sp/>(1);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>*vb.<ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>erase(it,<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_range1()</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>i1;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>vItrAtPlus3<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>vItrAtPlus3,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>vItrAtMinus3<sp/>=<sp/>v.end();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>vItrAtMinus3,<sp/>-3<sp/>);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>v.erase(<sp/>vItrAtPlus3,<sp/>vItrAtMinus3<sp/>);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i1)-&gt;x<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(3,<sp/>4,<sp/>5,<sp/>6);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrV,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>i2;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itrV2AtPlus2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrV2AtPlus2,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itrV2AtMinus2<sp/>=<sp/>v2.end();</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrV2AtMinus2,<sp/>-2<sp/>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>v2.erase(<sp/>itrV2AtPlus2,<sp/>itrV2AtMinus2<sp/>);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i2)-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DO_REMOVE_DUPLICATES</highlight></codeline>
<codeline lineno="1541"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v3;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.erase(<sp/>v3.begin(),<sp/>++(++v3.begin())<sp/>);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1552"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_range()</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>erase(it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_single1()</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>v1.erase<sp/>(v1.begin());</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.front()-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>v2.erase<sp/>(v2.begin());</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.front()-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_single()</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>operator=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_assign1()</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DL<sp/>v2;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DL<sp/>v2;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_assign()</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>vd1.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>vb1<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb1.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vd1_b<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1_b<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insert(it,<sp/>val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_value1()</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>i1<sp/>=<sp/>v1.insert(<sp/>++v1.begin(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*i1)-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV1<sp/>=<sp/>v1.begin();</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV1;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV1)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>i2<sp/>=<sp/>v2.insert(<sp/>++v2.begin(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*i2)-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_value()</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>vd.insert<sp/>(vd.begin(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insert(it,<sp/>It,<sp/>It)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_range1()</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>tt[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert<sp/>(v.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>tt[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert<sp/>(v.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_range()</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>tt[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2)};</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>vd.insert<sp/>(vd.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>clear()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_clear1()</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>v1.clear();</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>v2.clear();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>v2.clear(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>v2.clear(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_clear()</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>test2_clear1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>test2_clear1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>test2_clear1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swap()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swap1()</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.swap<sp/>(v2);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v2;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV2<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itrV2;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrV2)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swap()</highlight></codeline>
<codeline lineno="1845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>test2_swap1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>test2_swap1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>test2_swap1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>vb2;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">swap</ref>(vb2);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.<ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">swap</ref>(vb);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(vb,<sp/>vb2);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(vb2,<sp/>vb);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assign1()</highlight></codeline>
<codeline lineno="1906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assign<sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log(0);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assign<sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assign()</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>test2_assign1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>test2_assign1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>test2_assign1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2)};</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d9/dfb/classDataList_1af379aa172cd773f12e088af187aa809e" kindref="member" tooltip="Assign from iterators.">assign</ref><sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_relops1()</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>DL<sp/>v1;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>DL<sp/>v3<sp/>(v1);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>==<sp/>v2);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>==<sp/>v3));</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>!=<sp/>v3);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>!=<sp/>v2));</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;<sp/>v3);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>&lt;<sp/>v2));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3<sp/>&gt;<sp/>v1);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v2<sp/>&gt;<sp/>v1));</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;=<sp/>v3);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;=<sp/>v2);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v3<sp/>&lt;=<sp/>v1));</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3<sp/>&gt;=<sp/>v1);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2<sp/>&gt;=<sp/>v1);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>&gt;=<sp/>v3));</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_relops()</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>test2_relops1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>test2_relops1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>test2_relops1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1989" refid="d9/dd2/structComp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/dd2/structComp" kindref="compound">Comp</ref></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1992"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*b<sp/>&lt;<sp/>*a;<sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1996" refid="dc/da7/structPredX" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/da7/structPredX" kindref="compound">PredX</ref></highlight></codeline>
<codeline lineno="1997"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>elem<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1999"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elem-&gt;x<sp/>&gt;<sp/>m_cut;<sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_cut;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2004" refid="d4/dc1/structLessX" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/dc1/structLessX" kindref="compound">LessX</ref></highlight></codeline>
<codeline lineno="2005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2007"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>&lt;<sp/>b-&gt;x;<sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2011" refid="d9/d89/structGreatX" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d89/structGreatX" kindref="compound">GreatX</ref></highlight></codeline>
<codeline lineno="2012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2014"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>&gt;<sp/>b-&gt;x;<sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort1_prepare1<sp/>(DL&amp;<sp/>v)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/>T*<sp/>tmp[N];</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tmp,<sp/>tmp+N);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i)</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp[i]-&gt;x<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(tmp[N-1-i]);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort1()</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DL,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sort();</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i,<sp/>++itrV)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(<sp/>(*itrV)-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sort(<ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itrV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i,<sp/>++itrV)</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(<sp/>(*itrV)-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort()</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>test2_sort1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/>test2_sort1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>test2_sort1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_prepare1(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ratio,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DL&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="2068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_back(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(<sp/>ratio<sp/>*<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_splice1()</highlight></codeline>
<codeline lineno="2077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>typename<sp/>DL::base_value_type<sp/>T;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>splice(<sp/>iterator,<sp/>DataList<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l1<sp/>);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>2,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view1<sp/>=<sp/>l1;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view2<sp/>=<sp/>l2;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itrL1<sp/>=<sp/>view1.begin();</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>view1.splice(<sp/>itrL1,<sp/>view2<sp/>);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>content<sp/>of<sp/>OWN_ELEMENTS<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr1,<sp/>++itr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr2)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i*2)<sp/>);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>OWN_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.splice(<sp/>itrL1,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>splice(<sp/>iterator,<sp/>DataList,<sp/>iterator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l1<sp/>);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>2,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view1<sp/>=<sp/>l1;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view2<sp/>=<sp/>l2;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itrL1<sp/>=<sp/>view1.begin();</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>view1.splice(<sp/>itrL1,<sp/>view2,<sp/>view2.begin()<sp/>);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.size()<sp/>==<sp/>N-1<sp/>);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>content<sp/>of<sp/>OWN_ELEMENTS<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr1,<sp/>++itr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr2)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i*2)<sp/>);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>OWN_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.splice(<sp/>itrL1,<sp/>l2,<sp/>l2.begin()<sp/>);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.size()<sp/>==<sp/>N-1<sp/>);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrL1)-&gt;x<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrL1;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrL1)-&gt;x<sp/>==<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>splice(<sp/>position,<sp/>DataList,<sp/>first,<sp/>last<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l1<sp/>);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>2,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view1<sp/>=<sp/>l1;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view2<sp/>=<sp/>l2;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itrL1<sp/>=<sp/>view1.begin();</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>first2<sp/>=<sp/>view2.begin();</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>++first2;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>last2<sp/><sp/>=<sp/>view2.end();</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>--last2;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>view1.splice(<sp/>itrL1,<sp/>view2,<sp/>first2,<sp/>last2<sp/>);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>N+(N-2)<sp/>);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>content<sp/>of<sp/>OWN_ELEMENTS<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr1,<sp/>++itr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr2)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i*2)<sp/>);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>OWN_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>first2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>++first2;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>last2<sp/><sp/>=<sp/>l2.end();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>--last2;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.splice(<sp/>itrL1,<sp/>l2,<sp/>first2,<sp/>last2<sp/>);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>N+(N-2)<sp/>);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrL1)-&gt;x<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>++itrL1;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrL1)-&gt;x<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>itrL1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itrL1,<sp/>N/2<sp/>+<sp/>(N-2)<sp/>);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itrL1)-&gt;x<sp/>==<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_splice2()</highlight></codeline>
<codeline lineno="2223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>b1;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d2;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>b1<sp/>);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>d2<sp/>);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b2<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>can&apos;t<sp/>splice<sp/>a<sp/>DataList&lt;D&gt;<sp/>via<sp/>a<sp/>DataList&lt;B&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;B&gt;::iterator</ref><sp/>itrB<sp/>=<sp/>b2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(<sp/>itrB,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b2.<ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/>itrB,<sp/>b1<sp/>);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>caught<sp/>);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b2<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>can&apos;t<sp/>splice<sp/>a<sp/>DataList&lt;D&gt;<sp/>via<sp/>a<sp/>DataList&lt;B&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;B&gt;::iterator</ref><sp/>itrB<sp/>=<sp/>b2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(<sp/>itrB,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b2.<ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/>itrB,<sp/>b1,<sp/>b1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>caught<sp/>);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b2<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>can&apos;t<sp/>splice<sp/>a<sp/>DataList&lt;D&gt;<sp/>via<sp/>a<sp/>DataList&lt;B&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;B&gt;::iterator</ref><sp/>itrB<sp/>=<sp/>b2.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(<sp/>itrB,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b2.<ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/>itrB,<sp/>b1,<sp/>b1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>b1.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>caught<sp/>);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_splice()</highlight></codeline>
<codeline lineno="2289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>test2_splice1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>test2_splice1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/>test2_splice1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/>test2_splice2&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL<sp/>&gt;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_remove1()</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itr,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>l.remove(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N-1<sp/>);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(<sp/>itr,<sp/>N/2<sp/>);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(N/2<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/da7/structPredX" kindref="compound">PredX&lt;T&gt;</ref><sp/>predicate;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>predicate.m_cut<sp/>=<sp/>N/2;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>l.remove_if(<sp/>predicate<sp/>);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N/2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_remove()</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>test2_remove1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>test2_remove1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>test2_remove1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_merge1()</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l1<sp/>);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>2,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view1<sp/>=<sp/>l1;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view2<sp/>=<sp/>l2;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>view1.merge(<sp/>view2<sp/>);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>content<sp/>of<sp/>OWN_ELEMENTS<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr1,<sp/>++itr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr2)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i*2)<sp/>);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>OWN_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.merge(<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l1<sp/>);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>2,<sp/>l2<sp/>);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view1<sp/>=<sp/>l1;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view2<sp/>=<sp/>l2;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>view1.merge(<sp/>view2,<sp/><ref refid="d4/dc1/structLessX" kindref="compound">LessX&lt;T&gt;</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>content<sp/>of<sp/>OWN_ELEMENTS<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr2<sp/>=<sp/>l2.begin();</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr1,<sp/>++itr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr2)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i*2)<sp/>);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>OWN_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.merge(<sp/>l2,<sp/><ref refid="d4/dc1/structLessX" kindref="compound">LessX&lt;T&gt;</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l1.size()<sp/>==<sp/>2*N<sp/>);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l2.empty()<sp/>);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>itr1<sp/>=<sp/>l1.begin();</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>++itr1;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>itr1<sp/>=<sp/>--l1.end();</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr1)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(<sp/>(N-1)*2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_merge2()</highlight></codeline>
<codeline lineno="2412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>b1;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d2;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>b1<sp/>);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>d2<sp/>);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b2<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>can&apos;t<sp/>merge<sp/>a<sp/>DataList&lt;D&gt;<sp/>via<sp/>a<sp/>DataList&lt;B&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b2.<ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/>b1<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>caught<sp/>);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b2<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>can&apos;t<sp/>merge<sp/>a<sp/>DataList&lt;D&gt;<sp/>via<sp/>a<sp/>DataList&lt;B&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b2.<ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/>b1,<sp/><ref refid="d4/dc1/structLessX" kindref="compound">LessX&lt;B&gt;</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>caught<sp/>);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_merge()</highlight></codeline>
<codeline lineno="2456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/>test2_merge1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>test2_merge1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>test2_merge1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>test2_merge2&lt;B,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="2461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL<sp/>&gt;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique1()</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<sp/>elem<sp/>=<sp/>l.front();</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(<sp/>const_cast&lt;T*&gt;(elem)<sp/>);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]<sp/>=&gt;<sp/>[0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique();</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<sp/>elem<sp/>=<sp/>l.front();</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(<sp/>const_cast&lt;T*&gt;(elem)<sp/>);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]<sp/>=&gt;<sp/>[0,<sp/>0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique(<sp/><ref refid="d4/dc1/structLessX" kindref="compound">LessX&lt;T&gt;</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(0)<sp/>);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(0)<sp/>);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>crash<sp/>when<sp/>l<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique();</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testing<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<sp/>elem<sp/>=<sp/>l.front();</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(<sp/>const_cast&lt;T*&gt;(elem)<sp/>);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]<sp/>=&gt;<sp/>[0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>view.unique();</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/><sp/><sp/><sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>crash<sp/>when<sp/>l<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique();</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testing<sp/>VIEW_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<sp/>elem<sp/>=<sp/>l.front();</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>l.push_front(<sp/>const_cast&lt;T*&gt;(elem)<sp/>);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>view<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]<sp/>=&gt;<sp/>[0,<sp/>0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>view.unique(<sp/><ref refid="d4/dc1/structLessX" kindref="compound">LessX&lt;T&gt;</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>view.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/><sp/><sp/><sp/>l.size()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>crash<sp/>when<sp/>l<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>l.unique();</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique2()</highlight></codeline>
<codeline lineno="2553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d1;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>d1<sp/>);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref><sp/>*<sp/>elem<sp/>=<sp/>d1.<ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>d1.<ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref>(<sp/>const_cast&lt;D*&gt;(elem)<sp/>);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>d1.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>N+1<sp/>);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>we<sp/>can<sp/>@c<sp/>unique<sp/>a<sp/>derived<sp/>container<sp/>from<sp/>its<sp/>base<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b1<sp/>=<sp/>d1;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]<sp/>=&gt;<sp/>[0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="d9/dfb/classDataList_1ac1d80934264168e06b20b50421cac53c" kindref="member" tooltip="Remove consecutive duplicate elements.">unique</ref>();</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>b1.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>d1.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itr<sp/>=<sp/>b1.begin();</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D&gt;::const_iterator</ref><sp/>itr<sp/>=<sp/>d1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique()</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>test2_unique1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>test2_unique1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/>test2_unique1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>test2_unique2&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="2591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL<sp/>&gt;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reverse1()</highlight></codeline>
<codeline lineno="2595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>typename<sp/>DL::base_value_type<sp/>T;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>l;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>l.size()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>l.reverse();</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/>itr<sp/>=<sp/>l.begin();</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(N-1-i)<sp/>);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reverse2()</highlight></codeline>
<codeline lineno="2623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>d1;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_prepare1(<sp/>N,<sp/>1,<sp/>d1<sp/>);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert(<sp/>d1.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;D&gt;::const_iterator</ref><sp/>itr<sp/>=<sp/>d1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(i)<sp/>);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>one<sp/>can<sp/>reverse<sp/>a<sp/>derived<sp/>container<sp/>through<sp/>its<sp/>base<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b1<sp/>=<sp/>d1;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="d9/dfb/classDataList_1a66abd193aa2a8288a5af7ac8029ff96d" kindref="member" tooltip="Reverse the elements in list.">reverse</ref>();</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;B&gt;::const_iterator</ref><sp/>itr<sp/>=<sp/>b1.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>N;<sp/>++i,<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert(<sp/>(*itr)-&gt;x<sp/>==<sp/>static_cast&lt;int&gt;(N-1-i)<sp/>);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>&gt;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reverse()</highlight></codeline>
<codeline lineno="2651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>test2_reverse1&lt;DataList&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>test2_reverse1&lt;DataList&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>test2_reverse1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>test2_reverse2&lt;B,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="2656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb2<sp/>(DL&amp;<sp/>v,<sp/>It<sp/>beg,<sp/>It<sp/>end)</highlight></codeline>
<codeline lineno="2660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v.front()-&gt;x;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>v.back()-&gt;x;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/>myassert(<sp/>a<sp/>==<sp/>v.front()-&gt;x<sp/>);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>myassert(<sp/>b<sp/>==<sp/>v.back()-&gt;x<sp/><sp/>);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>DL::iter_swap<sp/>(beg,<sp/>end);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>==<sp/>v.back()-&gt;x);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/>myassert<sp/>(b<sp/>==<sp/>v.front()-&gt;x);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb1()</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>--v.end());</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>--v2.end());</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb()</highlight></codeline>
<codeline lineno="2694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>--v.end()<sp/>);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap_memb2<sp/>(b,<sp/>b.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>--b.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap2<sp/>(DL&amp;<sp/>v,<sp/>It<sp/>beg,<sp/>It<sp/>end)</highlight></codeline>
<codeline lineno="2720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v.front()-&gt;x;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>v.<ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()-&gt;x;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/>myassert(<sp/>a<sp/>==<sp/>v.front()-&gt;x<sp/>);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/>myassert(<sp/>b<sp/>==<sp/>v.back()-&gt;x<sp/><sp/>);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(beg,<sp/>end);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>==<sp/>v.back()-&gt;x);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>myassert<sp/>(b<sp/>==<sp/>v.front()-&gt;x);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap1()</highlight></codeline>
<codeline lineno="2732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>--v.end());</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.rbegin(),<sp/>--v.rend());</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/>DL<sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>--v2.end());</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.rbegin(),<sp/>--v2.rend());</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap()</highlight></codeline>
<codeline lineno="2766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>b<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>--v.end()<sp/>);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(b,<sp/>b.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>--b.<ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(b,<sp/>b.<ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>(),<sp/>--b.<ref refid="d9/dfb/classDataList_1a8e1f7911eb19dab9166a4946351d330f" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()<sp/>);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d9/d04/classdl__test__err" kindref="compound">dl_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2802" refid="df/d97/structPred" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d97/structPred" kindref="compound">Pred</ref></highlight></codeline>
<codeline lineno="2803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><ref refid="df/d97/structPred" kindref="compound">Pred</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_v)<sp/>:<sp/>v<sp/>(the_v)<sp/>{}</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2806"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>==<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_removealg1()</highlight></codeline>
<codeline lineno="2811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove<sp/>(v.begin(),<sp/>v.end(),<sp/>nth<sp/>(v,<sp/>5));</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-1;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth<sp/>(v,<sp/>N-1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove<sp/>(v.begin(),<sp/>::prev(v.end()),<sp/>nth(v,8));</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>9)<sp/>++j;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,N-2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,N-1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(9);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-1;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,N-1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove_if<sp/>(v.begin(),<sp/>::prev(v.end()),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(9));</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>9)<sp/>++j;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,N-2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,N-1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(9);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove<sp/>(v.rbegin(),<sp/>v.rend(),<sp/>nth(v,5));</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove<sp/>(v.rbegin(),<sp/>::prev(v.rend()),<sp/>nth(v,8));</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>8)<sp/>++j;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove_if<sp/>(v.rbegin(),<sp/>::prev(v.rend()),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(8));</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>8)<sp/>++j;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_removealg()</highlight></codeline>
<codeline lineno="2934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>test2_removealg1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>test2_removealg1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>test2_removealg1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2942" refid="d0/daa/structBPred" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/daa/structBPred" kindref="compound">BPred</ref></highlight></codeline>
<codeline lineno="2943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2945"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>==<sp/>b-&gt;x;<sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_uniquealg1()</highlight></codeline>
<codeline lineno="2949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(v.back());</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=<sp/>std::unique<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.begin(),<sp/>it)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,5)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3);</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(v.back());</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i-1);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(std::distance<sp/>(v.rbegin(),<sp/>it)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i-2);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_uniquealg()</highlight></codeline>
<codeline lineno="3018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>test2_uniquealg1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>test2_uniquealg1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/>test2_uniquealg1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reversealg1()</highlight></codeline>
<codeline lineno="3026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=5;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reversealg()</highlight></codeline>
<codeline lineno="3045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>test2_reversealg1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>test2_reversealg1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/>test2_reversealg1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rotatealg1()</highlight></codeline>
<codeline lineno="3053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=5;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v.begin(),<sp/>::next(v.begin(),2),<sp/>v.end());</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>(i+2)%5);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v.rbegin(),<sp/>::next(v.rbegin(),2),<sp/>v.rend());</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(nth(v,i)-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rotatealg()</highlight></codeline>
<codeline lineno="3072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/>test2_rotatealg1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/>test2_rotatealg1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/>test2_rotatealg1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3079" refid="db/dba/structPPred" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/dba/structPPred" kindref="compound">PPred</ref></highlight></codeline>
<codeline lineno="3080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><ref refid="db/dba/structPPred" kindref="compound">PPred</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_v)<sp/>:<sp/>v<sp/>(the_v)<sp/>{}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3083"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>&lt;<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>random_list<sp/>(DL&amp;<sp/>l,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="3088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/>std::vector&lt;T*&gt;<sp/>v;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>l.assign<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_partitionalg1()</highlight></codeline>
<codeline lineno="3099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/>stlrand.seed<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>random_list<sp/>(v,<sp/>N);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partition<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>ii<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>it)</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*ii++)-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>v.end())</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*ii++)-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>random_list<sp/>(v,<sp/>N);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>rit<sp/>=</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partition<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>jj<sp/>=<sp/>v.rbegin();</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jj<sp/>!=<sp/>rit)</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*jj++)-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jj<sp/>!=<sp/>v.rend())</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*jj++)-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>stlrand.seed<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/>random_list<sp/>(v,<sp/>N);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>ii<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>it)</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*ii++)-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>v.end())</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*ii++)-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>random_list<sp/>(v,<sp/>N);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>rit<sp/>=</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::reverse_iterator<sp/>jj<sp/>=<sp/>v.rbegin();</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jj<sp/>!=<sp/>rit)</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*jj++)-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jj<sp/>!=<sp/>v.rend())</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>((*jj++)-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_partitionalg()</highlight></codeline>
<codeline lineno="3154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>test2_partitionalg1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>test2_partitionalg1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/>test2_partitionalg1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_asdatalist()</highlight></codeline>
<codeline lineno="3162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;D&gt;</ref><sp/>&gt;<sp/>cv;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>cv.<ref refid="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref>*<sp/>dv<sp/>=<sp/>cv.<ref refid="d3/d7c/classConstDataList_1a5ecbdc336fe36cffafe71d3f54735901" kindref="member" tooltip="Return a pointer to this object, as a const DataList.">asDataList</ref>();</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>myassert<sp/>(dv-&gt;<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1()</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/>DL<sp/>v;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()).base(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()).base(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(3);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement()</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapranges()</highlight></codeline>
<codeline lineno="3193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/>T;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>DL<sp/>l1;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>DL<sp/>l2;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>l1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>l2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i+10));</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>std::swap_ranges<sp/>(::next(l1.begin(),3),<sp/>::next(l1.begin(),6),</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::next(l2.begin(),4));</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>std::swap_ranges<sp/>(::next(l1.rbegin(),3),<sp/>::next(l1.rbegin(),6),</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::next(l2.rbegin(),4));</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapranges()</highlight></codeline>
<codeline lineno="3212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;ConstDataList&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_test2()</highlight></codeline>
<codeline lineno="3220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>boost::function_requires&lt;boost::ForwardContainerConcept&lt;DataList&lt;B&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/>boost::function_requires&lt;boost::ForwardContainerConcept&lt;DataList&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/>test2_initial&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/>test2_default_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/>test2_sized_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/>test2_insertion_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>test2_copy_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>test2_dtor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/>test2_push_front&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>test2_push_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>test2_size&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/>test2_stdcont&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>test2_empty&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/>test2_max_size&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/>test2_front_back_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>test2_front_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>test2_begin_end_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>test2_elementproxy&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>test2_swapelement_iter&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>test2_resize&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>test2_pop_front&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>test2_pop_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>test2_begin_end&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>test2_rbegin_rend&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/>test2_erase_range&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>test2_erase_single&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>test2_operator_assign&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>test2_insert_value&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/>test2_insert_range&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>test2_clear&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>test2_swap&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/>test2_assign&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>test2_relops&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>test2_sort&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>test2_splice&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/>test2_merge&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>test2_remove&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>test2_unique&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>test2_reverse&lt;B,D&gt;();</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>test2_iter_swap&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>test2_removealg&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/>test2_uniquealg&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>test2_reversealg&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/>test2_rotatealg&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>test2_partitionalg&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>test2_asdatalist&lt;D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>test2_assignelement&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="3272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_classid()</highlight></codeline>
<codeline lineno="3277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/>traits;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>traits::typeName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>clid,<sp/>vers,<sp/>is_do:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>traits::ID()<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>traits::s_version<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>traits::s_isDataObject<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="3288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataList_test<sp/>[test2]<sp/>BEGIN<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/>test2_myassert();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>do_test2&lt;AA,<sp/>BB&gt;<sp/>();</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>do_test2&lt;BB,<sp/>CC&gt;<sp/>();</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/>do_test2&lt;M,<sp/>P&gt;<sp/>();</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>do_test2&lt;M,<sp/>R&gt;<sp/>();</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;AA&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;AA&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;BB&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;BB&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;CC&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;CC&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;M&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;M&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;P&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;P&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;R&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;R&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>dump_classid&lt;AA&gt;<sp/>();</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/>dump_classid&lt;BB&gt;<sp/>();</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>dump_classid&lt;CC&gt;<sp/>();</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3305"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>ClassID_traits&lt;DataList&lt;AA&gt;<sp/>&gt;::packageInfo();</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/>myassert<sp/>(<sp/>os.str().substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Package-00-00-00&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>os.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>ClassID_traits&lt;DataList&lt;CC&gt;<sp/>&gt;::packageInfo();</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>myassert<sp/>(os.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Package-00-00-00&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3313"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataList_test<sp/>[test2]<sp/>OK<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_baseinfo()</highlight></codeline>
<codeline lineno="3319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>clids;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>clids<sp/>=<sp/>SG::BaseInfo&lt;DataList&lt;CC&gt;<sp/>&gt;::get_bases();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>exp1<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;AA&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;BB&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;CC&gt;</ref><sp/>&gt;::ID());</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/>std::sort<sp/>(clids.begin(),<sp/>clids.end());</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp1.begin(),<sp/>exp1.end());</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>myassert<sp/>(clids<sp/>==<sp/>exp1);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/>clids<sp/>=<sp/>SG::BaseInfo&lt;DataList&lt;R&gt;<sp/>&gt;::get_bases();</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>exp2<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;R&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;N&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;O&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;Q&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataList&lt;M&gt;</ref><sp/>&gt;::ID());</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>std::sort<sp/>(clids.begin(),<sp/>clids.end());</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp2.begin(),<sp/>exp2.end());</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/>myassert<sp/>(clids<sp/>==<sp/>exp2);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;CC&gt;</ref><sp/>&gt;::is_base</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;BB&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;CC&gt;</ref><sp/>&gt;::is_virtual</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;BB&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;R&gt;</ref><sp/>&gt;::is_base</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;M&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;R&gt;</ref><sp/>&gt;::is_virtual</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;M&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_eltbaseinfo()</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>tinfos;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/>tinfos<sp/>=<sp/>SG::BaseInfo&lt;CC&gt;::get_ti_bases();</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>exp1<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/df1/structAA" kindref="compound">AA</ref>))</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>))</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d4/d95/structCC" kindref="compound">CC</ref>));</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tinfos.begin(),<sp/>tinfos.end());</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp1.begin(),<sp/>exp1.end());</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>myassert<sp/>(tinfos<sp/>==<sp/>exp1);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>tinfos<sp/>=<sp/>SG::BaseInfo&lt;R&gt;::get_ti_bases();</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>exp2<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/df7/structR" kindref="compound">R</ref>))</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(N))</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(O))</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Q))</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(M))</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="dc/d7e/structMM" kindref="compound">MM</ref>));</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tinfos.begin(),<sp/>tinfos.end());</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp2.begin(),<sp/>exp2.end());</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/>myassert<sp/>(tinfos<sp/>==<sp/>exp2);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;CC&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>)));</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>SG::BaseInfo&lt;CC&gt;::is_virtual<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>)));</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;R&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(M)));</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;R&gt;::is_virtual<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(M)));</highlight></codeline>
<codeline lineno="3380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copyconvert()</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;P&gt;</ref><sp/>lst;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/>lst.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/>assert<sp/>(SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;P&gt;</ref><sp/>&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;M&gt;</ref>)));</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/>assert<sp/>(!<sp/>SG::BaseInfo&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;P&gt;</ref><sp/>&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;MM&gt;</ref>)));</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>*<sp/>info;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>contp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(lst,</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;AA&gt;</ref>),<sp/>info);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>assert<sp/>(contp<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;MM&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/>contp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(lst,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;MM&gt;</ref>),<sp/>info);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;MM&gt;</ref>&amp;<sp/>mmlst<sp/>=<sp/>*(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;MM&gt;</ref>*)contp;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/>assert<sp/>(mmlst.<ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>assert<sp/>(mmlst.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;MM&gt;::iterator</ref><sp/>it<sp/>=<sp/>mmlst.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>*<sp/>mm<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(mm-&gt;mm<sp/>==<sp/>i<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(mm);</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(pp-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=10;<sp/>i&lt;20;<sp/>i++)</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>lst.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>DataModel_detail::dvl_update<sp/>(lst,<sp/>contp,<sp/>info);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/>assert<sp/>(mmlst.<ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>assert<sp/>(mmlst.<ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>mmlst.<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>*<sp/>mm<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(mm-&gt;mm<sp/>==<sp/>i<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(mm);</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(pp-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_iterate()</highlight></codeline>
<codeline lineno="3427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;P&gt;</ref><sp/>vp;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(0);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>info1<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;P&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase" kindref="compound" tooltip="Helper to iterate over a DV container.">DataModel_detail::DVLIteratorBase</ref>*<sp/>iterator<sp/>=<sp/>info1.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(&amp;vp);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>iterator-&gt;<ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase_1a9e74fe1d375806b4958e024bb9a6171e" kindref="member" tooltip="Return the next element from the container.">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(pp-&gt;x<sp/>==<sp/>ii++);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iterator;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;M&gt;</ref>&amp;<sp/>vm<sp/>=<sp/>vp;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>info2<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;M&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>iterator<sp/>=<sp/>info2.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(&amp;vm);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>ii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>iterator-&gt;<ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase_1a9e74fe1d375806b4958e024bb9a6171e" kindref="member" tooltip="Return the next element from the container.">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">M*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(pp-&gt;x<sp/>==<sp/>ii++);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iterator;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="3456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>test_baseinfo();</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>test_eltbaseinfo();</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>test_copyconvert();</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>test_iterate();</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3467"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="3473"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>asDataList</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx"/>
  </compounddef>
</doxygen>
