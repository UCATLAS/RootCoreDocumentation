<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/da8/TestStore_8icc" kind="file">
    <compoundname>TestStore.icc</compoundname>
    <includes local="yes">SGTools/IProxyDictWithPool.h</includes>
    <includes local="yes">SGTools/StringPool.h</includes>
    <includes local="yes">SGTools/DataProxy.h</includes>
    <includes refid="db/daa/unordered__map_8h" local="yes">CxxUtils/unordered_map.h</includes>
    <includedby refid="de/d1d/xAODJet__Jet__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/xAODJet_Jet_test.cxx</includedby>
    <incdepgraph>
      <node id="383239">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="383240" relation="include">
        </childnode>
        <childnode refid="383242" relation="include">
        </childnode>
        <childnode refid="383250" relation="include">
        </childnode>
        <childnode refid="383251" relation="include">
        </childnode>
      </node>
      <node id="383249">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="383251">
        <label>functional</label>
      </node>
      <node id="383247">
        <label>limits</label>
      </node>
      <node id="383243">
        <label>iterator</label>
      </node>
      <node id="383246">
        <label>cmath</label>
      </node>
      <node id="383248">
        <label>string</label>
      </node>
      <node id="383240">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="383241" relation="include">
        </childnode>
        <childnode refid="383242" relation="include">
        </childnode>
        <childnode refid="383243" relation="include">
        </childnode>
        <childnode refid="383244" relation="include">
        </childnode>
        <childnode refid="383245" relation="include">
        </childnode>
        <childnode refid="383246" relation="include">
        </childnode>
        <childnode refid="383247" relation="include">
        </childnode>
        <childnode refid="383248" relation="include">
        </childnode>
        <childnode refid="383249" relation="include">
        </childnode>
      </node>
      <node id="383237">
        <label>SGTools/StringPool.h</label>
      </node>
      <node id="383242">
        <label>utility</label>
      </node>
      <node id="383236">
        <label>SGTools/IProxyDictWithPool.h</label>
      </node>
      <node id="383245">
        <label>cstdlib</label>
      </node>
      <node id="383244">
        <label>cstddef</label>
      </node>
      <node id="383235">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc</label>
        <link refid="TestStore.icc"/>
        <childnode refid="383236" relation="include">
        </childnode>
        <childnode refid="383237" relation="include">
        </childnode>
        <childnode refid="383238" relation="include">
        </childnode>
        <childnode refid="383239" relation="include">
        </childnode>
      </node>
      <node id="383238">
        <label>SGTools/DataProxy.h</label>
      </node>
      <node id="383241">
        <label>algorithm</label>
      </node>
      <node id="383250">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="d2/df8/structTestStoreRemap" prot="public">TestStoreRemap</innerclass>
    <innerclass refid="d7/d02/structTestStoreRemapHash" prot="public">TestStoreRemapHash</innerclass>
    <innerclass refid="dd/db9/classTestStore" prot="public">TestStore</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dc/da8/TestStore_8icc_1a21693634c5949b16d8811103dc69435a" prot="public" static="no" mutable="no">
        <type><ref refid="dd/db9/classTestStore" kindref="compound">TestStore</ref></type>
        <definition>TestStore store</definition>
        <argsstring></argsstring>
        <name>store</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/da8/TestStore_8icc_1a4afba5a6bf38bc62015415f4390236cf" prot="public" static="no" mutable="no">
        <type>IProxyDictWithPool *</type>
        <definition>IProxyDictWithPool* storePtr</definition>
        <argsstring></argsstring>
        <name>storePtr</name>
        <initializer> &amp;store</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="167" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/da8/TestStore_8icc_1a72a70a4cf5eeb993ca9f87155d055e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IProxyDictWithPool **</type>
        <definition>IProxyDictWithPool** getTestDataSourcePointer</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>getTestDataSourcePointer</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="170" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Dummy event store, for regression tests. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Dec, 2013 copied from Control/AthLinks/trunk/test </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;SGTools/IProxyDictWithPool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/StringPool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/DataProxy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&lt;<sp/>201100</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="db/daa/unordered__map_8h" kindref="compound" tooltip="This is the TR1 unordered_set implementation from gcc4, adapted to build in Atlas...">CxxUtils/unordered_map.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG_STD_OR_SG<sp/>=<sp/>SG;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG_STD_OR_SG<sp/>=<sp/>std;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="d2/df8/structTestStoreRemap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref><sp/>(SG::sgkey_t<sp/>the_key=0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>the_index<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>key<sp/>(the_key),<sp/>index<sp/>(the_index)<sp/>{}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="29"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.key<sp/>==<sp/>key<sp/>&amp;&amp;<sp/>other.index<sp/>==<sp/>index;<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>SG::sgkey_t<sp/>key;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d7/d02/structTestStoreRemapHash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d02/structTestStoreRemapHash" kindref="compound">TestStoreRemapHash</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>&amp;<sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.key<sp/>+<sp/>m.index;<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/db9/classTestStore" kindref="compound">TestStore</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IProxyDictWithPool</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>addRef()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;addRef\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>release()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;release\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>StatusCode<sp/>queryInterface(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterfaceID<sp/>&amp;</highlight><highlight class="comment">/*ti*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/></highlight><highlight class="comment">/*pp*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;queryInterface\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="53"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;name\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>SG::DataProxy*<sp/>deep_proxy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*pTransient*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="57"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;deep_proxy\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>SG::DataProxy*<sp/>proxy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pTransient)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="59"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>tmap_t::const_iterator<sp/>i<sp/>=<sp/>m_tmap.find<sp/>(pTransient);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>m_tmap.end())</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>SG::DataProxy*<sp/>proxy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref>&amp;<sp/></highlight><highlight class="comment">/*id*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="66"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;proxy2\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>SG::DataProxy*<sp/>proxy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>sgkey_t<sp/>sgkey<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="dd/db9/classTestStore" kindref="compound">TestStore</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;stringToKey<sp/>(key,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>kmap_t::const_iterator<sp/>i<sp/>=<sp/>m_kmap.find<sp/>(sgkey);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>m_kmap.end())</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>SG::DataProxy*<sp/>proxy_exact<sp/>(SG::sgkey_t<sp/>sgkey)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>kmap_t::const_iterator<sp/>i<sp/>=<sp/>m_kmap.find<sp/>(sgkey);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>m_kmap.end())</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>SG::DataProxy*&gt;<sp/>proxies()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;proxies\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>sgkey_t<sp/>stringToKey<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref><sp/>clid)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stringPool.stringToKey<sp/>(str,<sp/>clid);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>keyToString<sp/>(sgkey_t<sp/></highlight><highlight class="comment">/*key*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;keyToString1\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>keyToString<sp/>(sgkey_t<sp/>key,<sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref>&amp;<sp/>clid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="92"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stringPool.keyToString<sp/>(key,<sp/>clid);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerKey<sp/>(sgkey_t<sp/></highlight><highlight class="comment">/*key*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*str*/</highlight><highlight class="normal">,<sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref><sp/></highlight><highlight class="comment">/*clid*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;registerKey\n&quot;</highlight><highlight class="normal">;<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tryELRemap<sp/>(sgkey_t<sp/>sgkey_in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_in,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sgkey_t&amp;<sp/>sgkey_out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index_out)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_t::iterator<sp/>i<sp/>=<sp/>m_remap.find<sp/>(<ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref><sp/>(sgkey_in,<sp/>index_in));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>m_remap.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>sgkey_out<sp/>=<sp/>i-&gt;second.key;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>index_out<sp/>=<sp/>i-&gt;second.index;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>StatusCode<sp/>addToStore<sp/>(<ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref><sp/></highlight><highlight class="comment">/*id*/</highlight><highlight class="normal">,<sp/>SG::DataProxy*<sp/>proxy)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>proxy-&gt;setStore<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>m_kmap[proxy-&gt;transientAddress()-&gt;sgkey()]<sp/>=<sp/>proxy;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>record<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>DataObject*<sp/>obj<sp/>=<sp/>SG::asStorable&lt;T&gt;(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref><sp/>clid<sp/>=<sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;T&gt;::ID</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>sgkey_t<sp/>sgkey<sp/>=<sp/>stringToKey<sp/>(key,<sp/>clid);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_kmap.find<sp/>(sgkey)<sp/>!=<sp/>m_kmap.end())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SG::DataProxy*<sp/>dp<sp/>=<sp/>m_kmap[sgkey];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dp-&gt;setObject<sp/>(obj);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp-&gt;transientAddress()-&gt;clID()<sp/>==<sp/>CLID_NULL)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp-&gt;transientAddress()-&gt;setID<sp/>(clid,<sp/>key);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_tmap[p]<sp/>=<sp/>dp;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>SG::TransientAddress*<sp/>tAddr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SG::TransientAddress(clid,<sp/>key);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>SG::DataProxy*<sp/>dp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SG::DataProxy(obj,<sp/>tAddr);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>dp-&gt;setStore<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tmap[p]<sp/>=<sp/>dp;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_kmap[sgkey]<sp/>=<sp/>dp;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>tAddr-&gt;setSGKey<sp/>(sgkey);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remap<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key_in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key_out,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_in<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_out<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member" tooltip="The Class ID type.">CLID</ref><sp/>clid<sp/>=<sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;T&gt;::ID</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>sgkey_t<sp/>sgkey_in<sp/>=<sp/>stringToKey<sp/>(key_in,<sp/>clid);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>sgkey_t<sp/>sgkey_out<sp/>=<sp/>stringToKey<sp/>(key_out,<sp/>clid);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>m_remap[<ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>(sgkey_in,<sp/>index_in)]<sp/>=</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>(sgkey_out,<sp/>index_out);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map&lt;const void*, SG::DataProxy*&gt;</ref><sp/>tmap_t;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>tmap_t<sp/>m_tmap;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map&lt;sgkey_t, SG::DataProxy*&gt;</ref><sp/>kmap_t;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>kmap_t<sp/>m_kmap;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map&lt;TestStoreRemap, TestStoreRemap, TestStoreRemapHash&gt;</ref><sp/>remap_t;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>remap_t<sp/>m_remap;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>SG::StringPool<sp/>m_stringPool;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="dd/db9/classTestStore" kindref="compound">TestStore</ref><sp/>store;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">IProxyDictWithPool*<sp/>storePtr<sp/>=<sp/>&amp;store;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">IProxyDictWithPool**<sp/>getTestDataSourcePointer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;storePtr;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc"/>
  </compounddef>
</doxygen>
