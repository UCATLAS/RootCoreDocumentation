<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/d4d/classEL_1_1BatchDriver" kind="class" prot="public">
    <compoundname>EL::BatchDriver</compoundname>
    <basecompoundref refid="de/d0a/classEL_1_1Driver" prot="public" virt="non-virtual">EL::Driver</basecompoundref>
    <derivedcompoundref refid="dd/d04/classEL_1_1CondorDriver" prot="public" virt="non-virtual">EL::CondorDriver</derivedcompoundref>
    <derivedcompoundref refid="d9/daf/classEL_1_1GEDriver" prot="public" virt="non-virtual">EL::GEDriver</derivedcompoundref>
    <derivedcompoundref refid="d4/ddb/classEL_1_1LLDriver" prot="public" virt="non-virtual">EL::LLDriver</derivedcompoundref>
    <derivedcompoundref refid="da/dfc/classEL_1_1LocalDriver" prot="public" virt="non-virtual">EL::LocalDriver</derivedcompoundref>
    <derivedcompoundref refid="d2/d63/classEL_1_1LSFDriver" prot="public" virt="non-virtual">EL::LSFDriver</derivedcompoundref>
    <derivedcompoundref refid="db/d87/classEL_1_1SlurmDriver" prot="public" virt="non-virtual">EL::SlurmDriver</derivedcompoundref>
    <derivedcompoundref refid="df/dfd/classEL_1_1SoGEDriver" prot="public" virt="non-virtual">EL::SoGEDriver</derivedcompoundref>
    <derivedcompoundref refid="d4/d4f/classEL_1_1TorqueDriver" prot="public" virt="non-virtual">EL::TorqueDriver</derivedcompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dc/d4d/classEL_1_1BatchDriver_1ac1c09c31d7ba3019619ac51c99b718eb" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::BatchDriver::shellInit</definition>
        <argsstring></argsstring>
        <name>shellInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: these shell commands are run verbatim on each worker node before execution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a18003d9f3d634c3b51948840e550537f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BatchDriver::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplements refid="de/d0a/classEL_1_1Driver_1a5bfb09e4419ad988b27e2fccff5e64f0">testInvariant</reimplements>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1a7f42a3cea32e8e992d5461514b0fc573">testInvariant</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1a714a841f3d361ab431c845b60a970755">testInvariant</reimplementedby>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1af16a68cc87667d082b10f025df9b9720">testInvariant</reimplementedby>
        <reimplementedby refid="d2/d63/classEL_1_1LSFDriver_1a552f1f08a3f88addf63a296f7a82d62d">testInvariant</reimplementedby>
        <reimplementedby refid="da/dfc/classEL_1_1LocalDriver_1ad9b92f599767cb3411a93f7f7ae1027a">testInvariant</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1a168450c7c2e380999cf47ee880e33576">testInvariant</reimplementedby>
        <reimplementedby refid="d9/daf/classEL_1_1GEDriver_1a502b95453e6f1a2537dea71ab40c8818">testInvariant</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1a980bba41123af25dbf2bbb5531de3dbc">testInvariant</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="36"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a9345ff52364f0bd507c5fcf7386d3ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::BatchDriver::BatchDriver</definition>
        <argsstring>()</argsstring>
        <name>BatchDriver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard default constructor guarantee: strong failures: low level errors I </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1aa93c35ccd9c59af8785fbb63547f3dd6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::BatchDriver::doUpdateJob</definition>
        <argsstring>(Job &amp;job, const std::string &amp;location) const override</argsstring>
        <name>doUpdateJob</name>
        <reimplements refid="de/d0a/classEL_1_1Driver_1a43e4ecaf3c9a63e33d988e965b196b1b">doUpdateJob</reimplements>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: update the job before it is submitted guarantee: basic failures: out of memory II failures: job specifications unfulfillable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="63"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a487b717b837ae20026efbca8472cbbc4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::BatchDriver::doSubmit</definition>
        <argsstring>(const Job &amp;job, const std::string &amp;location) const override</argsstring>
        <name>doSubmit</name>
        <reimplements refid="de/d0a/classEL_1_1Driver_1ab98809894f7678d1bfed2502e3d1654a">doSubmit</reimplements>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: submit the given job with the given output location guarantee: strong failures: out of memory II failures: submission errors rationale: the virtual part of <ref refid="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" kindref="member">EL::Driver::submit</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="73"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1ab4c1d7d24bd9634e48c1c7a798218bc7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool EL::BatchDriver::doRetrieve</definition>
        <argsstring>(const std::string &amp;location) const override</argsstring>
        <name>doRetrieve</name>
        <reimplements refid="de/d0a/classEL_1_1Driver_1a22eb11aaa4b30fa62bbeeaad61518caf">doRetrieve</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: retrieve all the output for the job in the given location returns: whether the job completed successfully guarantee: basic, may partially retrieve failures: out of memory III failures: job failures failures: job can&apos;t be read failures: job was made with different driver rationale: while job failures will cause this method to fail you can typically retry it multiple times if you can use partial results. rationale: the virtual part of <ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">EL::Driver::retrieve</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a9f876e13883da08efeac606ca2194d9c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string EL::BatchDriver::batchName</definition>
        <argsstring>() const </argsstring>
        <name>batchName</name>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1aa5f537b24132bf298b34190c0598c561">batchName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the name of the submission script to use. if this contains {JOBID} it will create one script for each job id guarantee: strong failures: out of memory II rationale: some batch systems are picky about names. others don&apos;t allow passing arguments into submission scripts </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="105"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a37ab71e407ac47509c60b88e0dc42957" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string EL::BatchDriver::batchInit</definition>
        <argsstring>() const </argsstring>
        <name>batchInit</name>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1a3f44fc141719379c6cf776a4cd3611ad">batchInit</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1abad598beccd3b43bb97ff94e7470570e">batchInit</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1ac01198187b788ff1f94da6fafdfca229">batchInit</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: any additional code we need for setting up the batch job. if multiple files are used, {JOBID} will be replaced with the index of the current file. guarantee: strong failures: out of memory II rationale: some batch systems need extra lines when making there submission scripts, which can either be specially formatted option lines or just some special commands </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1aacc15b9a4782f751878656b6d15b9d1a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string EL::BatchDriver::batchJobId</definition>
        <argsstring>() const </argsstring>
        <name>batchJobId</name>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1ab1066ff35d920a3f0ed2eda01ebf9493">batchJobId</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1acf51471f326b107557585dae423290d2">batchJobId</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the code needed for setting EL_JOBID guarantee: strong failures: out of memory II rationale: normally one can just pass the index of the job as the first argument to the execution script, but some systems instead use environment variables rationale: this is not used if we have separate execution scripts from the job </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="129"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1abd01c38ef1f4e0fa55488a348f56f453" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void EL::BatchDriver::batchSubmit</definition>
        <argsstring>(const std::string &amp;location, const SH::MetaObject &amp;options, std::size_t njob) const =0</argsstring>
        <name>batchSubmit</name>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1a1148e93670900b613f93bb97b8778c58">batchSubmit</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1aed6325b6763f139288e6e8feea4ab83f">batchSubmit</reimplementedby>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1a362dc7b089c63e6e7d7f612611852399">batchSubmit</reimplementedby>
        <reimplementedby refid="d2/d63/classEL_1_1LSFDriver_1a75f08e7d32f2228486514234d358d471">batchSubmit</reimplementedby>
        <reimplementedby refid="da/dfc/classEL_1_1LocalDriver_1ae94bf85768460e34c0455d5f60550b13">batchSubmit</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1a1a5e4391c02f2addd3f177f70e19a8b0">batchSubmit</reimplementedby>
        <reimplementedby refid="d9/daf/classEL_1_1GEDriver_1ada649bc67ba7030f8e07d90c2b01d78a">batchSubmit</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1a35c513ebf70e5a43c08f4954b7921416">batchSubmit</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>njob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: perform the actual batch submission with njob jobs guarantee: strong failures: submission errors rationale: the virtual part of batch submission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a055b220213070d439c7b8f5c77565f54" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BatchDriver::makeScript</definition>
        <argsstring>(const std::string &amp;location, std::size_t njobs, bool sharedFileSystem) const </argsstring>
        <name>makeScript</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>njobs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sharedFileSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create the run script to be used guarantee: basic, may create a partial script failures: out of memory II failures: i/o errors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="152"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1ad046faf43baa9cf3e1f343041600ba58" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string EL::BatchDriver::getWriteLocation</definition>
        <argsstring>(const std::string &amp;location) const </argsstring>
        <name>getWriteLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: determine location for writing output returns: path to directory for writing guarantee: strong </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="167"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1a6c4721b3d72d6c41752a275cdd4d40cb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string EL::BatchDriver::getSubmitLocation</definition>
        <argsstring>(const std::string &amp;location) const </argsstring>
        <name>getSubmitLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: determine location with input configuration returns: path to directory with input configuration guarantee: strong </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="173"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1aa1046b0ee82dbd57206479081a005d38" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string EL::BatchDriver::getRootCoreBin</definition>
        <argsstring>() const </argsstring>
        <name>getRootCoreBin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: determine location of rootcorebin on node returns: path to directory of rootcorebin on node guarantee: strong </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="179"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1aa1ddbb58774849576dfa0f22f95b2322" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::BatchDriver::ClassDef</definition>
        <argsstring>(BatchDriver, 1)</argsstring>
        <name>ClassDef</name>
        <reimplements refid="de/d0a/classEL_1_1Driver_1a539687d1302f4d2e5d363c7956de760a">ClassDef</reimplements>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1a3692de2bc63108f0d6c3a5572633ace1">ClassDef</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1a6bfe08bc0f73f97a88db2d22231c9d73">ClassDef</reimplementedby>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1ab96804e466c480b1e8553ea6ebd4357a">ClassDef</reimplementedby>
        <reimplementedby refid="d2/d63/classEL_1_1LSFDriver_1aa06b92d8f176f16fdde1b47cc99f62b1">ClassDef</reimplementedby>
        <reimplementedby refid="da/dfc/classEL_1_1LocalDriver_1aeead1aea4584f55c034d3eaec2920bae">ClassDef</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1af5c7dec34d0e2345b4a1829c9da07e65">ClassDef</reimplementedby>
        <reimplementedby refid="d9/daf/classEL_1_1GEDriver_1a5efe50361fb2ba4fe61ace2ad16c7d85">ClassDef</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1af49745f21c207ee70db0be43fc9d6ef8">ClassDef</reimplementedby>
        <param>
          <type><ref refid="dc/d4d/classEL_1_1BatchDriver" kindref="compound">BatchDriver</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="dc/d4d/classEL_1_1BatchDriver_1aec12ceb9d0e3ce8650840817141a3a88" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EL::BatchDriver::mergeHists</definition>
        <argsstring>(const std::string &amp;location, const BatchJob &amp;config)</argsstring>
        <name>mergeHists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="dd/dda/structEL_1_1BatchJob" kindref="compound">BatchJob</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: merge the fetched histograms returns: wether all histograms have been fetched guarantee: strong failures: out of memory II failures: i/o errors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="161"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2248">
        <label>EL::LLDriver</label>
        <link refid="d4/ddb/classEL_1_1LLDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2245">
        <label>EL::Driver</label>
        <link refid="de/d0a/classEL_1_1Driver"/>
      </node>
      <node id="2244">
        <label>EL::BatchDriver</label>
        <link refid="dc/d4d/classEL_1_1BatchDriver"/>
        <childnode refid="2245" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2251">
        <label>EL::SlurmDriver</label>
        <link refid="db/d87/classEL_1_1SlurmDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2246">
        <label>EL::CondorDriver</label>
        <link refid="dd/d04/classEL_1_1CondorDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2250">
        <label>EL::LSFDriver</label>
        <link refid="d2/d63/classEL_1_1LSFDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2253">
        <label>EL::TorqueDriver</label>
        <link refid="d4/d4f/classEL_1_1TorqueDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2247">
        <label>EL::GEDriver</label>
        <link refid="d9/daf/classEL_1_1GEDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2249">
        <label>EL::LocalDriver</label>
        <link refid="da/dfc/classEL_1_1LocalDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2252">
        <label>EL::SoGEDriver</label>
        <link refid="df/dfd/classEL_1_1SoGEDriver"/>
        <childnode refid="2244" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2255">
        <label>EL::Driver</label>
        <link refid="de/d0a/classEL_1_1Driver"/>
        <childnode refid="2256" relation="usage">
          <edgelabel>m_options</edgelabel>
        </childnode>
      </node>
      <node id="2257">
        <label>string</label>
      </node>
      <node id="2254">
        <label>EL::BatchDriver</label>
        <link refid="dc/d4d/classEL_1_1BatchDriver"/>
        <childnode refid="2255" relation="public-inheritance">
        </childnode>
        <childnode refid="2257" relation="usage">
          <edgelabel>shellInit</edgelabel>
        </childnode>
      </node>
      <node id="2256">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BatchDriver.h" bodystart="27" bodyend="187"/>
    <listofallmembers>
      <member refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" prot="protected" virt="non-virtual"><scope>EL::BatchDriver</scope><name>abortRetrieve</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a9345ff52364f0bd507c5fcf7386d3ff8" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>BatchDriver</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a37ab71e407ac47509c60b88e0dc42957" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>batchInit</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1aacc15b9a4782f751878656b6d15b9d1a" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>batchJobId</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a9f876e13883da08efeac606ca2194d9c" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>batchName</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1abd01c38ef1f4e0fa55488a348f56f453" prot="private" virt="pure-virtual"><scope>EL::BatchDriver</scope><name>batchSubmit</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1aa1ddbb58774849576dfa0f22f95b2322" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>ClassDef</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>diskOutputSave</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1ab4c1d7d24bd9634e48c1c7a798218bc7" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>doRetrieve</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a487b717b837ae20026efbca8472cbbc4" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>doSubmit</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1aa93c35ccd9c59af8785fbb63547f3dd6" prot="private" virt="virtual"><scope>EL::BatchDriver</scope><name>doUpdateJob</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1afe0fa388e65ba76c794790deba236c95" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>Driver</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1aa1046b0ee82dbd57206479081a005d38" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>getRootCoreBin</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a6c4721b3d72d6c41752a275cdd4d40cb" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>getSubmitLocation</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1ad046faf43baa9cf3e1f343041600ba58" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>getWriteLocation</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a055b220213070d439c7b8f5c77565f54" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>makeScript</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>mergedOutputMkdir</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>mergedOutputName</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>mergedOutputSave</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1aec12ceb9d0e3ce8650840817141a3a88" prot="private" virt="non-virtual"><scope>EL::BatchDriver</scope><name>mergeHists</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>options</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a3543365646e9cfc5fdff27019b62b68c" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>options</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>retrieve</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>saveOutput</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1ac1c09c31d7ba3019619ac51c99b718eb" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>shellInit</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>submit</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>submitOnly</name></member>
      <member refid="dc/d4d/classEL_1_1BatchDriver_1a18003d9f3d634c3b51948840e550537f" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>testInvariant</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a6fed39cd8394451ad9cb68505f7c4f42" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>updateLocation</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" prot="public" virt="non-virtual"><scope>EL::BatchDriver</scope><name>wait</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
