<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/db0/classSG_1_1AuxElement" kind="class" prot="public">
    <compoundname>SG::AuxElement</compoundname>
    <basecompoundref refid="df/dca/classSG_1_1IAuxElement" prot="public" virt="non-virtual">SG::IAuxElement</basecompoundref>
    <derivedcompoundref refid="d1/d51/structAAux" prot="public" virt="non-virtual">AAux</derivedcompoundref>
    <derivedcompoundref refid="d9/db3/structB" prot="public" virt="non-virtual">B</derivedcompoundref>
    <derivedcompoundref refid="db/db2/structC" prot="public" virt="non-virtual">C</derivedcompoundref>
    <derivedcompoundref refid="df/df0/structCAux" prot="public" virt="non-virtual">CAux</derivedcompoundref>
    <derivedcompoundref refid="de/d20/classElt" prot="public" virt="non-virtual">Elt</derivedcompoundref>
    <derivedcompoundref refid="de/d20/classElt" prot="public" virt="non-virtual">Elt</derivedcompoundref>
    <derivedcompoundref refid="d0/d71/classxAOD_1_1AFPData__v1" prot="public" virt="non-virtual">xAOD::AFPData_v1</derivedcompoundref>
    <derivedcompoundref refid="d4/dae/classxAOD_1_1AFPSiHit__v1" prot="public" virt="non-virtual">xAOD::AFPSiHit_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d58/classxAOD_1_1AFPTrack__v1" prot="public" virt="non-virtual">xAOD::AFPTrack_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/df4/classxAOD_1_1ALFAData__v1" prot="public" virt="non-virtual">xAOD::ALFAData_v1</derivedcompoundref>
    <derivedcompoundref refid="d3/d9c/classxAOD_1_1BCMRawData__v1" prot="public" virt="non-virtual">xAOD::BCMRawData_v1</derivedcompoundref>
    <derivedcompoundref refid="de/d87/classxAOD_1_1BTagging__v1" prot="public" virt="non-virtual">xAOD::BTagging_v1</derivedcompoundref>
    <derivedcompoundref refid="df/d95/classxAOD_1_1BTagVertex__v1" prot="public" virt="non-virtual">xAOD::BTagVertex_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/d22/classxAOD_1_1BunchConf__v1" prot="public" virt="non-virtual">xAOD::BunchConf_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/d99/classxAOD_1_1CMMCPHits__v1" prot="public" virt="non-virtual">xAOD::CMMCPHits_v1</derivedcompoundref>
    <derivedcompoundref refid="dc/d52/classxAOD_1_1CMMEtSums__v1" prot="public" virt="non-virtual">xAOD::CMMEtSums_v1</derivedcompoundref>
    <derivedcompoundref refid="dd/de0/classxAOD_1_1CMMJetHits__v1" prot="public" virt="non-virtual">xAOD::CMMJetHits_v1</derivedcompoundref>
    <derivedcompoundref refid="db/d09/classxAOD_1_1CMMRoI__v1" prot="public" virt="non-virtual">xAOD::CMMRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="d8/dd5/classxAOD_1_1CMXCPHits__v1" prot="public" virt="non-virtual">xAOD::CMXCPHits_v1</derivedcompoundref>
    <derivedcompoundref refid="d6/dcc/classxAOD_1_1CMXCPTob__v1" prot="public" virt="non-virtual">xAOD::CMXCPTob_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d64/classxAOD_1_1CMXEtSums__v1" prot="public" virt="non-virtual">xAOD::CMXEtSums_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d39/classxAOD_1_1CMXJetHits__v1" prot="public" virt="non-virtual">xAOD::CMXJetHits_v1</derivedcompoundref>
    <derivedcompoundref refid="d4/d7e/classxAOD_1_1CMXJetTob__v1" prot="public" virt="non-virtual">xAOD::CMXJetTob_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/d01/classxAOD_1_1CMXRoI__v1" prot="public" virt="non-virtual">xAOD::CMXRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d15/classxAOD_1_1CPMHits__v1" prot="public" virt="non-virtual">xAOD::CPMHits_v1</derivedcompoundref>
    <derivedcompoundref refid="dc/d40/classxAOD_1_1CPMRoI__v1" prot="public" virt="non-virtual">xAOD::CPMRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="d4/df9/classxAOD_1_1CPMTobRoI__v1" prot="public" virt="non-virtual">xAOD::CPMTobRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="db/d35/classxAOD_1_1CPMTower__v1" prot="public" virt="non-virtual">xAOD::CPMTower_v1</derivedcompoundref>
    <derivedcompoundref refid="d7/d8c/classxAOD_1_1CPMTower__v2" prot="public" virt="non-virtual">xAOD::CPMTower_v2</derivedcompoundref>
    <derivedcompoundref refid="d5/db4/classxAOD_1_1CutBookkeeper__v1" prot="public" virt="non-virtual">xAOD::CutBookkeeper_v1</derivedcompoundref>
    <derivedcompoundref refid="d4/d49/classxAOD_1_1EmTauRoI__v1" prot="public" virt="non-virtual">xAOD::EmTauRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d1c/classxAOD_1_1EmTauRoI__v2" prot="public" virt="non-virtual">xAOD::EmTauRoI_v2</derivedcompoundref>
    <derivedcompoundref refid="db/d79/classxAOD_1_1EnergySumRoI__v1" prot="public" virt="non-virtual">xAOD::EnergySumRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="df/df8/classxAOD_1_1EventInfo__v1" prot="public" virt="non-virtual">xAOD::EventInfo_v1</derivedcompoundref>
    <derivedcompoundref refid="d7/d93/classxAOD_1_1EventShape__v1" prot="public" virt="non-virtual">xAOD::EventShape_v1</derivedcompoundref>
    <derivedcompoundref refid="d1/dca/classxAOD_1_1FileMetaData__v1" prot="public" virt="non-virtual">xAOD::FileMetaData_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d51/classxAOD_1_1ForwardEventInfo__v1" prot="public" virt="non-virtual">xAOD::ForwardEventInfo_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d63/classxAOD_1_1HIEventShape__v1" prot="public" virt="non-virtual">xAOD::HIEventShape_v1</derivedcompoundref>
    <derivedcompoundref refid="df/d4d/classxAOD_1_1HIEventShape__v2" prot="public" virt="non-virtual">xAOD::HIEventShape_v2</derivedcompoundref>
    <derivedcompoundref refid="d5/d4c/classxAOD_1_1IParticle" prot="public" virt="non-virtual">xAOD::IParticle</derivedcompoundref>
    <derivedcompoundref refid="d0/da2/classxAOD_1_1JEMEtSums__v1" prot="public" virt="non-virtual">xAOD::JEMEtSums_v1</derivedcompoundref>
    <derivedcompoundref refid="dd/d63/classxAOD_1_1JEMEtSums__v2" prot="public" virt="non-virtual">xAOD::JEMEtSums_v2</derivedcompoundref>
    <derivedcompoundref refid="dc/d46/classxAOD_1_1JEMHits__v1" prot="public" virt="non-virtual">xAOD::JEMHits_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d24/classxAOD_1_1JEMRoI__v1" prot="public" virt="non-virtual">xAOD::JEMRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="dd/d13/classxAOD_1_1JEMTobRoI__v1" prot="public" virt="non-virtual">xAOD::JEMTobRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/d41/classxAOD_1_1JetElement__v1" prot="public" virt="non-virtual">xAOD::JetElement_v1</derivedcompoundref>
    <derivedcompoundref refid="d1/dc0/classxAOD_1_1JetElement__v2" prot="public" virt="non-virtual">xAOD::JetElement_v2</derivedcompoundref>
    <derivedcompoundref refid="da/d26/classxAOD_1_1JetEtRoI__v1" prot="public" virt="non-virtual">xAOD::JetEtRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="d3/daa/classxAOD_1_1JetRoI__v1" prot="public" virt="non-virtual">xAOD::JetRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="da/dbb/classxAOD_1_1JetRoI__v2" prot="public" virt="non-virtual">xAOD::JetRoI_v2</derivedcompoundref>
    <derivedcompoundref refid="d8/d83/classxAOD_1_1L1TopoRawData__v1" prot="public" virt="non-virtual">xAOD::L1TopoRawData_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d7e/classxAOD_1_1LumiBlockRange__v1" prot="public" virt="non-virtual">xAOD::LumiBlockRange_v1</derivedcompoundref>
    <derivedcompoundref refid="da/dc5/classxAOD_1_1MBTSModule__v1" prot="public" virt="non-virtual">xAOD::MBTSModule_v1</derivedcompoundref>
    <derivedcompoundref refid="dd/d06/classxAOD_1_1MissingET__v1" prot="public" virt="non-virtual">xAOD::MissingET_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/d15/classxAOD_1_1MissingETAssociation__v1" prot="public" virt="non-virtual">xAOD::MissingETAssociation_v1</derivedcompoundref>
    <derivedcompoundref refid="d8/d38/classxAOD_1_1MissingETComponent__v1" prot="public" virt="non-virtual">xAOD::MissingETComponent_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/d4f/classxAOD_1_1MuonRoI__v1" prot="public" virt="non-virtual">xAOD::MuonRoI_v1</derivedcompoundref>
    <derivedcompoundref refid="d8/d3e/classxAOD_1_1MuonSegment__v1" prot="public" virt="non-virtual">xAOD::MuonSegment_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/d91/classxAOD_1_1RODHeader__v1" prot="public" virt="non-virtual">xAOD::RODHeader_v1</derivedcompoundref>
    <derivedcompoundref refid="d8/de4/classxAOD_1_1RODHeader__v2" prot="public" virt="non-virtual">xAOD::RODHeader_v2</derivedcompoundref>
    <derivedcompoundref refid="d6/d9c/classxAOD_1_1RoiDescriptorStore__v1" prot="public" virt="non-virtual">xAOD::RoiDescriptorStore_v1</derivedcompoundref>
    <derivedcompoundref refid="d2/d32/classxAOD_1_1SCTRawHitValidation__v1" prot="public" virt="non-virtual">xAOD::SCTRawHitValidation_v1</derivedcompoundref>
    <derivedcompoundref refid="d7/d60/classxAOD_1_1SlowMuon__v1" prot="public" virt="non-virtual">xAOD::SlowMuon_v1</derivedcompoundref>
    <derivedcompoundref refid="df/d48/classxAOD_1_1TrackMeasurementValidation__v1" prot="public" virt="non-virtual">xAOD::TrackMeasurementValidation_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d48/classxAOD_1_1TrackParticleClusterAssociation__v1" prot="public" virt="non-virtual">xAOD::TrackParticleClusterAssociation_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/deb/classxAOD_1_1TrackStateValidation__v1" prot="public" virt="non-virtual">xAOD::TrackStateValidation_v1</derivedcompoundref>
    <derivedcompoundref refid="d2/dd6/classxAOD_1_1TrigBphys__v1" prot="public" virt="non-virtual">xAOD::TrigBphys_v1</derivedcompoundref>
    <derivedcompoundref refid="d7/dad/classxAOD_1_1TrigCaloCluster__v1" prot="public" virt="non-virtual">xAOD::TrigCaloCluster_v1</derivedcompoundref>
    <derivedcompoundref refid="de/dd4/classxAOD_1_1TrigComposite__v1" prot="public" virt="non-virtual">xAOD::TrigComposite_v1</derivedcompoundref>
    <derivedcompoundref refid="da/d7b/classxAOD_1_1TrigDecision__v1" prot="public" virt="non-virtual">xAOD::TrigDecision_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d12/classxAOD_1_1TriggerMenu__v1" prot="public" virt="non-virtual">xAOD::TriggerMenu_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/d6d/classxAOD_1_1TriggerTower__v1" prot="public" virt="non-virtual">xAOD::TriggerTower_v1</derivedcompoundref>
    <derivedcompoundref refid="dc/d8a/classxAOD_1_1TrigHisto2D__v1" prot="public" virt="non-virtual">xAOD::TrigHisto2D_v1</derivedcompoundref>
    <derivedcompoundref refid="d5/d0a/classxAOD_1_1TrigMissingET__v1" prot="public" virt="non-virtual">xAOD::TrigMissingET_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/db6/classxAOD_1_1TrigNavigation__v1" prot="public" virt="non-virtual">xAOD::TrigNavigation_v1</derivedcompoundref>
    <derivedcompoundref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1" prot="public" virt="non-virtual">xAOD::TrigPassBits_v1</derivedcompoundref>
    <derivedcompoundref refid="d0/d9f/classxAOD_1_1TrigRingerRings__v1" prot="public" virt="non-virtual">xAOD::TrigRingerRings_v1</derivedcompoundref>
    <derivedcompoundref refid="d7/d25/classxAOD_1_1TrigRingerRings__v2" prot="public" virt="non-virtual">xAOD::TrigRingerRings_v2</derivedcompoundref>
    <derivedcompoundref refid="dc/db7/classxAOD_1_1TrigRNNOutput__v1" prot="public" virt="non-virtual">xAOD::TrigRNNOutput_v1</derivedcompoundref>
    <derivedcompoundref refid="df/dfb/classxAOD_1_1TrigRNNOutput__v2" prot="public" virt="non-virtual">xAOD::TrigRNNOutput_v2</derivedcompoundref>
    <derivedcompoundref refid="d3/dc1/classxAOD_1_1TrigSpacePointCounts__v1" prot="public" virt="non-virtual">xAOD::TrigSpacePointCounts_v1</derivedcompoundref>
    <derivedcompoundref refid="db/d50/classxAOD_1_1TrigT2MbtsBits__v1" prot="public" virt="non-virtual">xAOD::TrigT2MbtsBits_v1</derivedcompoundref>
    <derivedcompoundref refid="dd/de9/classxAOD_1_1TrigT2ZdcSignals__v1" prot="public" virt="non-virtual">xAOD::TrigT2ZdcSignals_v1</derivedcompoundref>
    <derivedcompoundref refid="d3/d07/classxAOD_1_1TrigTrackCounts__v1" prot="public" virt="non-virtual">xAOD::TrigTrackCounts_v1</derivedcompoundref>
    <derivedcompoundref refid="d3/d8a/classxAOD_1_1TrigVertexCounts__v1" prot="public" virt="non-virtual">xAOD::TrigVertexCounts_v1</derivedcompoundref>
    <derivedcompoundref refid="df/dad/classxAOD_1_1TruthEventBase__v1" prot="public" virt="non-virtual">xAOD::TruthEventBase_v1</derivedcompoundref>
    <derivedcompoundref refid="d2/de3/classxAOD_1_1TruthMetaData__v1" prot="public" virt="non-virtual">xAOD::TruthMetaData_v1</derivedcompoundref>
    <derivedcompoundref refid="d8/dfa/classxAOD_1_1TruthVertex__v1" prot="public" virt="non-virtual">xAOD::TruthVertex_v1</derivedcompoundref>
    <derivedcompoundref refid="db/dd1/classxAOD_1_1Vertex__v1" prot="public" virt="non-virtual">xAOD::Vertex_v1</derivedcompoundref>
    <derivedcompoundref refid="d4/d68/classxAOD_1_1ZdcModule__v1" prot="public" virt="non-virtual">xAOD::ZdcModule_v1</derivedcompoundref>
    <includes refid="d1/d6f/AuxElement_8h" local="no">AuxElement.h</includes>
    <innerclass refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" prot="public">SG::AuxElement::Accessor</innerclass>
    <innerclass refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" prot="public">SG::AuxElement::ConstAccessor</innerclass>
    <innerclass refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" prot="public">SG::AuxElement::Decorator</innerclass>
    <innerclass refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" prot="public">SG::AuxElement::TypelessConstAccessor</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="dc/db0/classSG_1_1AuxElement_1a6a154ec406bc6531a348a80e679da31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SG::AuxVectorBase</definition>
        <argsstring></argsstring>
        <name>SG::AuxVectorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1024" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="dc/db0/classSG_1_1AuxElement_1a4573c8a5a16556f7a1826c502a8a1577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SG::AuxVectorBase_test</definition>
        <argsstring></argsstring>
        <name>SG::AuxVectorBase_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1025" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/db0/classSG_1_1AuxElement_1a50ab0c769c22c99b7f733c6637f14c3f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t SG::AuxElement::m_index</definition>
        <argsstring></argsstring>
        <name>m_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index of this element within its container. Should be 0 if this object is not within a container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1141" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/db0/classSG_1_1AuxElement_1ac93b1b9dbe66ad0e02eb767cc3860ce9" prot="private" static="no" mutable="no">
        <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
        <definition>SG::AuxVectorData* SG::AuxElement::m_container</definition>
        <argsstring></argsstring>
        <name>m_container</name>
        <reimplementedby refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1ae83a6c89f6358a54acf8145d7ce992bc">m_container</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The container of which this object is an element. Should be null if this object is not within a container, except for the case where this object as a private store. In that case, <computeroutput>m_container</computeroutput> should be the same as <computeroutput>m_privateData</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/db0/classSG_1_1AuxElement_1a4017abd07f196af0b12c8d38a4faefbb" prot="private" static="no" mutable="no">
        <type><ref refid="dc/dfb/classSG_1_1AuxElementData" kindref="compound">SG::AuxElementData</ref> *</type>
        <definition>SG::AuxElementData* SG::AuxElement::m_privateData</definition>
        <argsstring></argsstring>
        <name>m_privateData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If this object has a current private store, then this points at the container object holding the store. In that case, <computeroutput>m_container</computeroutput> should have the same value. If this object had a private store but it was released because the object was added to a container, then this should be set to <computeroutput>s_privatePlaceholder</computeroutput>. That way, we know to reconstruct the private store in the event this object is removed from the container. Otherwise, if we no private store association at all, then this should be null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1158" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="dc/db0/classSG_1_1AuxElement_1aeacb567cc494b4b94acb1221e1708cb1" prot="private" static="yes" mutable="no">
        <type><ref refid="dc/dfb/classSG_1_1AuxElementData" kindref="compound">SG::AuxElementData</ref> *</type>
        <definition>SG::AuxElementData * SG::AuxElement::s_privatePlaceholder</definition>
        <argsstring></argsstring>
        <name>s_privatePlaceholder</name>
        <initializer>
  reinterpret_cast&lt;<ref refid="dc/dfb/classSG_1_1AuxElementData" kindref="compound">SG::AuxElementData</ref>*&gt;(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special value used to mark that an object had a private store, but it was released because it was added to a container. (And therefore we should recreate the private store if the object is later removed.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1164" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="1164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::AuxElement</definition>
        <argsstring>()</argsstring>
        <name>AuxElement</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1ac8345167ba85a0788d804a39b8325a36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::AuxElement</definition>
        <argsstring>(const AuxElement &amp;other)</argsstring>
        <name>AuxElement</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Object being copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
We do not copy the container/index --- the new object is not yet in a container!</para><para>In the case of constructing an object with a private store, <computeroutput>makePrivateStore</computeroutput> will take care of copying the aux data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="191" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a1ecd49ad16cba61c3131046d8e068650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
        <definition>AuxElement &amp; SG::AuxElement::operator=</definition>
        <argsstring>(const AuxElement &amp;other)</argsstring>
        <name>operator=</name>
        <reimplementedby refid="d7/d45/classxAOD_1_1TriggerTower__v2_1a26b3990c7a352476bbe314ea981f701c">operator=</reimplementedby>
        <reimplementedby refid="db/dd1/classxAOD_1_1Vertex__v1_1a410d6c5cc96a2bc64b39eaeec5c1aa43">operator=</reimplementedby>
        <reimplementedby refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a4cb50ea5ecebf754371d62ad1bd13de2">operator=</reimplementedby>
        <reimplementedby refid="d5/d44/classxAOD_1_1NeutralParticle__v1_1a7602e298fd114e26a3e530633e497050">operator=</reimplementedby>
        <reimplementedby refid="d8/d38/classxAOD_1_1MissingETComponent__v1_1af65ce358a105ca7da8e06d115a308acc">operator=</reimplementedby>
        <reimplementedby refid="d5/d15/classxAOD_1_1MissingETAssociation__v1_1ab972f478b8964041f4244562670b2ac0">operator=</reimplementedby>
        <reimplementedby refid="dd/d06/classxAOD_1_1MissingET__v1_1ad8d6930f3660dc6672995e056dfe09f2">operator=</reimplementedby>
        <reimplementedby refid="d0/d7e/classxAOD_1_1LumiBlockRange__v1_1a29c81beea8b3d41a6c99a611b6d7e74d">operator=</reimplementedby>
        <reimplementedby refid="db/d9c/classxAOD_1_1Jet__v1_1aaf4ace5c5e7e8efb104d783e107f1ba8">operator=</reimplementedby>
        <reimplementedby refid="df/df1/classxAOD_1_1Photon__v1_1a540c991d01ca45db43d46035f8ad6eeb">operator=</reimplementedby>
        <reimplementedby refid="d3/da7/classxAOD_1_1Electron__v1_1a23218cf2fbf6fc29d3ebdea5b443be98">operator=</reimplementedby>
        <reimplementedby refid="d5/d4c/classxAOD_1_1Egamma__v1_1ab0ba0e6120b3eea36befb17bbf31906d">operator=</reimplementedby>
        <reimplementedby refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa30ef130e947c9e5226ffef1567e0d22">operator=</reimplementedby>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which we&apos;re assigning.</para></parameterdescription>
</parameteritem>
</parameterlist>
We don&apos;t copy container/index, as assignment doesn&apos;t change where this object is. However, if we have aux data, then we copy aux data if we&apos;re copying from an object that also has it; otherwise, if we&apos;re copying from an object with no aux data, then we clear ours. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="203" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="76" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a0b6a5f12eb826137b6d218f5738bb0b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::~AuxElement</definition>
        <argsstring>()</argsstring>
        <name>~AuxElement</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Any private store is deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="211" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
        <definition>SG::AuxVectorData * SG::AuxElement::container</definition>
        <argsstring>()</argsstring>
        <name>container</name>
        <briefdescription>
<para>Return the container holding this element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="217" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a45f6f3563f9c8f088e4b840f81103588" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
        <definition>const SG::AuxVectorData * SG::AuxElement::container</definition>
        <argsstring>() const </argsstring>
        <name>container</name>
        <briefdescription>
<para>Return the container holding this element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="223" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t SG::AuxElement::index</definition>
        <argsstring>() const </argsstring>
        <name>index</name>
        <briefdescription>
<para>Return the index of this element within its container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="229" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxElement::auxdata</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>auxdata</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="691" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="657" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a7aaa8e9eb54091ab7ee43bb7c73918e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxElement::auxdata</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname)</argsstring>
        <name>auxdata</name>
        <reimplementedby refid="d5/d4c/classxAOD_1_1IParticle_1a27c59a50a203be500dae35e8ab217c75">auxdata</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="707" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="675" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1acd13909ea46d99e1b502834f133a159c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::const_reference_type SG::AuxElement::auxdata</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>auxdata</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> or <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> classes above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="721" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="693" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a5279e0349d690c26121f60b5a8778322" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::const_reference_type SG::AuxElement::auxdata</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname) const </argsstring>
        <name>auxdata</name>
        <reimplementedby refid="d5/d4c/classxAOD_1_1IParticle_1a523f65a37d801b93f9334dc555257ef6">auxdata</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> or <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> classes above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="737" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="711" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a1fc119dd13bd2c74f2ce4f2ba19c8898" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::const_reference_type SG::AuxElement::auxdataConst</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>auxdataConst</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="751" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1afa20cbd90cdb931e16c2751709e35271" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::const_reference_type SG::AuxElement::auxdataConst</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname) const </argsstring>
        <name>auxdataConst</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Fetch an aux data variable, as a const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="767" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="747" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1af727b22ab51f1d848fc3cf59065b99ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxElement::isAvailable</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailable</name>
        <reimplementedby refid="d5/d4c/classxAOD_1_1IParticle_1a73d35d149fce4bcc1ce55da0faf8e0d5">isAvailable</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Check if an aux variable is available for reading. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="782" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="765" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a864fc1dab026cbcf20b2c7e3904b89a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxElement::isAvailableWritable</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailableWritable</name>
        <reimplementedby refid="d5/d4c/classxAOD_1_1IParticle_1a0b30769b501e807f246424b3a8fa20da">isAvailableWritable</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Check if an aux variable is available for writing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="797" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="783" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a5c56e0b548ba0f0fa6eba200defaa44d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxElement::isAvailableWritableAsDecoration</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailableWritableAsDecoration</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Check if an aux variable is available for writing as a decoration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="812" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="801" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1af85b897bffef87879e0ed6a58428a60b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxElement::auxdecor</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>auxdecor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Fetch an aux decoration, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above.</para><para>If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above.</para><para>If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="830" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="824" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a6c8fc3d315a5ec0633e7ae6a2b26a432" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxElement::auxdecor</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname) const </argsstring>
        <name>auxdecor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Fetch an aux decoration, as a non-const reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method has to translate from the aux data name to the internal representation each time it is called. Using this method inside of loops is discouraged; instead use the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> class above.</para><para>If the container is locked, this will allow fetching only variables that do not yet exist (in which case they will be marked as decorations) or variables already marked as decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="850" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="846" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::makePrivateStore</definition>
        <argsstring>()</argsstring>
        <name>makePrivateStore</name>
        <briefdescription>
<para>Create a new (empty) private store for this object. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object is already associated with a store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="859" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1ad2eaf2e38536e93c05aebaf1218516a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::AuxElement::makePrivateStore</definition>
        <argsstring>(const U1 &amp;other)</argsstring>
        <name>makePrivateStore</name>
        <param>
          <type>const U1 &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create a new private store for this object and copy aux data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which aux data should be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object is already associated with a store.</para><para>If <computeroutput>other</computeroutput> is an object that has aux data, then those data will be copied; otherwise, nothing will be done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="873" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="865" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a164f94b3ddbbc773ba8beefdb7cb8677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::AuxElement::makePrivateStore</definition>
        <argsstring>(const U1 *other)</argsstring>
        <name>makePrivateStore</name>
        <param>
          <type>const U1 *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create a new private store for this object and copy aux data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which aux data should be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object is already associated with a store.</para><para>If <computeroutput>other</computeroutput> is an object that has aux data, then those data will be copied; otherwise, nothing will be done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="887" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="885" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::releasePrivateStore</definition>
        <argsstring>()</argsstring>
        <name>releasePrivateStore</name>
        <briefdescription>
<para>Release and free any private store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object does not have a private store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="896" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="104" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setStore</definition>
        <argsstring>(const SG::IConstAuxStore *store)</argsstring>
        <name>setStore</name>
        <param>
          <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
If store is nonzero, this adds a standalone store to the object. The object must not be in a container and must not have a private store. If store is zero, this removes a standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="907" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a9cc58e245a417833f297e836d9559a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setStore</definition>
        <argsstring>(SG::IAuxStore *store)</argsstring>
        <name>setStore</name>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
If store is nonzero, this adds a standalone store to the object. The object must not be in a container and must not have a private store. If store is zero, this removes a standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="918" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a4bdca4ef5f1df892b5dc9742644444b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setStore</definition>
        <argsstring>(const DataLink&lt; SG::IConstAuxStore &gt; &amp;store)</argsstring>
        <name>setStore</name>
        <param>
          <type>const <ref refid="da/da2/classDataLink" kindref="compound">DataLink</ref>&lt; <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> &gt; &amp;</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
If store is nonzero, this adds a standalone store to the object. The object must not be in a container and must not have a private store. If store is zero, this removes a standalone store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Link to the new store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="929" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a3079709e44e8ac7452c05454f4994ce9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setConstStore</definition>
        <argsstring>(const SG::IConstAuxStore *store)</argsstring>
        <name>setConstStore</name>
        <param>
          <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Synonym for <computeroutput>setStore</computeroutput> with <computeroutput><ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">IConstAuxStore</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="936" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="898" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a68b13428943609fd2b56c35c9dec85b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setNonConstStore</definition>
        <argsstring>(SG::IAuxStore *store)</argsstring>
        <name>setNonConstStore</name>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Synonym for <computeroutput>setStore</computeroutput> with <computeroutput><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">IAuxStore</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="943" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::usingPrivateStore</definition>
        <argsstring>() const </argsstring>
        <name>usingPrivateStore</name>
        <briefdescription>
<para>Test to see if this object is currently using a private store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="949" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::usingStandaloneStore</definition>
        <argsstring>() const </argsstring>
        <name>usingStandaloneStore</name>
        <briefdescription>
<para>Test to see if this object is currently using a standalone store. </para>        </briefdescription>
        <detaileddescription>
<para>Test to see if this object is currently using a private store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="955" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
        <definition>const SG::IConstAuxStore * SG::AuxElement::getConstStore</definition>
        <argsstring>() const </argsstring>
        <name>getConstStore</name>
        <briefdescription>
<para>Return the current store, as a const interface. </para>        </briefdescription>
        <detaileddescription>
<para>This will be non-zero if either a const or non-const store is associated with this object. This will fetch either a private or standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="965" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="198" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
        <definition>SG::IAuxStore * SG::AuxElement::getStore</definition>
        <argsstring>() const </argsstring>
        <name>getStore</name>
        <briefdescription>
<para>Return the current store, as a non-const interface. </para>        </briefdescription>
        <detaileddescription>
<para>This will be non-zero if a non-const store is associated with this object. This will fetch either a private or standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="974" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::clearCache</definition>
        <argsstring>()</argsstring>
        <name>clearCache</name>
        <briefdescription>
<para>Clear the cached aux data pointers. </para>        </briefdescription>
        <detaileddescription>
<para>You should call this any time something changes in the aux store that could invalidate the vector pointers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="983" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref> &amp;</type>
        <definition>const SG::auxid_set_t &amp; SG::AuxElement::getAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getAuxIDs</name>
        <briefdescription>
<para>Return a set of identifiers for existing data items for this object. </para>        </briefdescription>
        <detaileddescription>
<para>If this object has a private or standalone store, then information from that will be returned. Otherwise, if this element is part of a container, then information for the container will be returned. Otherwise, return an empty set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="995" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="242" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::hasStore</definition>
        <argsstring>() const </argsstring>
        <name>hasStore</name>
        <briefdescription>
<para>Return true if this object has an associated store. </para>        </briefdescription>
        <detaileddescription>
<para>This will be true for either a private or standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1003" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::hasNonConstStore</definition>
        <argsstring>() const </argsstring>
        <name>hasNonConstStore</name>
        <briefdescription>
<para>Return true if this object has an associated non-const store. </para>        </briefdescription>
        <detaileddescription>
<para>This will be true for either a private or standalone store. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1011" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="271" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a71044a012a37af1bb0b6fab3d3ea1230" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::clearDecorations</definition>
        <argsstring>() const </argsstring>
        <name>clearDecorations</name>
        <briefdescription>
<para>Clear all decorations. </para>        </briefdescription>
        <detaileddescription>
<para>Erase all decorations from an associated store, restoring the state to when <computeroutput>lock</computeroutput> was called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1020" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="285" bodyend="289"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a35d5acb51614bdb906daebc1b51ffa6c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::AuxElement</definition>
        <argsstring>(SG::AuxVectorData *container, size_t index)</argsstring>
        <name>AuxElement</name>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Constructor with explicit container / index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container of which this element will be a part. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of this element within the container.</para></parameterdescription>
</parameteritem>
</parameterlist>
This does not make any changes to aux data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1035" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a03a0c152e993dbc79fdcb17e7585abba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::releasePrivateStoreForDtor</definition>
        <argsstring>()</argsstring>
        <name>releasePrivateStoreForDtor</name>
        <briefdescription>
<para>Out-of-line portion of destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Delete a private store if we have one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1044" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a82a11adb02c0af00ad03efc784a063fe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::setIndex</definition>
        <argsstring>(size_t index, SG::AuxVectorData *container)</argsstring>
        <name>setIndex</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Set the index/container for this element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of this object within the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container holding this object. May be null if this object is being removed from a container.</para></parameterdescription>
</parameteritem>
</parameterlist>
Usually this simply sets the index and container members of this object. However, in the case where this object has an associated private store, then we need to deal with releasing the store if the object is being added to a container, or making a new store if the object is being removed from a container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1060" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="929" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a703770e2aabc48605ce70c9f465b66f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::setIndexPrivate</definition>
        <argsstring>(size_t index, SG::AuxVectorData *container)</argsstring>
        <name>setIndexPrivate</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">SG::AuxVectorData</ref> *</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Set the index/container for this element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of this object within the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container holding this object. May be null if this object is being removed from a container.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is called from <computeroutput>setIndex</computeroutput> when we have a private store to deal with. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1072" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="358" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a812bd96bad46874930dfac0e47adc282" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::makePrivateStore1</definition>
        <argsstring>(const void *)</argsstring>
        <name>makePrivateStore1</name>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
<para>Create a new private store for this object and copy aux data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which aux data should be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object is already associated with a store.</para><para>This overload handles the case where <computeroutput>other</computeroutput> does not have aux data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1084" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="952" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a314ef9dae852e5733c64dadc3dfda4c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::makePrivateStore1</definition>
        <argsstring>(const AuxElement *other)</argsstring>
        <name>makePrivateStore1</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create a new private store for this object and copy aux data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which aux data should be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput><ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound">ExcBadPrivateStore</ref></computeroutput> will be thrown if this object is already associated with a store.</para><para>This overload handles the case where <computeroutput>other</computeroutput> does have aux data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1096" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="409" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a0ea0dd0e204a2c8dc7753dcf2fdadfe9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dde/classSG_1_1AuxElementStandaloneData" kindref="compound">AuxElementStandaloneData</ref> *</type>
        <definition>AuxElementStandaloneData * SG::AuxElement::setStore1</definition>
        <argsstring>(const SG::IConstAuxStore *store)</argsstring>
        <name>setStore1</name>
        <param>
          <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
Helper for <computeroutput>setStore</computeroutput>. Creates the <computeroutput><ref refid="d5/dde/classSG_1_1AuxElementStandaloneData" kindref="compound">AuxElementStandaloneData</ref></computeroutput> object if needed and returns it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
Helper for <computeroutput>setStore</computeroutput>. Creates the  <ref refid="d5/dde/classSG_1_1AuxElementStandaloneData" kindref="compound">AuxElementStandaloneData</ref> object if needed and returns it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1106" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="314" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a1554c3bc1a03585ae074ee155c01f61e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::clearAux</definition>
        <argsstring>()</argsstring>
        <name>clearAux</name>
        <briefdescription>
<para>Clear all aux data associated with this element. </para>        </briefdescription>
        <detaileddescription>
<para>If this object has no associated store, this does nothing. If the associated aux data is const, this throws <computeroutput><ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound">ExcConstAuxData</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="423" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1aae02f9d0b6d698ea224df9779874be7a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxElement::copyAux</definition>
        <argsstring>(const AuxElement &amp;other)</argsstring>
        <name>copyAux</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy aux data from another object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object from which to copy.</para></parameterdescription>
</parameteritem>
</parameterlist>
If this object has no associated store, this does nothing. If the associated aux data is const, this throws <computeroutput><ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound">ExcConstAuxData</ref></computeroutput>.</para><para>All aux data items from <computeroutput>other</computeroutput> are copied to this object. Any aux data items associated with this object that are not present in <computeroutput>other</computeroutput> are cleared. (If <computeroutput>other</computeroutput> has no aux data, then all aux data items for this object are cleared.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1130" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxElement.cxx" bodystart="451" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="dc/db0/classSG_1_1AuxElement_1a298014ace27df6502ff48ad8957b1c62" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::privateDataValid</definition>
        <argsstring>() const </argsstring>
        <name>privateDataValid</name>
        <briefdescription>
<para>Helper to test if m_privateData is valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="1136" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="962" bodyend="965"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for elements of a container that can have aux data. </para>    </briefdescription>
    <detaileddescription>
<para>Classes that want to have associated auxiliary data should derive from this class. (It is also possible to use this class directly, if you want a container that _only_ stores auxiliary data.)</para><para>The first thing that happens when you derive from <computeroutput><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref></computeroutput> is that when an object is inserted into a <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput>, the vector will maintain information in the object telling were it is within the vector. For example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;SG::AuxElement&gt;</ref><sp/>v<sp/>(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v[1]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" kindref="member" tooltip="Return the index of this element within its container.">index</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]=&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>==<sp/>&amp;v);</highlight></codeline>
</programlisting></para><para>As long as you don&apos;t use <computeroutput><ref refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" kindref="member">DataVector::stdcont</ref></computeroutput> or use unsafe casts, <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> will correctly maintain this information.</para><para>When an object deriving from <computeroutput><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref></computeroutput> is in a <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> it may have auxiliary data associated with it; that is, named data objects of arbitrary type. The recommended way of accessing auxiliary data is through the <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> and <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> classes, which cache the lookup between the aux data item name and its internal representation. The difference between these two is that <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> allows only const access to the element, while <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput>, which derives from it, allows non-const access as well. <ref refid="d4/dc4/structA" kindref="compound">A</ref> given name must always have the same type, no matter where it is used (even across different classes); otherwise, an exception will be thrown. To help prevent conflicts between different classes, aux data item names may be optionally qualified with a class name. Here&apos;s an example of using <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref>:</computeroutput> </para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>need<sp/>to<sp/>do<sp/>this<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Myclass::ConstAccessor&lt;int&gt;<sp/>vint1<sp/>(</highlight><highlight class="stringliteral">&quot;myInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Myclass*<sp/>m<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>vint1<sp/>(*m);</highlight></codeline>
</programlisting></para><para>The <computeroutput>auxdata</computeroutput> methods can be used as a shortcut for this, but that&apos;s not recommended for anything for which performance is an issue.</para><para>You can also define getters/setters in your class:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Myclass<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_x()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ConstAccessor&lt;int&gt;<sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Myclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>get_x()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;int&gt;<sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Myclass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
</programlisting></para><para>In addition, one sometimes wants to add additional auxiliary data to an existing const container; for example, after a container has been retrieved from StoreGate. This is called `decoration&apos;, and is handled by the <computeroutput><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound">Decorator</ref></computeroutput> object, which is much like <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput> and <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput>. The difference is that <computeroutput><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound">Decorator</ref></computeroutput> can take a const container and return a non-const, modifiable reference. If the container has been locked by calling <computeroutput>StoreGateSvc::setConst</computeroutput>, then this is allowed only if this is a new auxiliary item, in which case it is marked as a decoration, or if it is already marked as a decoration. This prevents changing existing variables in a locked container. An <computeroutput>auxdecor</computeroutput> method is also available, analogous to <computeroutput>auxdata</computeroutput>.</para><para>In addition to the above, the class <computeroutput><ref refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kindref="compound">TypelessConstAccessor</ref></computeroutput> is a non-templated class that allows access to auxiliary data items directly as a `void *`. This is useful for code which operates on auxiliary data generically; it shouldn&apos;t really be used in other contexts.</para><para>Normally, an object can have auxiliary data only when it is part of a container. But sometimes it is useful to be able to associate aux data with an object before it has been added to a container. You can enable this by creating a `private store&apos; for the object with <computeroutput>makePrivateStore</computeroutput>. This can optionally take an argument from which aux data should be copied. (Using a private store adds overhead, which is why it is not enabled by default.) Example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Myclass<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Myclass::Accessor&lt;int&gt;<sp/>myint<sp/>(</highlight><highlight class="stringliteral">&quot;myint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Myclass*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Myclass;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>m-&gt;makePrivateStore();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>myint(*m)<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Myclass&gt;</ref><sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(m);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert<sp/>(myint(v[0])<sp/>==<sp/>10);</highlight></codeline>
</programlisting></para><para>When an object with a private store is added to a container, the aux data is copied to the container and the private store is released. However, the fact that we had a private store is remembered; if the object is later removed from the container, the private store will be remade, and the aux data will be copied back from the container to the private store. To explicitly release the private store (so that it won&apos;t come back automatically), call <computeroutput>releasePrivateStore</computeroutput>.</para><para>If you add <computeroutput>makePrivateStore</computeroutput> calls to the constructors of your class, then you should be able to treat aux data as if it were part of the object itself; the required copying will be handled automatically.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Myclass<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Myclass()<sp/>{<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Myclass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Myclass*<sp/>other)<sp/>{<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>(other);<sp/>}</highlight></codeline>
</programlisting></para><para>The <computeroutput><ref refid="df/dbd/classSG_1_1AuxElementComplete" kindref="compound">SG::AuxElementComplete</ref></computeroutput> template class may be helpful in setting this up.</para><para>It is also possible to associate one of these objects with an external aux data store. This is the `standalone&apos; mode. To do this, use the <computeroutput>setStore</computeroutput> methods, exactly as you would for a container that has aux data. <computeroutput>setStore</computeroutput> will throw an exception if the object is a member of a container or has a private store.</para><para>This class should not have any virtual methods (to avoid forcing derived classes to have a vtable). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1640">
        <label>xAOD::CMMCPHits_v1</label>
        <link refid="d9/d99/classxAOD_1_1CMMCPHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1736">
        <label>xAOD::TrigVertexCounts_v1</label>
        <link refid="d3/d8a/classxAOD_1_1TrigVertexCounts__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1721">
        <label>xAOD::TrigDecision_v1</label>
        <link refid="da/d7b/classxAOD_1_1TrigDecision__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1696">
        <label>xAOD::JetElement_v1</label>
        <link refid="d5/d41/classxAOD_1_1JetElement__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1697">
        <label>xAOD::JetElement_v2</label>
        <link refid="d1/dc0/classxAOD_1_1JetElement__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1713">
        <label>xAOD::SlowMuon_v1</label>
        <link refid="d7/d60/classxAOD_1_1SlowMuon__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1649">
        <label>xAOD::CMXRoI_v1</label>
        <link refid="d5/d01/classxAOD_1_1CMXRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1678">
        <label>xAOD::L2StandAloneMuon_v1</label>
        <link refid="d5/da5/classxAOD_1_1L2StandAloneMuon__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1679">
        <label>xAOD::L2StandAloneMuon_v2</label>
        <link refid="d6/dd6/classxAOD_1_1L2StandAloneMuon__v2"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1641">
        <label>xAOD::CMMEtSums_v1</label>
        <link refid="dc/d52/classxAOD_1_1CMMEtSums__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1627">
        <label>B</label>
        <link refid="d9/db3/structB"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1714">
        <label>xAOD::TrackMeasurementValidation_v1</label>
        <link refid="df/d48/classxAOD_1_1TrackMeasurementValidation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1629">
        <label>C</label>
        <link refid="db/db2/structC"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1628">
        <label>D</label>
        <link refid="d7/db3/structD"/>
        <childnode refid="1627" relation="public-inheritance">
        </childnode>
        <childnode refid="1627" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1708">
        <label>xAOD::MuonSegment_v1</label>
        <link refid="d8/d3e/classxAOD_1_1MuonSegment__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1669">
        <label>xAOD::CaloVertexedTopoCluster</label>
        <link refid="da/d95/classxAOD_1_1CaloVertexedTopoCluster"/>
        <childnode refid="1668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1709">
        <label>xAOD::RODHeader_v1</label>
        <link refid="d9/d91/classxAOD_1_1RODHeader__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1710">
        <label>xAOD::RODHeader_v2</label>
        <link refid="d8/de4/classxAOD_1_1RODHeader__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1647">
        <label>xAOD::CMXJetHits_v1</label>
        <link refid="da/d39/classxAOD_1_1CMXJetHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1738">
        <label>xAOD::TruthEvent_v1</label>
        <link refid="d7/d81/classxAOD_1_1TruthEvent__v1"/>
        <childnode refid="1737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1666">
        <label>xAOD::CaloCluster_v1</label>
        <link refid="dd/d91/classxAOD_1_1CaloCluster__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1662">
        <label>xAOD::ForwardEventInfo_v1</label>
        <link refid="da/d51/classxAOD_1_1ForwardEventInfo__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1668">
        <label>xAOD::CaloVertexedClusterBase</label>
        <link refid="dd/de3/classxAOD_1_1CaloVertexedClusterBase"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1716">
        <label>xAOD::TrackStateValidation_v1</label>
        <link refid="d9/deb/classxAOD_1_1TrackStateValidation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1636">
        <label>xAOD::BCMRawData_v1</label>
        <link refid="d3/d9c/classxAOD_1_1BCMRawData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1639">
        <label>xAOD::BunchConf_v1</label>
        <link refid="d5/d22/classxAOD_1_1BunchConf__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1635">
        <label>xAOD::ALFAData_v1</label>
        <link refid="d5/df4/classxAOD_1_1ALFAData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1644">
        <label>xAOD::CMXCPHits_v1</label>
        <link refid="d8/dd5/classxAOD_1_1CMXCPHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1689">
        <label>xAOD::TrigPhoton_v1</label>
        <link refid="df/d1d/classxAOD_1_1TrigPhoton__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1686">
        <label>xAOD::TrackParticle_v1</label>
        <link refid="d9/d1d/classxAOD_1_1TrackParticle__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1667">
        <label>xAOD::CaloTower_v1</label>
        <link refid="d7/d27/classxAOD_1_1CaloTower__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1673">
        <label>xAOD::Electron_v1</label>
        <link refid="d3/da7/classxAOD_1_1Electron__v1"/>
        <childnode refid="1672" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1687">
        <label>xAOD::TrigElectron_v1</label>
        <link refid="db/ddf/classxAOD_1_1TrigElectron__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1674">
        <label>xAOD::Photon_v1</label>
        <link refid="df/df1/classxAOD_1_1Photon__v1"/>
        <childnode refid="1672" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1701">
        <label>xAOD::L1TopoRawData_v1</label>
        <link refid="d8/d83/classxAOD_1_1L1TopoRawData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1632">
        <label>xAOD::AFPData_v1</label>
        <link refid="d0/d71/classxAOD_1_1AFPData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1717">
        <label>xAOD::TrigBphys_v1</label>
        <link refid="d2/dd6/classxAOD_1_1TrigBphys__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1739">
        <label>xAOD::TruthPileupEvent_v1</label>
        <link refid="d1/d99/classxAOD_1_1TruthPileupEvent__v1"/>
        <childnode refid="1737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1690">
        <label>xAOD::TruthParticle_v1</label>
        <link refid="dd/dc2/classxAOD_1_1TruthParticle__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1625">
        <label>AAux</label>
        <link refid="d1/d51/structAAux"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1631">
        <label>Elt</label>
        <link refid="de/d20/classElt"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1694">
        <label>xAOD::JEMRoI_v1</label>
        <link refid="d0/d24/classxAOD_1_1JEMRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1671">
        <label>xAOD::DiTauJet_v1</label>
        <link refid="d7/dba/classxAOD_1_1DiTauJet__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1626">
        <label>BAux</label>
        <link refid="da/d42/structBAux"/>
        <childnode refid="1625" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1648">
        <label>xAOD::CMXJetTob_v1</label>
        <link refid="d4/d7e/classxAOD_1_1CMXJetTob__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1656">
        <label>xAOD::EmTauRoI_v1</label>
        <link refid="d4/d49/classxAOD_1_1EmTauRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1657">
        <label>xAOD::EmTauRoI_v2</label>
        <link refid="da/d1c/classxAOD_1_1EmTauRoI__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1637">
        <label>xAOD::BTagging_v1</label>
        <link refid="de/d87/classxAOD_1_1BTagging__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1624">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="1699">
        <label>xAOD::JetRoI_v1</label>
        <link refid="d3/daa/classxAOD_1_1JetRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1630">
        <label>CAux</label>
        <link refid="df/df0/structCAux"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1700">
        <label>xAOD::JetRoI_v2</label>
        <link refid="da/dbb/classxAOD_1_1JetRoI__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1742">
        <label>xAOD::Vertex_v1</label>
        <link refid="db/dd1/classxAOD_1_1Vertex__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1680">
        <label>xAOD::Muon_v1</label>
        <link refid="d2/d30/classxAOD_1_1Muon__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1665">
        <label>xAOD::IParticle</label>
        <link refid="d5/d4c/classxAOD_1_1IParticle"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1646">
        <label>xAOD::CMXEtSums_v1</label>
        <link refid="da/d64/classxAOD_1_1CMXEtSums__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1638">
        <label>xAOD::BTagVertex_v1</label>
        <link refid="df/d95/classxAOD_1_1BTagVertex__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1735">
        <label>xAOD::TrigTrackCounts_v1</label>
        <link refid="d3/d07/classxAOD_1_1TrigTrackCounts__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1695">
        <label>xAOD::JEMTobRoI_v1</label>
        <link refid="dd/d13/classxAOD_1_1JEMTobRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1643">
        <label>xAOD::CMMRoI_v1</label>
        <link refid="db/d09/classxAOD_1_1CMMRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1683">
        <label>xAOD::PFO_v1</label>
        <link refid="db/da5/classxAOD_1_1PFO__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1672">
        <label>xAOD::Egamma_v1</label>
        <link refid="d5/d4c/classxAOD_1_1Egamma__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1734">
        <label>xAOD::TrigT2ZdcSignals_v1</label>
        <link refid="dd/de9/classxAOD_1_1TrigT2ZdcSignals__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1703">
        <label>xAOD::MBTSModule_v1</label>
        <link refid="da/dc5/classxAOD_1_1MBTSModule__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1659">
        <label>xAOD::EventInfo_v1</label>
        <link refid="df/df8/classxAOD_1_1EventInfo__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1702">
        <label>xAOD::LumiBlockRange_v1</label>
        <link refid="d0/d7e/classxAOD_1_1LumiBlockRange__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1655">
        <label>xAOD::CutBookkeeper_v1</label>
        <link refid="d5/db4/classxAOD_1_1CutBookkeeper__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1677">
        <label>xAOD::L2IsoMuon_v1</label>
        <link refid="d1/dac/classxAOD_1_1L2IsoMuon__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1663">
        <label>xAOD::HIEventShape_v1</label>
        <link refid="d0/d63/classxAOD_1_1HIEventShape__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1664">
        <label>xAOD::HIEventShape_v2</label>
        <link refid="df/d4d/classxAOD_1_1HIEventShape__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1651">
        <label>xAOD::CPMRoI_v1</label>
        <link refid="dc/d40/classxAOD_1_1CPMRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1682">
        <label>xAOD::Particle_v1</label>
        <link refid="d3/db9/classxAOD_1_1Particle__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1733">
        <label>xAOD::TrigT2MbtsBits_v1</label>
        <link refid="db/d50/classxAOD_1_1TrigT2MbtsBits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1715">
        <label>xAOD::TrackParticleClusterAssociation_v1</label>
        <link refid="d0/d48/classxAOD_1_1TrackParticleClusterAssociation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1723">
        <label>xAOD::TriggerTower_v1</label>
        <link refid="d9/d6d/classxAOD_1_1TriggerTower__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1728">
        <label>xAOD::TrigRingerRings_v1</label>
        <link refid="d0/d9f/classxAOD_1_1TrigRingerRings__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1688">
        <label>xAOD::TriggerTower_v2</label>
        <link refid="d7/d45/classxAOD_1_1TriggerTower__v2"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1729">
        <label>xAOD::TrigRingerRings_v2</label>
        <link refid="d7/d25/classxAOD_1_1TrigRingerRings__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1645">
        <label>xAOD::CMXCPTob_v1</label>
        <link refid="d6/dcc/classxAOD_1_1CMXCPTob__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1670">
        <label>xAOD::CompositeParticle_v1</label>
        <link refid="da/d5f/classxAOD_1_1CompositeParticle__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1727">
        <label>xAOD::TrigPassBits_v1</label>
        <link refid="d9/dc1/classxAOD_1_1TrigPassBits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1704">
        <label>xAOD::MissingET_v1</label>
        <link refid="dd/d06/classxAOD_1_1MissingET__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1725">
        <label>xAOD::TrigMissingET_v1</label>
        <link refid="d5/d0a/classxAOD_1_1TrigMissingET__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1691">
        <label>xAOD::JEMEtSums_v1</label>
        <link refid="d0/da2/classxAOD_1_1JEMEtSums__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1692">
        <label>xAOD::JEMEtSums_v2</label>
        <link refid="dd/d63/classxAOD_1_1JEMEtSums__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1732">
        <label>xAOD::TrigSpacePointCounts_v1</label>
        <link refid="d3/dc1/classxAOD_1_1TrigSpacePointCounts__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1705">
        <label>xAOD::MissingETAssociation_v1</label>
        <link refid="d5/d15/classxAOD_1_1MissingETAssociation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1726">
        <label>xAOD::TrigNavigation_v1</label>
        <link refid="d9/db6/classxAOD_1_1TrigNavigation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1650">
        <label>xAOD::CPMHits_v1</label>
        <link refid="da/d15/classxAOD_1_1CPMHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1718">
        <label>xAOD::TrigCaloCluster_v1</label>
        <link refid="d7/dad/classxAOD_1_1TrigCaloCluster__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1633">
        <label>xAOD::AFPSiHit_v1</label>
        <link refid="d4/dae/classxAOD_1_1AFPSiHit__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1730">
        <label>xAOD::TrigRNNOutput_v1</label>
        <link refid="dc/db7/classxAOD_1_1TrigRNNOutput__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1731">
        <label>xAOD::TrigRNNOutput_v2</label>
        <link refid="df/dfb/classxAOD_1_1TrigRNNOutput__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1676">
        <label>xAOD::L2CombinedMuon_v1</label>
        <link refid="da/d3e/classxAOD_1_1L2CombinedMuon__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1722">
        <label>xAOD::TriggerMenu_v1</label>
        <link refid="d0/d12/classxAOD_1_1TriggerMenu__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1720">
        <label>xAOD::TrigComposite_v1</label>
        <link refid="de/dd4/classxAOD_1_1TrigComposite__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1740">
        <label>xAOD::TruthMetaData_v1</label>
        <link refid="d2/de3/classxAOD_1_1TruthMetaData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1681">
        <label>xAOD::NeutralParticle_v1</label>
        <link refid="d5/d44/classxAOD_1_1NeutralParticle__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1658">
        <label>xAOD::EnergySumRoI_v1</label>
        <link refid="db/d79/classxAOD_1_1EnergySumRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1634">
        <label>xAOD::AFPTrack_v1</label>
        <link refid="d0/d58/classxAOD_1_1AFPTrack__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1623">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="1624" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1698">
        <label>xAOD::JetEtRoI_v1</label>
        <link refid="da/d26/classxAOD_1_1JetEtRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1707">
        <label>xAOD::MuonRoI_v1</label>
        <link refid="d9/d4f/classxAOD_1_1MuonRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1675">
        <label>xAOD::Jet_v1</label>
        <link refid="db/d9c/classxAOD_1_1Jet__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1741">
        <label>xAOD::TruthVertex_v1</label>
        <link refid="d8/dfa/classxAOD_1_1TruthVertex__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1652">
        <label>xAOD::CPMTobRoI_v1</label>
        <link refid="d4/df9/classxAOD_1_1CPMTobRoI__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1660">
        <label>xAOD::EventShape_v1</label>
        <link refid="d7/d93/classxAOD_1_1EventShape__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1737">
        <label>xAOD::TruthEventBase_v1</label>
        <link refid="df/dad/classxAOD_1_1TruthEventBase__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1706">
        <label>xAOD::MissingETComponent_v1</label>
        <link refid="d8/d38/classxAOD_1_1MissingETComponent__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1693">
        <label>xAOD::JEMHits_v1</label>
        <link refid="dc/d46/classxAOD_1_1JEMHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1724">
        <label>xAOD::TrigHisto2D_v1</label>
        <link refid="dc/d8a/classxAOD_1_1TrigHisto2D__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1653">
        <label>xAOD::CPMTower_v1</label>
        <link refid="db/d35/classxAOD_1_1CPMTower__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1654">
        <label>xAOD::CPMTower_v2</label>
        <link refid="d7/d8c/classxAOD_1_1CPMTower__v2"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1711">
        <label>xAOD::RoiDescriptorStore_v1</label>
        <link refid="d6/d9c/classxAOD_1_1RoiDescriptorStore__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1642">
        <label>xAOD::CMMJetHits_v1</label>
        <link refid="dd/de0/classxAOD_1_1CMMJetHits__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1712">
        <label>xAOD::SCTRawHitValidation_v1</label>
        <link refid="d2/d32/classxAOD_1_1SCTRawHitValidation__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1743">
        <label>xAOD::ZdcModule_v1</label>
        <link refid="d4/d68/classxAOD_1_1ZdcModule__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1719">
        <label>xAOD::TrigEMCluster_v1</label>
        <link refid="d9/dde/classxAOD_1_1TrigEMCluster__v1"/>
        <childnode refid="1718" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1684">
        <label>xAOD::TauJet_v1</label>
        <link refid="d6/d8b/classxAOD_1_1TauJet__v1"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1685">
        <label>xAOD::TauJet_v2</label>
        <link refid="d5/d20/classxAOD_1_1TauJet__v2"/>
        <childnode refid="1665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1661">
        <label>xAOD::FileMetaData_v1</label>
        <link refid="d1/dca/classxAOD_1_1FileMetaData__v1"/>
        <childnode refid="1623" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1756">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="1757">
        <label>Internal::hash_code_base&lt;Value , Value , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="1752">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="1761">
        <label>SG::AuxElementData</label>
        <link refid="dc/dfb/classSG_1_1AuxElementData"/>
        <childnode refid="1746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1755">
        <label>SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="1756" relation="public-inheritance">
        </childnode>
        <childnode refid="1757" relation="public-inheritance">
        </childnode>
        <childnode refid="1758" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1750">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="1751">
        <label>DataLinkBase</label>
        <link refid="dd/d9d/classDataLinkBase"/>
      </node>
      <node id="1745">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="1748">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="1749">
        <label>DataLink&lt; SG::IConstAuxStore &gt;</label>
        <link refid="da/da2/classDataLink"/>
        <childnode refid="1750" relation="public-inheritance">
        </childnode>
        <childnode refid="1751" relation="public-inheritance">
        </childnode>
        <childnode refid="1752" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="1748" relation="usage">
          <edgelabel>m_object</edgelabel>
        </childnode>
      </node>
      <node id="1747">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="1748" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1754">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="1755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1758">
        <label>Internal::map_base&lt;Value , Value , Internal::identity&lt; Value &gt; , unique_keys, hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="1759">
        <label>SG::AuxVectorData::Cache</label>
        <childnode refid="1760" relation="usage">
          <edgelabel>m_cache</edgelabel>
        </childnode>
      </node>
      <node id="1753">
        <label>mutex</label>
      </node>
      <node id="1744">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="1745" relation="public-inheritance">
        </childnode>
        <childnode refid="1746" relation="usage">
          <edgelabel>m_container</edgelabel>
        </childnode>
        <childnode refid="1761" relation="usage">
          <edgelabel>m_privateData</edgelabel>
          <edgelabel>s_privatePlaceholder</edgelabel>
        </childnode>
      </node>
      <node id="1760">
        <label>void</label>
      </node>
      <node id="1746">
        <label>SG::AuxVectorData</label>
        <link refid="db/dd6/classSG_1_1AuxVectorData"/>
        <childnode refid="1747" relation="usage">
          <edgelabel>m_store</edgelabel>
        </childnode>
        <childnode refid="1749" relation="usage">
          <edgelabel>m_constStoreLink</edgelabel>
        </childnode>
        <childnode refid="1748" relation="usage">
          <edgelabel>m_constStore</edgelabel>
        </childnode>
        <childnode refid="1753" relation="usage">
          <edgelabel>m_mutex</edgelabel>
        </childnode>
        <childnode refid="1754" relation="usage">
          <edgelabel>s_emptySet</edgelabel>
        </childnode>
        <childnode refid="1759" relation="usage">
          <edgelabel>m_cache</edgelabel>
          <edgelabel>m_constCache</edgelabel>
          <edgelabel>m_decorCache</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="175" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="173" bodyend="1165"/>
    <listofallmembers>
      <member refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a7aaa8e9eb54091ab7ee43bb7c73918e4" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1acd13909ea46d99e1b502834f133a159c" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5279e0349d690c26121f60b5a8778322" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1fc119dd13bd2c74f2ce4f2ba19c8898" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afa20cbd90cdb931e16c2751709e35271" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af85b897bffef87879e0ed6a58428a60b" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6c8fc3d315a5ec0633e7ae6a2b26a432" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac8345167ba85a0788d804a39b8325a36" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a35d5acb51614bdb906daebc1b51ffa6c" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1554c3bc1a03585ae074ee155c01f61e" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>clearAux</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>clearCache</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a71044a012a37af1bb0b6fab3d3ea1230" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>clearDecorations</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a45f6f3563f9c8f088e4b840f81103588" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aae02f9d0b6d698ea224df9779874be7a" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>copyAux</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>getAuxIDs</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>getConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>getStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>hasNonConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>hasStore</name></member>
      <member refid="df/dca/classSG_1_1IAuxElement_1afdd6ee3469014a690d257119d34ec598" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>IAuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>index</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af727b22ab51f1d848fc3cf59065b99ea" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>isAvailable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a864fc1dab026cbcf20b2c7e3904b89a4" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>isAvailableWritable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5c56e0b548ba0f0fa6eba200defaa44d" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>isAvailableWritableAsDecoration</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac93b1b9dbe66ad0e02eb767cc3860ce9" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>m_container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a50ab0c769c22c99b7f733c6637f14c3f" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>m_index</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4017abd07f196af0b12c8d38a4faefbb" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>m_privateData</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad2eaf2e38536e93c05aebaf1218516a2" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a164f94b3ddbbc773ba8beefdb7cb8677" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a812bd96bad46874930dfac0e47adc282" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>makePrivateStore1</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a314ef9dae852e5733c64dadc3dfda4c0" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>makePrivateStore1</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1ecd49ad16cba61c3131046d8e068650" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>operator=</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a298014ace27df6502ff48ad8957b1c62" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>privateDataValid</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>releasePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a03a0c152e993dbc79fdcb17e7585abba" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>releasePrivateStoreForDtor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aeacb567cc494b4b94acb1221e1708cb1" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>s_privatePlaceholder</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a3079709e44e8ac7452c05454f4994ce9" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>setConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a82a11adb02c0af00ad03efc784a063fe" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>setIndex</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a703770e2aabc48605ce70c9f465b66f1" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>setIndexPrivate</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a68b13428943609fd2b56c35c9dec85b3" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>setNonConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9cc58e245a417833f297e836d9559a32" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4bdca4ef5f1df892b5dc9742644444b8" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a0ea0dd0e204a2c8dc7753dcf2fdadfe9" prot="private" virt="non-virtual"><scope>SG::AuxElement</scope><name>setStore1</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6a154ec406bc6531a348a80e679da31f" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>SG::AuxVectorBase</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4573c8a5a16556f7a1826c502a8a1577" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>SG::AuxVectorBase_test</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>usingPrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>usingStandaloneStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a0b6a5f12eb826137b6d218f5738bb0b1" prot="public" virt="non-virtual"><scope>SG::AuxElement</scope><name>~AuxElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
