<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/db9/AmgMatrixPlugin_8h" kind="file">
    <compoundname>AmgMatrixPlugin.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1a5e3ddd817526972cb14de6bcbe60cec2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const PlainObject</type>
        <definition>const PlainObject unit</definition>
        <argsstring>() const </argsstring>
        <name>unit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a plugin that makes Eigen look like CLHEP &amp; defines some convenience methods unit method - forward normalized() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="16" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1a058f66bdd3e84e8a2ebbe3483f795f82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar mag</definition>
        <argsstring>() const </argsstring>
        <name>mag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mag method - forward to norm() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="21" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1ad7a5fc69adc463741c269bfa632ecf0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar mag2</definition>
        <argsstring>() const </argsstring>
        <name>mag2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mag2 method - forward to norm() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1a50e49073e1e704a98465efb369e92256" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar perp</definition>
        <argsstring>() const </argsstring>
        <name>perp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>perp method - perpenticular length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1ae5b89b18d955354305ae8f773bd8fa58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar perp2</definition>
        <argsstring>() const </argsstring>
        <name>perp2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>perp2 method - perpendicular length squared </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1aab6a330e4d6c5334ffc620088532d92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar perp2</definition>
        <argsstring>(const MatrixBase&lt; Derived &gt; &amp;vec)</argsstring>
        <name>perp2</name>
        <param>
          <type>const MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1ae7919925e1f226d3737d4a449109f59b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar perp</definition>
        <argsstring>(const MatrixBase&lt; Derived &gt; &amp;vec)</argsstring>
        <name>perp</name>
        <param>
          <type>const MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1ab70415d60de431ccd0019342c52a55a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar phi</definition>
        <argsstring>() const </argsstring>
        <name>phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>phi method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1adb69bf2c727c4ec954de95b3673abed2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar theta</definition>
        <argsstring>() const </argsstring>
        <name>theta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>theta method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1ad91b203abf688a61982f976da8a92345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar eta</definition>
        <argsstring>() const </argsstring>
        <name>eta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pseudorapidity method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="68" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1a590f95d0a30afc3eca775465c02f3f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar deltaR</definition>
        <argsstring>(const MatrixBase&lt; Derived &gt; &amp;vec)</argsstring>
        <name>deltaR</name>
        <param>
          <type>const MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1aa651dbdb188a0c72f335f3f7d8c8119a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar</type>
        <definition>Scalar deltaPhi</definition>
        <argsstring>(const MatrixBase&lt; Derived &gt; &amp;vec)</argsstring>
        <name>deltaPhi</name>
        <param>
          <type>const MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1af7e9872423c747d0634004f9e78acab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fillSymmetric</definition>
        <argsstring>(size_t i, size_t j, Scalar value)</argsstring>
        <name>fillSymmetric</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>method to fill symmetrically elments </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1a374ca6decc7545c4e3a72f5c57161a89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>Matrix&lt; Scalar, OtherDerived::RowsAtCompileTime, OtherDerived::RowsAtCompileTime &gt;</type>
        <definition>Matrix&lt;Scalar, OtherDerived::RowsAtCompileTime, OtherDerived::RowsAtCompileTime&gt; similarity</definition>
        <argsstring>(const MatrixBase&lt; OtherDerived &gt; &amp;m) const </argsstring>
        <name>similarity</name>
        <param>
          <type>const MatrixBase&lt; OtherDerived &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>similarity method : yields ms = m*s*m^T </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="dc/db9/AmgMatrixPlugin_8h_1afb0e038c7fcf13ba986c611d0c4660b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>Matrix&lt; Scalar, OtherDerived::RowsAtCompileTime, OtherDerived::RowsAtCompileTime &gt;</type>
        <definition>Matrix&lt;Scalar, OtherDerived::RowsAtCompileTime, OtherDerived::RowsAtCompileTime&gt; similarityT</definition>
        <argsstring>(const MatrixBase&lt; OtherDerived &gt; &amp;m) const </argsstring>
        <name>similarityT</name>
        <param>
          <type>const MatrixBase&lt; OtherDerived &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>similarityT method : yields ms = m^T*s*m </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" line="111" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h" bodystart="110" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>AmgMatrixPlugin.h,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EVENTPRIMITIVES_AMGMATRIXPLUGIN_H</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EVENTPRIMITIVES_AMGMATRIXPLUGIN_H</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Methods<sp/>for<sp/>3D<sp/>vector<sp/>type<sp/>objects<sp/>----------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlainObject<sp/>unit()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*this).normalized();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>mag()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*this).norm();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>mag2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*this).squaredNorm();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>perp()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]+(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>perp2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]+(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>perp2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;Derived&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>tot<sp/>=<sp/>vec.mag2();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tot&gt;0){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>s<sp/>=<sp/>this-&gt;dot(vec);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;mag2()-s*s/tot;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;mag2();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>perp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;Derived&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(this-&gt;perp2(vec));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>phi()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::atan2((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1],(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>theta()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::atan2(std::sqrt((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0]+(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[1]),(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[2]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>eta()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-std::log(std::tan(this-&gt;theta()*.5));<sp/></highlight><highlight class="comment">//TODO:<sp/>slow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>deltaR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;Derived&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>this-&gt;eta()<sp/>-<sp/>vec.eta();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>this-&gt;deltaPhi(vec);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt<sp/>(<sp/>a*a<sp/>+<sp/>b*b<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Scalar<sp/>deltaPhi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;Derived&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;rows()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dphi<sp/>=<sp/>vec.phi()<sp/>-<sp/>this-&gt;phi();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dphi<sp/>&gt;<sp/>M_PI<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dphi<sp/>-=<sp/>M_PI*2;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dphi<sp/>&lt;=<sp/>-M_PI<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dphi<sp/>+=<sp/>M_PI*2;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dphi;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Methods<sp/>for<sp/>symmetric<sp/>matrix<sp/>objects<sp/>----------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillSymmetric(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j,<sp/>Scalar<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)(i,j)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)(j,i)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>/**<sp/>similarity<sp/>method<sp/>:<sp/>yields<sp/>ms<sp/>=<sp/>m*s*m^T<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matrix&lt;Scalar,<sp/>OtherDerived::RowsAtCompileTime,<sp/>OtherDerived::RowsAtCompileTime&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>similarity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;OtherDerived&gt;&amp;<sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="103"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m<sp/>*<sp/>(<sp/>this-&gt;derived()<sp/>*<sp/>m.transpose()<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived&gt;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matrix&lt;Scalar,<sp/>OtherDerived::RowsAtCompileTime,<sp/>OtherDerived::RowsAtCompileTime&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>similarityT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixBase&lt;OtherDerived&gt;&amp;<sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.transpose()<sp/>*<sp/>(<sp/>this-&gt;derived()<sp/>*<sp/>m<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgMatrixPlugin.h"/>
  </compounddef>
</doxygen>
