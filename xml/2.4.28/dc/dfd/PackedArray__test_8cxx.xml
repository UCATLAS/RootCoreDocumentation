<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/dfd/PackedArray__test_8cxx" kind="file">
    <compoundname>PackedArray_test.cxx</compoundname>
    <includes refid="de/d5f/PackedArray_8h" local="yes">CxxUtils/PackedArray.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">vector</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">climits</includes>
    <includes local="no">cstdlib</includes>
    <incdepgraph>
      <node id="113725">
        <label>cassert</label>
      </node>
      <node id="113726">
        <label>stdexcept</label>
      </node>
      <node id="113723">
        <label>vector</label>
      </node>
      <node id="113721">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx</label>
        <link refid="PackedArray_test.cxx"/>
        <childnode refid="113722" relation="include">
        </childnode>
        <childnode refid="113725" relation="include">
        </childnode>
        <childnode refid="113723" relation="include">
        </childnode>
        <childnode refid="113726" relation="include">
        </childnode>
        <childnode refid="113727" relation="include">
        </childnode>
        <childnode refid="113728" relation="include">
        </childnode>
      </node>
      <node id="113728">
        <label>cstdlib</label>
      </node>
      <node id="113724">
        <label>cstddef</label>
      </node>
      <node id="113727">
        <label>climits</label>
      </node>
      <node id="113722">
        <label>CxxUtils/PackedArray.h</label>
        <link refid="de/d5f/PackedArray_8h"/>
        <childnode refid="113723" relation="include">
        </childnode>
        <childnode refid="113724" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/dfd/PackedArray__test_8cxx_1aa019fd0be6b10ca245410035439df7ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare</definition>
        <argsstring>(const PackedArray &amp;arr, const std::vector&lt; int &gt; &amp;v)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound">PackedArray</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfd/PackedArray__test_8cxx_1af04d3b316c98782933f7b7a606207b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testit</definition>
        <argsstring>(PackedArray &amp;arr)</argsstring>
        <name>testit</name>
        <param>
          <type><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound">PackedArray</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" bodystart="31" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfd/PackedArray__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" line="191" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfd/PackedArray__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" line="202" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx" bodystart="201" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression test for PackedArray class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Feb, 2007 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>PackedArray_test.cxx,v<sp/>1.2<sp/>2008-12-12<sp/>04:26:20<sp/>ssnyder<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d5f/PackedArray_8h" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">CxxUtils/PackedArray.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">CxxUtils::PackedArray</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref>&amp;<sp/>arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmask<sp/>=<sp/>(1&lt;&lt;arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a7e0ce2643308d9bafb06c718dd654ca4" kindref="member" tooltip="Return the bitsize of the container.">bitsize</ref>())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>v.size());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[i]<sp/>==<sp/>(v[i]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testit<sp/>(<ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref>&amp;<sp/>arr)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize<sp/>=<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a7e0ce2643308d9bafb06c718dd654ca4" kindref="member" tooltip="Return the bitsize of the container.">bitsize</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmask<sp/>=<sp/>(1&lt;&lt;bitsize)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa16e46c9361d4068cb9079c6fd9332d1" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/>==<sp/>v.max_size());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref>&amp;<sp/>carr<sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ad4ccffe8f87d1ce9ba976ec2235493f0" kindref="member" tooltip="Returns true if the collection is empty.">empty</ref>());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa22f36beb2d58ab292b3279b53a99388" kindref="member" tooltip="Set the container to multiple copies of the same value.">assign</ref><sp/>(10,<sp/>17);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>v.assign<sp/>(10,<sp/>17);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>assert<sp/>(!arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ad4ccffe8f87d1ce9ba976ec2235493f0" kindref="member" tooltip="Returns true if the collection is empty.">empty</ref>());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ae0a70e013bcf51f200085dd52160ed49" kindref="member" tooltip="Attempt to preallocate enough memory for a specified number of elements.">reserve</ref><sp/>(100);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nper<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>*<sp/>CHAR_BIT;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ad98897a69438ff0fd403c8b15f50e53c" kindref="member" tooltip="Returns the total number of elements that the collection can hold before needing...">capacity</ref>()<sp/>==</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(size_t)(((100<sp/>*<sp/>bitsize)<sp/>+<sp/>nper-1)<sp/>/<sp/>nper)<sp/>*<sp/>nper<sp/>/<sp/>bitsize);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(x);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aacc10e0ade6ee9865447712497b73359" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(x);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>v.pop_back();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ad2f168a6a1068d3f80fb5aa65ceb9d98" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert<sp/>(carr.front()<sp/>==<sp/>(cv.front()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a58ef50783b1e53493de2db72eb0fea78" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>==<sp/>(v.front()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a58ef50783b1e53493de2db72eb0fea78" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>v.front()<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert<sp/>(carr.front()<sp/>==<sp/>(cv.front()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a58ef50783b1e53493de2db72eb0fea78" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>==<sp/>(v.front()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>assert<sp/>(carr.back()<sp/>==<sp/>(cv.back()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a0c9798626d33866ff351676aa96779bd" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>==<sp/>(v.back()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a0c9798626d33866ff351676aa96779bd" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>v.back()<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert<sp/>(carr.back()<sp/>==<sp/>(cv.back()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a0c9798626d33866ff351676aa96779bd" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>==<sp/>(v.back()<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>std::rand()<sp/>%<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(carr[j]<sp/>==<sp/>(cv[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[j]<sp/>==<sp/>(v[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[j]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>v[j]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(carr[j]<sp/>==<sp/>(cv[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[j]<sp/>==<sp/>(v[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>std::rand()<sp/>%<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(carr.at(j)<sp/>==<sp/>(cv.at(j)<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" kindref="member" tooltip="Access an element, as an rvalue.">at</ref>(j)<sp/>==<sp/>(v.at(j)<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" kindref="member" tooltip="Access an element, as an rvalue.">at</ref>(j)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>v.at(j)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(carr.at(j)<sp/>==<sp/>(cv.at(j)<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" kindref="member" tooltip="Access an element, as an rvalue.">at</ref>(j)<sp/>==<sp/>(v.at(j)<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" kindref="member" tooltip="Access an element, as an rvalue.">at</ref><sp/>(100000);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>e)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>carr.at<sp/>(100000);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>e)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>std::rand()<sp/>%<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a9ba7922bd02894fca2ff37c0f79b60ec" kindref="member" tooltip="Return the entry at index n.">get</ref>(j)<sp/>==<sp/>(v[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ae7de942bfcab31d447d6f538b9af4660" kindref="member" tooltip="Set the entry at index n.">set</ref><sp/>(j,<sp/>x);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>v[j]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a9ba7922bd02894fca2ff37c0f79b60ec" kindref="member" tooltip="Return the entry at index n.">get</ref>(j)<sp/>==<sp/>(v[j]<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inc<sp/><sp/>=<sp/>std::rand()%100<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a910eaa0dc483ad3de182412c450abc87" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref><sp/>(sz<sp/>+<sp/>inc);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize<sp/>(sz<sp/>+<sp/>inc);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[sz<sp/>+<sp/>inc/2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a910eaa0dc483ad3de182412c450abc87" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref><sp/>(sz-31);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize<sp/>(sz-31);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inc<sp/><sp/>=<sp/>std::rand()%100<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a910eaa0dc483ad3de182412c450abc87" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref><sp/>(sz<sp/>+<sp/>inc,<sp/>x);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize<sp/>(sz<sp/>+<sp/>inc,<sp/>x);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[sz<sp/>+<sp/>inc/2]<sp/>==<sp/>(x&amp;bitmask));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1aa22f36beb2d58ab292b3279b53a99388" kindref="member" tooltip="Set the container to multiple copies of the same value.">assign</ref><sp/>(10,<sp/>0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>v.assign<sp/>(10,<sp/>0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>compare<sp/>(arr,<sp/>v);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref><sp/>arr2<sp/>(bitsize,<sp/>10,<sp/>0,<sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a26d189125282ac33fbc4d7ebb8fa55f8" kindref="member" tooltip="Returns the allocator of the underlying vector.">get_allocator</ref>());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert<sp/>(arr2.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr2[i]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>std::rand();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref><sp/>arr3<sp/>(bitsize,<sp/>10,<sp/>x);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>assert<sp/>(arr3.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr3[i]<sp/>==<sp/>(x<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ab59e60439cfa8d3922a928f7e328e627" kindref="member" tooltip="Swap this collection with another.">swap</ref><sp/>(arr3);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(arr[i]<sp/>==<sp/>(x<sp/>&amp;<sp/>bitmask));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>compare<sp/>(arr3,<sp/>v);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a20429677f6445adba5fc120ba87baeda" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1ad4ccffe8f87d1ce9ba976ec2235493f0" kindref="member" tooltip="Returns true if the collection is empty.">empty</ref>());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>assert<sp/>(arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">PackedArray</ref><sp/>arr<sp/>(10);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>testit<sp/>(arr);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a1a411b8c31cb1119611fd39bc1fae431" kindref="member" tooltip="Change the bitsize of the container.">set_bitsize</ref><sp/>(20);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>testit<sp/>(arr);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>arr.<ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a1a411b8c31cb1119611fd39bc1fae431" kindref="member" tooltip="Change the bitsize of the container.">set_bitsize</ref><sp/>(3);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>testit<sp/>(arr);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/PackedArray_test.cxx"/>
  </compounddef>
</doxygen>
