<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dc/d66/HLTUtils_8cxx" kind="file">
    <compoundname>HLTUtils.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">vector</includes>
    <includes refid="d6/dc6/TrigConfL1Data_2TrigConfL1Data_2HelperFunctions_8h" local="yes">TrigConfL1Data/HelperFunctions.h</includes>
    <includes refid="d5/db5/HLTChainList_8h" local="yes">TrigConfHLTData/HLTChainList.h</includes>
    <includes refid="d4/d72/HLTChain_8h" local="yes">TrigConfHLTData/HLTChain.h</includes>
    <includes refid="d7/d7c/HLTSignature_8h" local="yes">TrigConfHLTData/HLTSignature.h</includes>
    <includes refid="d6/dfe/HLTSequenceList_8h" local="yes">TrigConfHLTData/HLTSequenceList.h</includes>
    <includes refid="db/d1d/HLTSequence_8h" local="yes">TrigConfHLTData/HLTSequence.h</includes>
    <includes refid="dc/d9c/HLTTriggerElement_8h" local="yes">TrigConfHLTData/HLTTriggerElement.h</includes>
    <includes refid="df/dc9/HLTFrame_8h" local="yes">TrigConfHLTData/HLTFrame.h</includes>
    <includes refid="d8/d48/HLTUtils_8h" local="yes">TrigConfHLTData/HLTUtils.h</includes>
    <incdepgraph>
      <node id="309310">
        <label>list</label>
      </node>
      <node id="309301">
        <label>boost/multi_index/ordered_index.hpp</label>
      </node>
      <node id="309305">
        <label>TrigConfHLTData/HLTSequenceList.h</label>
        <link refid="d6/dfe/HLTSequenceList_8h_source"/>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
        <childnode refid="309306" relation="include">
        </childnode>
        <childnode refid="309298" relation="include">
        </childnode>
        <childnode refid="309299" relation="include">
        </childnode>
        <childnode refid="309300" relation="include">
        </childnode>
        <childnode refid="309301" relation="include">
        </childnode>
      </node>
      <node id="309296">
        <label>TrigConfHLTData/HLTLevel.h</label>
        <link refid="dc/d46/HLTLevel_8h_source"/>
        <childnode refid="309279" relation="include">
        </childnode>
      </node>
      <node id="309281">
        <label>iterator</label>
      </node>
      <node id="309274">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx</label>
        <link refid="HLTUtils.cxx"/>
        <childnode refid="309275" relation="include">
        </childnode>
        <childnode refid="309276" relation="include">
        </childnode>
        <childnode refid="309277" relation="include">
        </childnode>
        <childnode refid="309278" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309280" relation="include">
        </childnode>
        <childnode refid="309281" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309283" relation="include">
        </childnode>
        <childnode refid="309288" relation="include">
        </childnode>
        <childnode refid="309291" relation="include">
        </childnode>
        <childnode refid="309304" relation="include">
        </childnode>
        <childnode refid="309305" relation="include">
        </childnode>
        <childnode refid="309306" relation="include">
        </childnode>
        <childnode refid="309307" relation="include">
        </childnode>
        <childnode refid="309308" relation="include">
        </childnode>
        <childnode refid="309313" relation="include">
        </childnode>
      </node>
      <node id="309312">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="309308">
        <label>TrigConfHLTData/HLTFrame.h</label>
        <link refid="df/dc9/HLTFrame_8h_source"/>
        <childnode refid="309297" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309292" relation="include">
        </childnode>
        <childnode refid="309288" relation="include">
        </childnode>
        <childnode refid="309305" relation="include">
        </childnode>
        <childnode refid="309309" relation="include">
        </childnode>
      </node>
      <node id="309284">
        <label>stdint.h</label>
      </node>
      <node id="309278">
        <label>stdexcept</label>
      </node>
      <node id="309279">
        <label>string</label>
      </node>
      <node id="309290">
        <label>map</label>
      </node>
      <node id="309292">
        <label>TrigConfL1Data/TrigConfData.h</label>
        <link refid="da/da8/TrigConfData_8h_source"/>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
      </node>
      <node id="309311">
        <label>exception</label>
      </node>
      <node id="309297">
        <label>fstream</label>
      </node>
      <node id="309313">
        <label>TrigConfHLTData/HLTUtils.h</label>
        <link refid="d8/d48/HLTUtils_8h_source"/>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309286" relation="include">
        </childnode>
        <childnode refid="309276" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
      </node>
      <node id="309307">
        <label>TrigConfHLTData/HLTTriggerElement.h</label>
        <link refid="dc/d9c/HLTTriggerElement_8h_source"/>
        <childnode refid="309292" relation="include">
        </childnode>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309297" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
      </node>
      <node id="309287">
        <label>sys/types.h</label>
      </node>
      <node id="309293">
        <label>TrigConfHLTData/HLTPrescale.h</label>
        <link refid="df/da4/HLTPrescale_8h_source"/>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309294" relation="include">
        </childnode>
        <childnode refid="309292" relation="include">
        </childnode>
        <childnode refid="309295" relation="include">
        </childnode>
      </node>
      <node id="309306">
        <label>TrigConfHLTData/HLTSequence.h</label>
        <link refid="db/d1d/HLTSequence_8h_source"/>
        <childnode refid="309292" relation="include">
        </childnode>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309297" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
      </node>
      <node id="309288">
        <label>TrigConfHLTData/HLTChainList.h</label>
        <link refid="d5/db5/HLTChainList_8h_source"/>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
        <childnode refid="309291" relation="include">
        </childnode>
        <childnode refid="309295" relation="include">
        </childnode>
        <childnode refid="309298" relation="include">
        </childnode>
        <childnode refid="309299" relation="include">
        </childnode>
        <childnode refid="309300" relation="include">
        </childnode>
        <childnode refid="309301" relation="include">
        </childnode>
        <childnode refid="309302" relation="include">
        </childnode>
        <childnode refid="309303" relation="include">
        </childnode>
      </node>
      <node id="309295">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="309283">
        <label>TrigConfL1Data/HelperFunctions.h</label>
        <link refid="d6/dc6/TrigConfL1Data_2TrigConfL1Data_2HelperFunctions_8h_source"/>
        <childnode refid="309284" relation="include">
        </childnode>
        <childnode refid="309285" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309278" relation="include">
        </childnode>
        <childnode refid="309286" relation="include">
        </childnode>
        <childnode refid="309287" relation="include">
        </childnode>
      </node>
      <node id="309282">
        <label>vector</label>
      </node>
      <node id="309294">
        <label>utility</label>
      </node>
      <node id="309277">
        <label>sstream</label>
      </node>
      <node id="309300">
        <label>boost/multi_index/hashed_index.hpp</label>
      </node>
      <node id="309303">
        <label>boost/multi_index/composite_key.hpp</label>
      </node>
      <node id="309289">
        <label>iosfwd</label>
      </node>
      <node id="309285">
        <label>cstdlib</label>
      </node>
      <node id="309275">
        <label>iostream</label>
      </node>
      <node id="309298">
        <label>boost/multi_index_container.hpp</label>
      </node>
      <node id="309304">
        <label>TrigConfHLTData/HLTSignature.h</label>
        <link refid="d7/d7c/HLTSignature_8h_source"/>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309297" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
      </node>
      <node id="309276">
        <label>set</label>
      </node>
      <node id="309280">
        <label>algorithm</label>
      </node>
      <node id="309299">
        <label>boost/multi_index/mem_fun.hpp</label>
      </node>
      <node id="309302">
        <label>boost/multi_index/random_access_index.hpp</label>
      </node>
      <node id="309309">
        <label>TrigConfHLTData/HLTPrescaleSetCollection.h</label>
        <link refid="d8/dfe/HLTPrescaleSetCollection_8h_source"/>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309310" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309294" relation="include">
        </childnode>
        <childnode refid="309311" relation="include">
        </childnode>
        <childnode refid="309312" relation="include">
        </childnode>
      </node>
      <node id="309286">
        <label>inttypes.h</label>
      </node>
      <node id="309291">
        <label>TrigConfHLTData/HLTChain.h</label>
        <link refid="d4/d72/HLTChain_8h_source"/>
        <childnode refid="309292" relation="include">
        </childnode>
        <childnode refid="309293" relation="include">
        </childnode>
        <childnode refid="309296" relation="include">
        </childnode>
        <childnode refid="309279" relation="include">
        </childnode>
        <childnode refid="309289" relation="include">
        </childnode>
        <childnode refid="309297" relation="include">
        </childnode>
        <childnode refid="309282" relation="include">
        </childnode>
        <childnode refid="309290" relation="include">
        </childnode>
        <childnode refid="309276" relation="include">
        </childnode>
        <childnode refid="309295" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="db/da7/classCompareSequenceOutput" prot="public">CompareSequenceOutput</innerclass>
    <innernamespace refid="d0/dfb/namespaceHashChecking">HashChecking</innernamespace>
    <innernamespace refid="d4/d08/namespaceTrigConf">TrigConf</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/d66/HLTUtils_8cxx_1ac1cd1cea3e8ea29993c06605f65d018d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void recursivelyFindInputTEs</definition>
        <argsstring>(unsigned int teId, const TrigConf::HLTSequenceList &amp;seqList, std::vector&lt; unsigned int &gt; &amp;tes)</argsstring>
        <name>recursivelyFindInputTEs</name>
        <param>
          <type>unsigned int</type>
          <declname>teId</declname>
        </param>
        <param>
          <type>const <ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound">TrigConf::HLTSequenceList</ref> &amp;</type>
          <declname>seqList</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>tes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx" line="94" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="dc/d66/HLTUtils_8cxx_1a3a4d1c701ac84409a4810977a154546d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void recursivelyFindInputTEs</definition>
        <argsstring>(std::string tename, const TrigConf::HLTSequenceList &amp;seqList, std::vector&lt; std::string &gt; &amp;tes)</argsstring>
        <name>recursivelyFindInputTEs</name>
        <param>
          <type>std::string</type>
          <declname>tename</declname>
        </param>
        <param>
          <type>const <ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound">TrigConf::HLTSequenceList</ref> &amp;</type>
          <declname>seqList</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>tes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx" bodystart="103" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfL1Data/HelperFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTChainList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTChain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTSignature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTSequenceList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTSequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTTriggerElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTFrame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfHLTData/HLTUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">TrigConf;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/>function<sp/>used<sp/>to<sp/>generate<sp/>uniqu<sp/><sp/>ID<sp/>(integer)<sp/>from<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>fact<sp/>uniqueness<sp/>is<sp/>not<sp/>100%<sp/>guaranteed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\param<sp/>s<sp/>string<sp/>to<sp/>be<sp/>hashed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\return<sp/>key<sp/>for<sp/>this<sp/>string<sp/>(this<sp/>function<sp/>never<sp/>fails)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">HashChecking<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;HLTHash,<sp/>std::string&gt;<sp/>HashMap;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>HashMap&gt;<sp/>CategoryMap;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CategoryMap<sp/>AllHashesByCategory;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkGeneratedHash<sp/>(HLTHash<sp/>hash,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>category)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>HashMap&amp;<sp/>hashes<sp/>=<sp/>AllHashesByCategory[category];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hashes[hash]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hashes[hash]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hashes[hash]<sp/>!=<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;Hashes<sp/>the<sp/>same<sp/>for<sp/>category:<sp/>&quot;</highlight><highlight class="normal">+category</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>elements<sp/>&quot;</highlight><highlight class="normal">+<sp/>hashes[hash]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">HLTHash<sp/>HLTUtils::string2hash(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>category<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hash<sp/>function<sp/>(based<sp/>on<sp/>available<sp/>elswhere<sp/>ELF<sp/>hash<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uniqueness<sp/>tested<sp/>in<sp/>MC<sp/>way;<sp/>contact<sp/>me<sp/>for<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>email:<sp/>Tomasz.Bold@cern.ch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>HLTHash<sp/>hash;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>hash<sp/>=<sp/>0xd2d84a61;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)s.size()-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>(<sp/>hash<sp/>&gt;&gt;<sp/>5)<sp/>+<sp/>s[i]<sp/>+<sp/>(<sp/>hash<sp/>&lt;&lt;<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)s.size();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>(<sp/>hash<sp/>&gt;&gt;<sp/>5)<sp/>+<sp/>s[i]<sp/>+<sp/>(<sp/>hash<sp/>&lt;&lt;<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>HashChecking::checkGeneratedHash(hash,<sp/>s,<sp/>category);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>HLTUtils::hash2string(<sp/>HLTHash<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>category<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>HashChecking::CategoryMap::const_iterator<sp/>mapForCategoryIt<sp/>=<sp/>HashChecking::AllHashesByCategory.find(category);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapForCategoryIt<sp/>==<sp/>HashChecking::AllHashesByCategory.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN<sp/>CATEGORY&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>HashChecking::HashMap::const_iterator<sp/>hashMapIt<sp/>=<sp/>mapForCategoryIt-&gt;second.find(hash);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hashMapIt<sp/>==<sp/>mapForCategoryIt-&gt;second.end()<sp/>)<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN<sp/>HASH<sp/>ID&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashMapIt-&gt;second;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*****</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>to<sp/>support<sp/>discover<sp/>in<sp/>configuration<sp/>recursively<sp/>called<sp/>sequences</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="db/da7/classCompareSequenceOutput" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/da7/classCompareSequenceOutput" kindref="compound">CompareSequenceOutput</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><ref refid="db/da7/classCompareSequenceOutput" kindref="compound">CompareSequenceOutput</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashId<sp/>)<sp/>{<sp/>m_hashId<sp/>=<sp/>hashId;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><ref refid="db/da7/classCompareSequenceOutput" kindref="compound">CompareSequenceOutput</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d6/db2/structTrigConf_1_1name" kindref="compound">name</ref><sp/>)<sp/>{<sp/>m_hashId<sp/>=<sp/><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1af81842da8307daf333f5ade9d8b5ad08" kindref="member" tooltip="hash function translating TE names into identifiers">HLTUtils::string2hash</ref>(name,<sp/></highlight><highlight class="stringliteral">&quot;TE&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(<sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1af416abaeb92faca0c29559e00f8ff6b4" kindref="member" tooltip="accessor to the list of output trigger elements (just 1)">outputTE</ref>()-&gt;hashId()<sp/>==<sp/>m_hashId;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_hashId;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">recursivelyFindInputTEs(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>seqList,<sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>tes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref><sp/>*<sp/>seq<sp/>=<sp/>seqList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(teId);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>seq==0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>*<sp/>te<sp/>:<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tes.push_back(te-&gt;hashId());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindInputTEs(<sp/>te-&gt;hashId(),<sp/>seqList,<sp/>tes);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>recursivelyFindInputTEs(<sp/>std::string<sp/>tename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>seqList,<sp/>std::vector&lt;std::string&gt;&amp;<sp/>tes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>seqList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(tename);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>seq==0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>*<sp/>te<sp/>:<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>tes.push_back(te-&gt;name());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>recursivelyFindInputTEs(te-&gt;name(),<sp/>seqList,<sp/>tes);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TrigConf<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>recursivelyFindOutputTEs(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tename,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>sequenceList,<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;&amp;<sp/>tes,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;std::string&gt;*<sp/>veto<sp/>=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>veto<sp/>&amp;&amp;<sp/>veto-&gt;find(tename)<sp/>!=<sp/>veto-&gt;end()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(tename);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>seq==0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level==2)<sp/>seq-&gt;setL2();<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level==3)<sp/>seq-&gt;setEF();<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level==4)<sp/>seq-&gt;setHLT();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tes.insert(tename);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>*<sp/>te<sp/>:<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>()<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindOutputTEs(<sp/>te-&gt;name(),<sp/>sequenceList,<sp/>tes,<sp/>level,<sp/>veto);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>recursivelyFindOutputTEsWithLevelFromSequence(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tename,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>sequenceList,<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;&amp;<sp/>tes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>sequence<sp/>exists<sp/>that<sp/>outputs<sp/>this<sp/>TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(tename);<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>seq==0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>must<sp/>know<sp/>in<sp/>which<sp/>level<sp/>it<sp/>is<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>seq-&gt;isSet())<sp/>{<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sequence<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1af416abaeb92faca0c29559e00f8ff6b4" kindref="member" tooltip="accessor to the list of output trigger elements (just 1)">outputTE</ref>()-&gt;name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>no<sp/>level<sp/>set<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>must<sp/>be<sp/>the<sp/>level<sp/>that<sp/>is<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(level==2<sp/>&amp;&amp;<sp/>!seq-&gt;inL2())<sp/>||<sp/>(level==3<sp/>&amp;&amp;<sp/>!seq-&gt;inEF())<sp/>||<sp/>(level==4<sp/>&amp;&amp;<sp/>!seq-&gt;inHLT())<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>insert<sp/>the<sp/>te<sp/>and<sp/>continue<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tes.insert(tename);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>*<sp/><sp/>te<sp/>:<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>()<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindOutputTEsWithLevelFromSequence(<sp/>te-&gt;name(),<sp/>sequenceList,<sp/>tes,<sp/>level);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*****************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">std::vector&lt;unsigned<sp/>int&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1a2e96de6cab184ca43af08252d88373d8" kindref="member" tooltip="returns list of TEids which can be poduced at given level (L2 or EF) in currecnt...">HLTUtils::allTEsProducedInLevel</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>level,<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfb/classTrigConf_1_1HLTChainList" kindref="compound" tooltip="list of all HLT chains in a trigger menu">HLTChainList</ref>&amp;<sp/>chainList,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">HLTSequenceList</ref>&amp;<sp/>sequenceList)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>set&lt;unsigned<sp/>int&gt;<sp/>outTEs;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>*<sp/>ch<sp/>:<sp/>chainList)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ch-&gt;level()<sp/>!=<sp/>level<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="d9/d02/classTrigConf_1_1HLTSignature" kindref="compound" tooltip="HLT signature configuration information.">HLTSignature</ref>*<sp/>sig<sp/>:<sp/>ch-&gt;signatureList()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">HLTTriggerElement</ref>*<sp/>te<sp/>:<sp/>sig-&gt;outputTEs()<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outTEs.insert(<sp/>te-&gt;hashId()<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>now<sp/>big<sp/>list<sp/>of<sp/>TEs<sp/>mentioned<sp/>in<sp/>chains<sp/>...<sp/>what<sp/>with<sp/>this<sp/>which<sp/>are<sp/>not<sp/>mentioned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>are<sp/>executed<sp/>because<sp/>recursion<sp/>in<sp/>sequences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>newTEs;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teId<sp/>:<sp/>outTEs<sp/>)<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindInputTEs(teId,<sp/>sequenceList,<sp/>newTEs);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>copy(newTEs.begin(),<sp/>newTEs.end(),inserter(outTEs,outTEs.begin()));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>turn<sp/>into<sp/>vector<sp/>and<sp/>order<sp/>(unnecessary)<sp/>but<sp/>I<sp/>don&apos;t<sp/>want<sp/>to<sp/>break<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>tes;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>copy(outTEs.begin(),<sp/>outTEs.end(),<sp/>inserter(tes,tes.begin()));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/>sort(tes.begin(),<sp/>tes.end());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tes;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">vector&lt;string&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1a3fc3f711858fa0b83a2b98ab9da21dd4" kindref="member" tooltip="returns list of TEids which are specified by Chain signatures">HLTUtils::explicitChainTEs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>&amp;<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/>vector&lt;string&gt;<sp/>tes;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="d9/d02/classTrigConf_1_1HLTSignature" kindref="compound" tooltip="HLT signature configuration information.">HLTSignature</ref>*<sp/>sig<sp/>:<sp/>ch.signatureList()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">HLTTriggerElement</ref>*<sp/>te<sp/>:<sp/>sig-&gt;outputTEs()<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tes.push_back(<sp/>te-&gt;name()<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>sort(tes.begin(),<sp/>tes.end());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;std::string&gt;::iterator<sp/>l<sp/>=<sp/>unique(tes.begin(),<sp/>tes.end());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/>tes.erase(l,<sp/>tes.end());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tes;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1ab1e8d9f5a0899f1743119828bad1858e" kindref="member" tooltip="returns list of TEids which are specified by Chain signatures and which are needed...">HLTUtils::implicitChainTEs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>&amp;<sp/>ch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">HLTSequenceList</ref>&amp;<sp/>sequenceList)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/>vector&lt;string&gt;<sp/>tes<sp/>=<sp/><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1a3fc3f711858fa0b83a2b98ab9da21dd4" kindref="member" tooltip="returns list of TEids which are specified by Chain signatures">explicitChainTEs</ref>(ch);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>vector&lt;string&gt;<sp/>newTes;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>teId<sp/>:<sp/>tes<sp/>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindInputTEs(teId,<sp/>sequenceList,<sp/>newTes);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>sort(tes.begin(),<sp/>tes.end());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>vector&lt;string&gt;::iterator<sp/>l<sp/>=<sp/>unique(tes.begin(),<sp/>tes.end());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>tes.erase(l,<sp/>tes.end());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tes;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">TrigConf::HLTUtils::allTEsProducedInL2(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfb/classTrigConf_1_1HLTChainList" kindref="compound" tooltip="list of all HLT chains in a trigger menu">HLTChainList</ref>&amp;<sp/>chainList<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1ad2caa25c2dc37df79d741b533dc85769" kindref="member" tooltip="const accessor to the list of HLT chains">getHLTChainList</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">HLTSequenceList</ref>&amp;<sp/>sequenceList<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a797e76dc6aaf4faad599a20385ae5488" kindref="member" tooltip="const accessor to the list of HLT sequences">getHLTSequenceList</ref>();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>l2tes;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>*<sp/>chain<sp/>:<sp/>chainList<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chain-&gt;level()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;EF&quot;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;string&gt;<sp/>tes<sp/>=<sp/>allTEsProducedInL2Chain(<sp/>*chain,<sp/>sequenceList);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy(tes.begin(),<sp/>tes.end(),<sp/>std::inserter(l2tes,l2tes.begin()));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l2tes;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">TrigConf::HLTUtils::allTEsProducedInEF(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;*<sp/>l2tes<sp/>)<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfb/classTrigConf_1_1HLTChainList" kindref="compound" tooltip="list of all HLT chains in a trigger menu">HLTChainList</ref>&amp;<sp/>chainList<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1ad2caa25c2dc37df79d741b533dc85769" kindref="member" tooltip="const accessor to the list of HLT chains">getHLTChainList</ref>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">HLTSequenceList</ref>&amp;<sp/>sequenceList<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a797e76dc6aaf4faad599a20385ae5488" kindref="member" tooltip="const accessor to the list of HLT sequences">getHLTSequenceList</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>level2TEs<sp/>=<sp/>l2tes?*l2tes:allTEsProducedInL2(frame);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>eftes;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>*<sp/>chain<sp/>:<sp/>chainList<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chain-&gt;level()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L2&quot;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;string&gt;<sp/>tes<sp/>=<sp/>allTEsProducedInEFChain(<sp/>*chain,<sp/>sequenceList,<sp/>level2TEs);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy(tes.begin(),<sp/>tes.end(),<sp/>std::inserter(eftes,eftes.begin()));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eftes;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">TrigConf::HLTUtils::allTEsProduced(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>tes<sp/>=<sp/>allTEsProducedInL2(<sp/>frame<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>eftes<sp/>=<sp/>allTEsProducedInEF(<sp/>frame,<sp/>&amp;tes<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>std::copy(eftes.begin(),eftes.end(),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::inserter(tes,tes.begin()));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tes;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1af5ea9cac19b3ab9f46dcd71fbe4e9aae" kindref="member" tooltip="returns set of input TEs for given set of TEs">TrigConf::HLTUtils::inputTEs</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;std::string&gt;&amp;<sp/>TEs,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>sequenceList)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>input<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/><ref refid="d8/d97/classTrigConf_1_1HLTUtils_1af5ea9cac19b3ab9f46dcd71fbe4e9aae" kindref="member" tooltip="returns set of input TEs for given set of TEs">inputTEs</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(set&lt;string&gt;::iterator<sp/>te<sp/>=<sp/>TEs.begin();<sp/>te<sp/>!=<sp/>TEs.end();<sp/>++te)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(*te);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq==0)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*te<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>produced<sp/>by<sp/>any<sp/>sequence<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;HLTTriggerElement*&gt;::const_iterator<sp/>teIt<sp/>=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().begin();<sp/>teIt<sp/>!=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().end();<sp/>++teIt)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputTEs.insert((*teIt)-&gt;name());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inputTEs;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">TrigConf::HLTUtils::allTEsProducedInL2Chain(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">TrigConf::HLTChain</ref>&amp;<sp/>chain,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>sequenceList)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>l2tes;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>produced<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;<sp/>HLTSignature<sp/>*<sp/>&gt;&amp;<sp/>sigVec<sp/>=<sp/>chain.signatureList();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vector&lt;<sp/>HLTSignature<sp/>*<sp/>&gt;::const_iterator<sp/>sig<sp/>=<sp/>sigVec.begin();<sp/>sig<sp/>!=<sp/>sigVec.end();<sp/>++sig<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;<sp/>HLTTriggerElement<sp/>*<sp/>&gt;&amp;<sp/>teVec<sp/>=<sp/>(*sig)-&gt;outputTEs();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vector&lt;<sp/>HLTTriggerElement<sp/>*<sp/>&gt;::const_iterator<sp/>te<sp/>=<sp/>teVec.begin();<sp/>te<sp/>!=<sp/>teVec.end();<sp/>++te)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2tes.insert((*te)-&gt;name());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>input<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>inputTEs;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(set&lt;string&gt;::iterator<sp/>outTEIt<sp/>=<sp/>l2tes.begin();<sp/>outTEIt<sp/>!=<sp/>l2tes.end();<sp/>++outTEIt)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(*outTEIt);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq==0)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*outTEIt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>produced<sp/>by<sp/>any<sp/>sequence<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seq-&gt;setL2();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;HLTTriggerElement*&gt;::const_iterator<sp/>teIt<sp/>=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().begin();<sp/>teIt<sp/>!=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().end();<sp/>++teIt)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputTEs.insert((*teIt)-&gt;name());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>check;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>std::set_difference(inputTEs.begin(),inputTEs.end(),<sp/>l2tes.begin(),l2tes.end(),<sp/>std::inserter(check,check.begin()));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(set&lt;string&gt;::iterator<sp/>teIt<sp/>=<sp/>check.begin();<sp/>teIt<sp/>!=<sp/>check.end();<sp/>++teIt)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindOutputTEs(<sp/>*teIt,<sp/>sequenceList,<sp/>l2tes,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l2tes;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">std::set&lt;std::string&gt;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">TrigConf::HLTUtils::allTEsProducedInEFChain(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">TrigConf::HLTChain</ref>&amp;<sp/>chain,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>&amp;<sp/>sequenceList,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;std::string&gt;&amp;<sp/>l2tes<sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>eftes;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>produced<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;<sp/>HLTSignature<sp/>*<sp/>&gt;&amp;<sp/>sigVec<sp/>=<sp/>chain.signatureList();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vector&lt;<sp/>HLTSignature<sp/>*<sp/>&gt;::const_iterator<sp/>sig<sp/>=<sp/>sigVec.begin();<sp/>sig<sp/>!=<sp/>sigVec.end();<sp/>++sig<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;<sp/>HLTTriggerElement<sp/>*<sp/>&gt;&amp;<sp/>teVec<sp/>=<sp/>(*sig)-&gt;outputTEs();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vector&lt;<sp/>HLTTriggerElement<sp/>*<sp/>&gt;::const_iterator<sp/>te<sp/>=<sp/>teVec.begin();<sp/>te<sp/>!=<sp/>teVec.end();<sp/>++te)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eftes.insert((*te)-&gt;name());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>input<sp/>TEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>inputTEs;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(set&lt;string&gt;::iterator<sp/>outTEIt<sp/>=<sp/>eftes.begin();<sp/>outTEIt<sp/>!=<sp/>eftes.end();<sp/>++outTEIt)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(*outTEIt);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq==0)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*outTEIt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>produced<sp/>by<sp/>any<sp/>sequence<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seq-&gt;setEF();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;HLTTriggerElement*&gt;::const_iterator<sp/>teIt<sp/>=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().begin();<sp/>teIt<sp/>!=<sp/>seq-&gt;<ref refid="d5/df5/classTrigConf_1_1HLTSequence_1a74a23155a5012ea48df543ecc17556ab" kindref="member" tooltip="accessor to the list of input trigger elements">inputTEs</ref>().end();<sp/>++teIt)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputTEs.insert((*teIt)-&gt;name());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>check;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>std::set_difference(inputTEs.begin(),inputTEs.end(),<sp/>eftes.begin(),<sp/>eftes.end(),<sp/>std::inserter(check,check.begin()));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>te<sp/>:<sp/>check)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindOutputTEs(<sp/>te,<sp/>sequenceList,<sp/>eftes,<sp/>3,<sp/>&amp;l2tes<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eftes;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="391"><highlight class="normal">TrigConf::HLTUtils::ChainCondenseDisplay(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>&amp;<sp/>chain,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame<sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d9/d02/classTrigConf_1_1HLTSignature" kindref="compound" tooltip="HLT signature configuration information.">TrigConf::HLTSignature</ref>;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">TrigConf::HLTSequenceList</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList" kindref="compound" tooltip="list of HLT sequences">HLTSequenceList</ref>&amp;<sp/>sequenceList<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a797e76dc6aaf4faad599a20385ae5488" kindref="member" tooltip="const accessor to the list of HLT sequences">getHLTSequenceList</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>teCat(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>writtenOutput;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>neededInput;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentSigPos<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;HLTSignature*&gt;<sp/>&amp;<sp/>signatures<sp/>=<sp/>chain.signatureList();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>vector&lt;HLTSignature*&gt;::const_iterator<sp/>sigIt<sp/>=<sp/>signatures.begin();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>sigIt!=signatures.end();<sp/>++sigIt)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigCounter<sp/>=<sp/>(*sigIt)-&gt;signature_counter();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(sigCounter&gt;currentSigPos)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teCat<sp/>+=</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>separate<sp/>signature<sp/>by<sp/>&apos;;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSigPos++;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;HLTTriggerElement*&gt;<sp/>&amp;<sp/>outputTEs<sp/>=<sp/>(*sigIt)-&gt;outputTEs();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;HLTTriggerElement*&gt;::const_iterator<sp/>teIt<sp/>=<sp/>outputTEs.begin();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;teIt!=outputTEs.end();++teIt)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(teIt!=outputTEs.begin())<sp/>teCat<sp/>+=</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>separate<sp/>sequences<sp/>by<sp/>&apos;,&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>outTEName((*teIt)-&gt;name());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(outTEName);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq==0)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Chain<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>chain.chain_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>step<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sigCounter</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>requires<sp/>TE<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outTEName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>not<sp/>produced<sp/>by<sp/>any<sp/>sequence<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teCat<sp/>+=<sp/>seq-&gt;concise();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>info<sp/>about<sp/>input<sp/>and<sp/>output<sp/>TE&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;HLTTriggerElement*&gt;::const_iterator<sp/>teIt<sp/>=<sp/>seq-&gt;inputTEs().begin();<sp/>teIt<sp/>!=<sp/>seq-&gt;inputTEs().end();<sp/>++teIt)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neededInput.insert((*teIt)-&gt;name());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writtenOutput.insert(seq-&gt;outputTE()-&gt;name());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>teCat<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/>teCat;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>stillToWrite;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>std::set_difference(neededInput.begin(),neededInput.end(),</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writtenOutput.begin(),writtenOutput.end(),</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::inserter(stillToWrite,stillToWrite.begin()));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/>set&lt;string&gt;<sp/>allStillToWrite(stillToWrite);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilevel<sp/>=<sp/>(chain.level()==</highlight><highlight class="stringliteral">&quot;L2&quot;</highlight><highlight class="normal">)?2:3;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>te<sp/>:<sp/>stillToWrite)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recursivelyFindOutputTEsWithLevelFromSequence(<sp/>te,<sp/>sequenceList,<sp/>allStillToWrite,<sp/>ilevel<sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(set&lt;string&gt;::iterator<sp/>teIt<sp/>=<sp/>allStillToWrite.begin();<sp/>teIt<sp/>!=<sp/>allStillToWrite.end();<sp/>++teIt)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>outTEName(*teIt);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/>sequenceList.<ref refid="d6/dbb/classTrigConf_1_1HLTSequenceList_1a368b1ddb36fc2bf23a5749914ba5289e" kindref="member" tooltip="counts the number of sequences in the menu">getSequence</ref>(outTEName);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq==0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!first)<sp/>{<sp/>first=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>teCat<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>teCat;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>separate<sp/>sequences<sp/>by<sp/>&apos;,&apos;<sp/><sp/>//<sp/>TODO<sp/>careful<sp/>not<sp/>to<sp/>change<sp/>COOL<sp/>format<sp/>JS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teCat<sp/>=<sp/>seq-&gt;concise()<sp/>+<sp/>teCat;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>teCat;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">std::vector&lt;<sp/>std::string<sp/>&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">TrigConf::HLTUtils::splitGroups(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turns<sp/>&quot;(str1),(str2),(str3)&quot;<sp/>into<sp/>[&quot;str1&quot;,<sp/>&quot;str2&quot;,<sp/>&quot;str3&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>std::string::size_type<sp/>currentOpen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>result;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>openParenthesis<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string::size_type<sp/>pos<sp/>=<sp/>0;<sp/>pos!=s.size();<sp/>++pos)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cc<sp/>=<sp/>s[pos];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc==</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(openParenthesis)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Two<sp/>many<sp/>open<sp/>parenthesis<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openParenthesis<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOpen<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!openParenthesis)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>str;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Two<sp/>many<sp/>closing<sp/>parenthesis<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(str.str());</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openParenthesis<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(std::string(s,<sp/>currentOpen+1,<sp/>pos-currentOpen-1));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*</highlight></codeline>
<codeline lineno="494"><highlight class="normal">TrigConf::HLTUtils::buildSequence(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>desc)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>a<sp/>sequence<sp/>from<sp/>a<sp/>string<sp/>&quot;inputTE1,inputTE2,outputTE&quot;,<sp/>(can<sp/>be<sp/>just<sp/>&quot;outputTE&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tes<sp/>=<sp/>TrigConf::split(desc,</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/>vector&lt;TrigConf::HLTTriggerElement*&gt;<sp/>input;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;std::string&gt;::iterator<sp/>teit<sp/>=<sp/>tes.begin();<sp/>teit!=tes.end();<sp/>++teit)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>(0,*teit));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><ref refid="db/d7d/classTrigConf_1_1HLTTriggerElement" kindref="compound" tooltip="HLT trigger element configuration information.">TrigConf::HLTTriggerElement</ref>*<sp/>outte<sp/>=<sp/>input.back();<sp/>input.pop_back();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>*<sp/>seq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/df5/classTrigConf_1_1HLTSequence" kindref="compound" tooltip="HLT sequence configuration information.">TrigConf::HLTSequence</ref>(<sp/>input,<sp/>outte,<sp/>vector&lt;string&gt;());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seq;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//merge<sp/>L2<sp/>and<sp/>EF<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrigConf::HLTUtils::mergeHLTChainList(<sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>frame.mergedHLT())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>vector&lt;HLTChain*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpL2chains;<sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/>vector&lt;HLTChain*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpEFchains;<sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">TrigConf::HLTChain</ref>*<sp/>aChain<sp/>:<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a7ec4a78eeb82d4af1f543176103c218a" kindref="member" tooltip="accessor to the list of HLT chains">theHLTChainList</ref>()<sp/>){</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(aChain-&gt;level()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L2&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpL2chains.push_back(<sp/>aChain<sp/>);<sp/></highlight><highlight class="comment">//add<sp/>in<sp/>the<sp/>tmp<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(aChain-&gt;level()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;EF&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpEFchains.push_back(<sp/>aChain<sp/>);<sp/></highlight><highlight class="comment">//add<sp/>in<sp/>the<sp/>tmp<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//delete<sp/>the<sp/>current<sp/>chainlist<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a7ec4a78eeb82d4af1f543176103c218a" kindref="member" tooltip="accessor to the list of HLT chains">theHLTChainList</ref>().clear();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(<sp/><sp/>vector&lt;HLTChain*&gt;::iterator<sp/>aChain<sp/>=<sp/>frame.getHLTChainList().begin();<sp/>aChain<sp/>!=<sp/>frame.getHLTChainList().end();<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/><sp/>((*aChain)-&gt;level()<sp/>==<sp/>&quot;L2&quot;){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>tmpL2chains.push_back(<sp/>*aChain<sp/>);<sp/>//add<sp/>in<sp/>the<sp/>tmp<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>frame.getHLTChainList().chains().erase(aChain);<sp/>//<sp/>erase<sp/>L2<sp/>chains<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>aChain++;<sp/>//iterate<sp/>if<sp/>not<sp/>erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/>vector&lt;HLTChain*&gt;::iterator<sp/>cEF<sp/>=<sp/>tmpEFchains.begin();<sp/>cEF<sp/>!=<sp/>tmpEFchains.end();<sp/>++cEF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(<sp/><sp/>vector&lt;HLTChain*&gt;::iterator<sp/>cEF<sp/>=<sp/>frame.getHLTChainList().begin();<sp/>cEF<sp/>!=<sp/>frame.getHLTChainList().end();<sp/>++cEF<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>of<sp/>the<sp/>signature<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TrigConf::HLTSignature*&gt;::iterator<sp/>it<sp/>=<sp/>(*cEF)-&gt;signatureList().begin();<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>cname<sp/>=<sp/>(*cEF)-&gt;chain_name();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>((*cEF)-&gt;chain_name().find(</highlight><highlight class="stringliteral">&quot;EF_&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>std::string::npos<sp/>){</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cname.replace(index-1,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;HLT_&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>why<sp/>index<sp/>must<sp/>be<sp/>scaled<sp/>by<sp/>1<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_chain_name(cname);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_level(</highlight><highlight class="stringliteral">&quot;HLT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_EB_after_step(0);</highlight><highlight class="comment">//in<sp/>case<sp/>EF<sp/>chain<sp/>is<sp/>not<sp/>seeded<sp/>by<sp/>any<sp/>L2<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/>vector&lt;HLTChain*&gt;::iterator<sp/>cL2<sp/>=<sp/>tmpL2chains.begin();<sp/>cL2<sp/>!=<sp/>tmpL2chains.end();<sp/>++cL2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*cL2)-&gt;chain_name()<sp/>==<sp/>(*cEF)-&gt;lower_chain_name()){</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>L2<sp/>signatures:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;signatureList().insert<sp/>(it,(*cL2)-&gt;signatureList().begin(),(*cL2)-&gt;signatureList().end());<sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>L2<sp/>signatures,<sp/>before<sp/>EF<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>EF<sp/>signature<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig=0;<sp/>sig<sp/>&lt;<sp/>(*cEF)-&gt;signatureList().size();<sp/>sig++){</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;signatureList()[<sp/>sig<sp/>]-&gt;set_signature_counter(<sp/>sig<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>lower<sp/>chain<sp/>name<sp/>as<sp/>the<sp/>L2<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_lower_chain_name((*cL2)-&gt;lower_chain_name());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_lower_chain_counter((*cL2)-&gt;lower_chain_counter());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>prescales,<sp/>rerun_prescales<sp/>and<sp/>pass_through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prescale(0);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*cL2)-&gt;prescale()==-1.<sp/>||<sp/>(*cEF)-&gt;prescale()==-1.)<sp/>prescale=-1.;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>prescale=(*cL2)-&gt;prescale()*(*cEF)-&gt;prescale();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_prescale(prescale);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rerun_prescale(0);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*cL2)-&gt;rerun_prescale(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)).second&lt;0<sp/>||<sp/>((*cEF)-&gt;rerun_prescale(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)).second&lt;0)<sp/>rerun_prescale=-1.;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rerun_prescale=((*cL2)-&gt;rerun_prescale(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)).second<sp/>*<sp/>((*cEF)-&gt;rerun_prescale(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)).second;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_rerun_prescale(rerun_prescale);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pass_through(0);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*cL2)-&gt;pass_through()==-1.<sp/>||<sp/>(*cEF)-&gt;pass_through()==-1.)<sp/>pass_through=-1.;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>pass_through=(*cL2)-&gt;pass_through()*(*cEF)-&gt;pass_through();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_pass_through(pass_through);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>EB_after_step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_EB_after_step(<sp/>(*cL2)-&gt;signatureList().size());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;FPP:<sp/>changed<sp/>name<sp/>to<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;chain_name()<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>level<sp/>to<sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;level()<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>set<sp/>lower_chain_name<sp/>to<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;lower_chain_name()<sp/></highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>set<sp/>EB_after_step=&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;EB_after_step()<sp/></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>set<sp/>prescale=&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;prescale()</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>set<sp/>rerun_prescale=&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;rerun_prescale()</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>set<sp/>pass_through=&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;pass_through()</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;;<sp/>added<sp/>signatures<sp/>tot=&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*cEF)-&gt;signatureList().size()&lt;&lt;<sp/>std::endl;<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a7ec4a78eeb82d4af1f543176103c218a" kindref="member" tooltip="accessor to the list of HLT chains">theHLTChainList</ref>().<ref refid="d0/dfb/classTrigConf_1_1HLTChainList_1a0046cfaf308c16d3ab0e39cd9179e82e" kindref="member" tooltip="adds an HLTChain to the menu">addHLTChain</ref>(*cEF);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;FPP<sp/>HLTUtils::mergeHLTChains():<sp/>frame.getHLTChainList().chains().size()=&quot;&lt;&lt;frame.getHLTChainList().size()&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">TrigConf::HLTUtils::mergeL2EFPrescales(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>*<sp/>hltchain,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classTrigConf_1_1HLTPrescale" kindref="compound">HLTPrescale</ref>&amp;<sp/>l2ps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classTrigConf_1_1HLTPrescale" kindref="compound">HLTPrescale</ref>&amp;<sp/>efps)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/df0/classTrigConf_1_1HLTPrescale" kindref="compound">HLTPrescale</ref><sp/>hltps;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disabled<sp/>=<sp/>l2ps.disabled()<sp/>||<sp/>efps.disabled();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>prescale<sp/>=<sp/>fabs(<sp/>l2ps.prescale()<sp/>*<sp/>efps.prescale()<sp/>)<sp/>*<sp/>(disabled?-1:1);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/>hltps.setPrescale(prescale);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/>hltchain-&gt;set_prescales(hltps);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">TrigConf::HLTUtils::mergeHLTChainList2(<sp/><ref refid="d2/d5e/classTrigConf_1_1HLTFrame" kindref="compound" tooltip="The HLT trigger menu,.">HLTFrame</ref>&amp;<sp/>frame)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>frame.mergedHLT())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>keep<sp/>the<sp/>steps<sp/>in<sp/>sync<sp/>so<sp/>first<sp/>we<sp/>find<sp/>the<sp/>last<sp/>step<sp/>in<sp/>L2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastL2step(0);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">TrigConf::HLTChain</ref>*<sp/>chain<sp/>:<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a6598da538884d1854aef97430248b5ee" kindref="member" tooltip="const accessor to the list of HLT chains">chains</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chain-&gt;level_enum()<sp/>!=<sp/>L2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastL2step<sp/>=<sp/>max(lastL2step,<sp/>chain-&gt;lastStep());</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>make<sp/>copies<sp/>of<sp/>all<sp/>EF<sp/>chains,<sp/>the<sp/>steps<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>make<sp/>a<sp/>deep<sp/>copy<sp/>of<sp/>all<sp/>EF<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>give<sp/>them<sp/>level<sp/>HLT<sp/>and<sp/>modify<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>insert<sp/>the<sp/>signatures<sp/>(deep<sp/>copies)<sp/>of<sp/>the<sp/>matching<sp/>L2<sp/>chains<sp/>at<sp/>the<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>set<sp/>the<sp/>input<sp/>L1Item<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5.<sp/>merge<sp/>the<sp/>prescales,<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/>vector&lt;HLTChain*&gt;<sp/>newHLTchains;<sp/></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">TrigConf::HLTChain</ref>*<sp/>chain<sp/>:<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a6598da538884d1854aef97430248b5ee" kindref="member" tooltip="const accessor to the list of HLT chains">chains</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>chain-&gt;level_enum()<sp/>!=<sp/>EF<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>copy<sp/>(deep<sp/>copy<sp/>of<sp/>all<sp/>signatures<sp/>and<sp/>output<sp/>TEs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref><sp/>*<sp/>hltChain<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>(*chain);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newHLTchains.push_back(hltChain);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>chain<sp/>counters<sp/>(for<sp/>correct<sp/>prescale<sp/>merging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;mergeCounter.ef<sp/>=<sp/>hltChain-&gt;chain_counter();</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>name<sp/>and<sp/>level<sp/>to<sp/>HLT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>name<sp/>starts<sp/>with<sp/>EF_<sp/>it<sp/>is<sp/>replace<sp/>with<sp/>HLT_,<sp/>otherwise<sp/>HLT_<sp/>is<sp/>prepended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;set_level(</highlight><highlight class="stringliteral">&quot;HLT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>oldname<sp/>=<sp/>chain-&gt;name();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basepos<sp/>=<sp/>(oldname.substr(0,3)==</highlight><highlight class="stringliteral">&quot;EF_&quot;</highlight><highlight class="normal">)?3:0;<sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;setName(<sp/></highlight><highlight class="stringliteral">&quot;HLT_&quot;</highlight><highlight class="normal"><sp/>+<sp/>oldname.substr(basepos)<sp/>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;set_EB_after_step(0);<sp/></highlight><highlight class="comment">//in<sp/>case<sp/>EF<sp/>chain<sp/>is<sp/>not<sp/>seeded<sp/>by<sp/>any<sp/>L2<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>the<sp/>step<sp/>counters<sp/>of<sp/>by<sp/>+lastL2Step<sp/>(note<sp/>that<sp/>there<sp/>is<sp/>no<sp/>step=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;shiftStepCounter(lastL2step);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>lower<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref><sp/>*<sp/>l2Chain<sp/>=<sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a6598da538884d1854aef97430248b5ee" kindref="member" tooltip="const accessor to the list of HLT chains">chains</ref>().<ref refid="d0/dfb/classTrigConf_1_1HLTChainList_1ab51d1dac12601fa8ef1a6d7def140eb1" kindref="member" tooltip="access the chain by name returns null-pointer if chain not found">chain</ref>(<sp/>hltChain-&gt;lower_chain_name()<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>seeding<sp/>l2<sp/>chain<sp/>is<sp/>found,<sp/>nothing<sp/>needs<sp/>to<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l2Chain)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;mergeCounter.l2<sp/>=<sp/>l2Chain-&gt;chain_counter();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>l2<sp/>steps<sp/>at<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>need<sp/>to<sp/>create<sp/>a<sp/>deep<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;HLTSignature*&gt;<sp/>l2sig_deepcopy;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="d9/d02/classTrigConf_1_1HLTSignature" kindref="compound" tooltip="HLT signature configuration information.">HLTSignature</ref>*<sp/>sig<sp/>:<sp/>l2Chain-&gt;signatures())</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2sig_deepcopy.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d02/classTrigConf_1_1HLTSignature" kindref="compound" tooltip="HLT signature configuration information.">HLTSignature</ref>(*sig));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;signatureList().insert(<sp/>hltChain-&gt;signatureList().begin(),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2sig_deepcopy.begin(),<sp/>l2sig_deepcopy.end());</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>L1<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;set_lower_chain_name(<sp/>l2Chain-&gt;lower_chain_name()<sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;set_lower_chain_counter(<sp/>l2Chain-&gt;lower_chain_counter()<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>EB<sp/>start<sp/>after<sp/>old<sp/>L2<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;set_EB_after_step(<sp/>l2Chain-&gt;signatureList().size());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>prescales,<sp/>pass<sp/>throughs,<sp/>rerun<sp/>prescales,<sp/>stream<sp/>prescales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prescale<sp/>(product<sp/>of<sp/>L2<sp/>and<sp/>EF,<sp/>disabled<sp/>if<sp/>either<sp/>were<sp/>disabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeL2EFPrescales(hltChain,<sp/>l2Chain-&gt;prescales(),<sp/>hltChain-&gt;prescales());</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>disabled<sp/>=<sp/>l2Chain-&gt;prescale()&lt;0<sp/>||<sp/>hltChain-&gt;prescale()&lt;0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>prescale<sp/>=<sp/>l2Chain-&gt;prescale()<sp/>*<sp/>hltChain-&gt;prescale();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prescale<sp/>=<sp/>fabs(prescale)<sp/>*<sp/>(disabled?-1:1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hltChain-&gt;prescales().setPrescale(prescale);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>rerun<sp/>prescales,<sp/>streams,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>rerun_prescale(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(((*cL2)-&gt;rerun_prescale(&quot;&quot;)).second&lt;0<sp/>||<sp/>((*cEF)-&gt;rerun_prescale(&quot;&quot;)).second&lt;0)<sp/>rerun_prescale=-1.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>rerun_prescale=((*cL2)-&gt;rerun_prescale(&quot;&quot;)).second<sp/>*<sp/>((*cEF)-&gt;rerun_prescale(&quot;&quot;)).second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_rerun_prescale(rerun_prescale);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>pass_through(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((*cL2)-&gt;pass_through()==-1.<sp/>||<sp/>(*cEF)-&gt;pass_through()==-1.)<sp/>pass_through=-1.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>pass_through=(*cL2)-&gt;pass_through()*(*cEF)-&gt;pass_through();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_pass_through(pass_through);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>the<sp/>EB_after_step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cEF)-&gt;set_EB_after_step(<sp/>(*cL2)-&gt;signatureList().size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>deal<sp/>with<sp/>L2-only<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>current<sp/>chainlist<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a7ec4a78eeb82d4af1f543176103c218a" kindref="member" tooltip="accessor to the list of HLT chains">theHLTChainList</ref>().clear();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>add<sp/>the<sp/>new<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="db/df4/classTrigConf_1_1HLTChain" kindref="compound" tooltip="HLT chain configuration information.">HLTChain</ref>*<sp/>chain<sp/>:<sp/>newHLTchains<sp/>)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame.<ref refid="d2/d5e/classTrigConf_1_1HLTFrame_1a7ec4a78eeb82d4af1f543176103c218a" kindref="member" tooltip="accessor to the list of HLT chains">theHLTChainList</ref>().<ref refid="d0/dfb/classTrigConf_1_1HLTChainList_1a0046cfaf308c16d3ab0e39cd9179e82e" kindref="member" tooltip="adds an HLTChain to the menu">addHLTChain</ref>(chain);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfHLTData/Root/HLTUtils.cxx"/>
  </compounddef>
</doxygen>
